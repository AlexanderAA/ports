/* MLton 20130715 (built Mon Jun 13 11:54:01 AEST 2016 on ports.extensibl.com) */
/*   created this file on Mon Jun 13 12:08:59 2016. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (mlton-compile, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): warn */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): true */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: mlton */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /usr/ports/pobj/mlton-20130715/mlton-on-20130715-release/build/lib */
/*    lib target dir: /usr/ports/pobj/mlton-20130715/mlton-on-20130715-release/build/lib/targets/self */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: self */
/*    target arch: AMD64 */
/*    target OS: OpenBSD */
/*    type check: false */
/*    verbosity: Pass */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl x_1473
.hidden x_1473
x_1473:
L_88828:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_88829
L_88879:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_88880+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_88880
.p2align 0x4
.long 0x45F
L_88880:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_88829:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1EB5,%r15
	je L_410985
	cmpq $0x1EB6,%r15
	je L_410980
	cmpq $0x1EB7,%r15
	je L_410975
L_88830:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,%r14
	movq 0x0(%rbp),%r11
	andq %r11,%r14
	andq $0x1,%r14
	jz L_410973
L_88831:
	cmpq %r13,%r11
	jl L_410972
	movq %r15,%r14
L_88833:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_410971
L_88834:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410971:
L_88835:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88836:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410972:
L_88838:
	movl $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410973:
L_88839:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88840:
	cmpl $0x0,%eax
	jl L_88838
	movq %r15,%r14
	jmp L_88833
.p2align 0x4
L_410975:
L_88867:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq 0x0(%rbp),%r11
	movq %r11,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_410978
L_88868:
	cmpq %r13,%r11
	jl L_88838
	movq %r15,%r14
L_88870:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq %r14,%r13
	andq $0x1,%r13
	jz L_410976
L_88871:
	cmpq %r15,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410976:
L_88872:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r15,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88873:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410978:
L_88875:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88876:
	cmpl $0x0,%eax
	jl L_88838
	movq %r15,%r14
	jmp L_88870
.p2align 0x4
L_410980:
L_88855:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq 0x0(%rbp),%r11
	movq %r11,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_410983
L_88856:
	cmpq %r13,%r11
	jl L_88838
	movq %r15,%r14
L_88858:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_410981
L_88859:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410981:
L_88860:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88861:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410983:
L_88863:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88864:
	cmpl $0x0,%eax
	jl L_88838
	movq %r15,%r14
	jmp L_88858
.p2align 0x4
L_410985:
L_88843:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq %r13,%r14
	movq 0x0(%rbp),%r11
	andq %r11,%r14
	andq $0x1,%r14
	jz L_410988
L_88844:
	cmpq %r13,%r11
	jl L_88838
	movq %r15,%r14
L_88846:
	movq %r14,%r15
	movq 0x0(%rbp),%r13
	andq %r13,%r15
	andq $0x1,%r15
	jz L_410986
L_88847:
	cmpq %r13,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410986:
L_88848:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r14,%rsi
	movq %r13,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88849:
	cmpl $0x0,%eax
	setg %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410988:
L_88851:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_88852:
	cmpl $0x0,%eax
	jl L_88838
	movq %r15,%r14
	jmp L_88846
.text
.p2align 0x4
.globl x_1485
.hidden x_1485
x_1485:
L_88881:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_88947
L_88882:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411017
L_88883:
	movq 0x8(%rbp),%r15
	movq 0x30(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x38(%r15),%r14
	movsd 0x10(%r15),%xmm15
	movsd 0x0(%rbp),%xmm14
	ucomisd %xmm14,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411016
L_88885:
	movd %xmm14,%r15
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r13,%r15
	sete %al
	movzbl %al,%eax
	movl %eax,0x8(%rbp)
	movq $0x7FFFFFFFFFFFFFFF,%r15
	movd %r15,%xmm13
	andpd %xmm14,%xmm13
	movsd (globalReal64+0x0)(%rip),%xmm14
	ucomisd %xmm13,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411015
L_88886:
	ucomisd %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411014
L_88887:
	ucomisd %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411013
L_88888:
	xorb %dl,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
L_88889:
	cmpb $0x2,%dl
	je L_411012
L_88890:
	movsd (globalReal64+0x28)(%rip),%xmm15
	ucomisd %xmm6,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411011
L_88891:
	ucomisd %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411010
L_88892:
	ucomisd %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411009
L_88893:
	xorb %dl,%dl
L_88894:
	cmpb $0x2,%dl
	je L_411008
L_88895:
	ucomisd %xmm6,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411007
L_88896:
	ucomisd %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411006
L_88897:
	ucomisd %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411005
L_88898:
	xorb %dl,%dl
L_88899:
	cmpb $0x2,%dl
	je L_411004
L_88900:
	movq 0x10(%rbp),%r15
	movsd 0x0(%r15),%xmm15
	movq 0x18(%r15),%r14
	movq 0x8(%r14),%r13
	movd %xmm6,%r11
	movq %r11,%r10
	movq 0x0(%r14),%r9
	andq %r9,%r10
	cmpq %r10,%r9
	je L_411002
L_88901:
	testq %r10,%r10
	jnz L_88903
L_88929:
	andq %r11,%r13
	jnz L_410995
L_88931:
	xorl %ecx,%ecx
	movsd %xmm6,%xmm7
L_88911:
	movsd (globalReal64+0x30)(%rip),%xmm15
	ucomisd %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_410994
L_88912:
	ucomisd %xmm15,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_410993
L_88913:
	ucomisd %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_410992
L_88914:
	xorb %dl,%dl
L_88915:
	cmpb $0x2,%dl
	jne L_410991
L_88917:
	movq $0x284D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %ecx,0x0(%r15)
	addq $0x10,%r12
	movl 0x8(%rbp),%r14d
	movl %r14d,0x4(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410991:
L_88916:
	movq $0x3,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410992:
L_88918:
	movb $0x2,%dl
	jmp L_88915
.p2align 0x4
L_410993:
L_88919:
	movb $0x1,%dl
	jmp L_88915
.p2align 0x4
L_410994:
L_88920:
	movb $0x3,%dl
	jmp L_88915
.p2align 0x4
L_410995:
L_88903:
	movl (gcState+0x44)(%rip),%r15d
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq 0x10(%rbp),%r14
	movl 0x8(%r14),%r13d
	movl %r13d,0xC(%rbp)
	testl %r13d,%r13d
	jnz L_410999
L_88904:
	movl $0x1,0x8(%r14)
	testl %r15d,%r15d
	jz L_410998
L_88905:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (globalObjptr+0x19E8)(%rip),%r15
	movq %r15,0x18(%rbp)
L_88906:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdi
	movsd %xmm6,%xmm15
	movsd %xmm6,(localReal64+0x8)(%rip)
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	addq $0x28,%rbp
	leaq (L_88907+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real64_frexp
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movsd %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_88907
.p2align 0x4
.long 0x2C
L_88907:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movsd (cReturnTemp+0x0)(%rip),%xmm15
	movsd %xmm15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_88908
L_88922:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_88923+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_88923
.p2align 0x4
.long 0x45E
L_88923:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_88908:
	movq 0x18(%rbp),%r15
	movl 0x0(%r15),%ecx
	movl 0xC(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_88910
L_88909:
	movq 0x10(%rbp),%r15
	movl $0x0,0x8(%r15)
L_88910:
	movsd 0x20(%rbp),%xmm15
	movsd %xmm15,%xmm7
	jmp L_88911
.p2align 0x4
L_410998:
L_88925:
	movq (globalObjptr+0x740)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_410999:
L_88926:
	testl %r15d,%r15d
	jz L_88925
L_88927:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x18(%rbp)
	jmp L_88906
.p2align 0x4
L_411002:
L_88932:
	andq %r11,%r13
	jz L_411003
L_88933:
	xorl %ecx,%ecx
	movsd %xmm15,%xmm7
	jmp L_88911
.p2align 0x4
L_411003:
L_88934:
	xorl %ecx,%ecx
	movsd %xmm6,%xmm7
	jmp L_88911
.p2align 0x4
L_411004:
L_88935:
	movq $0x5,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411005:
L_88936:
	movb $0x2,%dl
	jmp L_88899
.p2align 0x4
L_411006:
L_88937:
	movb $0x1,%dl
	jmp L_88899
.p2align 0x4
L_411007:
L_88938:
	movb $0x3,%dl
	jmp L_88899
.p2align 0x4
L_411008:
L_88939:
	movl 0x8(%rbp),%r15d
	shlq $0x3,%r15
	orq $0x6,%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411009:
L_88940:
	movb $0x2,%dl
	jmp L_88894
.p2align 0x4
L_411010:
L_88941:
	movb $0x1,%dl
	jmp L_88894
.p2align 0x4
L_411011:
L_88942:
	movb $0x3,%dl
	jmp L_88894
.p2align 0x4
L_411012:
L_88943:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411013:
L_88944:
	movb $0x2,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_88889
.p2align 0x4
L_411014:
L_88945:
	movb $0x1,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_88889
.p2align 0x4
L_411015:
L_88946:
	movb $0x3,%dl
	movsd %xmm13,%xmm6
	movsd %xmm15,%xmm7
	jmp L_88889
.p2align 0x4
L_411016:
L_88884:
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411017:
L_88947:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_88948+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_88948
.p2align 0x4
.long 0x494
L_88948:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_88883
.text
.p2align 0x4
.globl x_1486
.hidden x_1486
x_1486:
L_88949:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_89015
L_88950:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411045
L_88951:
	movq 0x8(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x28(%r15),%r14
	movss 0x18(%r15),%xmm15
	movss 0x0(%rbp),%xmm14
	ucomiss %xmm14,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411044
L_88953:
	movd %xmm14,%r15d
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movl %eax,0x4(%rbp)
	movl $0x7FFFFFFF,%r15d
	movd %r15d,%xmm13
	andps %xmm14,%xmm13
	movss (globalReal32+0x8)(%rip),%xmm14
	ucomiss %xmm13,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411043
L_88954:
	ucomiss %xmm14,%xmm13
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411042
L_88955:
	ucomiss %xmm13,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411041
L_88956:
	xorb %dl,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
L_88957:
	cmpb $0x2,%dl
	je L_411040
L_88958:
	movss (globalReal32+0x14)(%rip),%xmm15
	ucomiss %xmm6,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411039
L_88959:
	ucomiss %xmm15,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411038
L_88960:
	ucomiss %xmm6,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411037
L_88961:
	xorb %dl,%dl
L_88962:
	cmpb $0x2,%dl
	je L_411036
L_88963:
	ucomiss %xmm6,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411035
L_88964:
	ucomiss %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411034
L_88965:
	ucomiss %xmm7,%xmm6
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411033
L_88966:
	xorb %dl,%dl
L_88967:
	cmpb $0x2,%dl
	je L_411032
L_88968:
	movq 0x10(%rbp),%r15
	movss 0x0(%r15),%xmm15
	movq 0x10(%r15),%r14
	movl 0x4(%r14),%ecx
	movd %xmm6,%r13d
	movl %r13d,%r11d
	movl 0x0(%r14),%r10d
	andl %r10d,%r11d
	cmpl %r11d,%r10d
	je L_411030
L_88969:
	testl %r11d,%r11d
	jnz L_88971
L_88997:
	andl %ecx,%r13d
	jnz L_411023
L_88999:
	xorl %ecx,%ecx
	movss %xmm6,%xmm7
L_88979:
	movss (globalReal32+0x18)(%rip),%xmm15
	ucomiss %xmm7,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411022
L_88980:
	ucomiss %xmm15,%xmm7
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411021
L_88981:
	ucomiss %xmm15,%xmm7
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411020
L_88982:
	xorb %dl,%dl
L_88983:
	cmpb $0x2,%dl
	jne L_411019
L_88985:
	movq $0x284D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %ecx,0x0(%r15)
	addq $0x10,%r12
	movl 0x4(%rbp),%r14d
	movl %r14d,0x4(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411019:
L_88984:
	movq $0x3,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411020:
L_88986:
	movb $0x2,%dl
	jmp L_88983
.p2align 0x4
L_411021:
L_88987:
	movb $0x1,%dl
	jmp L_88983
.p2align 0x4
L_411022:
L_88988:
	movb $0x3,%dl
	jmp L_88983
.p2align 0x4
L_411023:
L_88971:
	movl (gcState+0x44)(%rip),%r15d
	incl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq 0x10(%rbp),%r14
	movl 0x4(%r14),%r13d
	movl %r13d,0x8(%rbp)
	testl %r13d,%r13d
	jnz L_411027
L_88972:
	movl $0x1,0x4(%r14)
	testl %r15d,%r15d
	jz L_411026
L_88973:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq (globalObjptr+0x19E0)(%rip),%r15
	movq %r15,0x18(%rbp)
L_88974:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdi
	movss %xmm6,%xmm15
	movss %xmm6,(localReal32+0x4)(%rip)
	movss %xmm15,%xmm0
	movq $0x1,%rax
	addq $0x28,%rbp
	leaq (L_88975+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real32_frexp
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movss %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_88975
.p2align 0x4
.long 0x2C
L_88975:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movss (cReturnTemp+0x0)(%rip),%xmm15
	movss %xmm15,0xC(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_88976
L_88990:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_88991+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_88991
.p2align 0x4
.long 0x2C
L_88991:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_88976:
	movq 0x18(%rbp),%r15
	movl 0x0(%r15),%ecx
	movl 0x8(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_88978
L_88977:
	movq 0x10(%rbp),%r15
	movl $0x0,0x4(%r15)
L_88978:
	movss 0xC(%rbp),%xmm15
	movss %xmm15,%xmm7
	jmp L_88979
.p2align 0x4
L_411026:
L_88993:
	movq (globalObjptr+0x740)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411027:
L_88994:
	testl %r15d,%r15d
	jz L_88993
L_88995:
	decl %r15d
	movl %r15d,(gcState+0x44)(%rip)
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x18(%rbp)
	jmp L_88974
.p2align 0x4
L_411030:
L_89000:
	andl %ecx,%r13d
	jz L_411031
L_89001:
	xorl %ecx,%ecx
	movss %xmm15,%xmm7
	jmp L_88979
.p2align 0x4
L_411031:
L_89002:
	xorl %ecx,%ecx
	movss %xmm6,%xmm7
	jmp L_88979
.p2align 0x4
L_411032:
L_89003:
	movq $0x5,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411033:
L_89004:
	movb $0x2,%dl
	jmp L_88967
.p2align 0x4
L_411034:
L_89005:
	movb $0x1,%dl
	jmp L_88967
.p2align 0x4
L_411035:
L_89006:
	movb $0x3,%dl
	jmp L_88967
.p2align 0x4
L_411036:
L_89007:
	movl 0x4(%rbp),%r15d
	shlq $0x3,%r15
	orq $0x6,%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411037:
L_89008:
	movb $0x2,%dl
	jmp L_88962
.p2align 0x4
L_411038:
L_89009:
	movb $0x1,%dl
	jmp L_88962
.p2align 0x4
L_411039:
L_89010:
	movb $0x3,%dl
	jmp L_88962
.p2align 0x4
L_411040:
L_89011:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411041:
L_89012:
	movb $0x2,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_88957
.p2align 0x4
L_411042:
L_89013:
	movb $0x1,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_88957
.p2align 0x4
L_411043:
L_89014:
	movb $0x3,%dl
	movss %xmm13,%xmm6
	movss %xmm15,%xmm7
	jmp L_88957
.p2align 0x4
L_411044:
L_88952:
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411045:
L_89015:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_89016+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89016
.p2align 0x4
.long 0x494
L_89016:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_88951
.text
.p2align 0x4
.globl x_1487
.hidden x_1487
x_1487:
L_89017:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89018
L_89087:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89088+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89088
.p2align 0x4
.long 0x4E8
L_89088:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_89018:
	movq 0x10(%rbp),%r14
	movl 0x4(%r14),%r13d
	movl %r13d,0x4(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movl 0x0(%r14),%r13d
	movl %r13d,0x20(%rbp)
	movl 0x0(%rbp),%r14d
	cmpl %r14d,%r13d
	jb L_411054
L_89019:
	testl %r14d,%r14d
	jz L_411053
L_89020:
	movq 0x8(%rbp),%r15
	andq $0x1,%r15
	jz L_411051
L_89021:
	movq $0x1,%r15
L_89022:
	movl 0x0(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_411050
L_89024:
	cmpq $0x0,%r15
	jng L_411049
L_89033:
L_89026:
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq %rsi,%r11
	movq 0x0(%r14),%r10
	imulq %r15,%r13
	addq $0x7,%r10
	addq %r10,%r11
	addq %r11,%rsi
	addq %rsi,%r13
	movq %r13,%rsi
	movq %r13,0x10(%rbp)
	addq $0x0,%rsi
	jc L_411048
L_89028:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_89029
L_89031:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89032+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89032
.p2align 0x4
.long 0x8E6
L_89032:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_89029:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movl 0x0(%rbp),%esi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_89030:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411048:
L_89027:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_411049:
L_89025:
	xorq %r15,%r15
	jmp L_89026
.p2align 0x4
L_411050:
L_89023:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411051:
L_89034:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_89023
L_89035:
	jmp L_89022
.p2align 0x4
L_411053:
L_89036:
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411054:
L_89037:
	cmpl $0x0,0x4(%rbp)
	sete %al
	movzbl %al,%eax
	movl %eax,0x10(%rbp)
	je L_411076
L_89038:
	movq 0x8(%rbp),%r15
	andq $0x1,%r15
	jz L_411074
L_89039:
	movq $0x1,%r15
L_89040:
	movl 0x4(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_89023
L_89041:
	cmpq $0x0,%r15
	jng L_411072
L_89083:
L_89043:
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	movq %r11,%r10
	addq $0x7,%r13
	addq %r13,%r10
	addq %r10,%r11
	addq %r11,%r15
	movq %r15,%rsi
	movq %r15,0x28(%rbp)
	addq $0x0,%rsi
	jc L_89027
L_89044:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_89045
L_89081:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89082+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89082
.p2align 0x4
.long 0x493
L_89082:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89045:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x28(%rbp),%rdx
	movl 0x4(%rbp),%esi
	movq 0x8(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_89046:
	movq (gcState+0x0)(%rip),%r12
	movq %rax,%r15
L_89047:
	movq %r15,0x28(%rbp)
	movl 0x0(%rbp),%r15d
	subl 0x20(%rbp),%r15d
	movl %r15d,0x8(%rbp)
.p2align 0x4,,0x7
loop_1007:
	movl 0x8(%rbp),%r14d
	cmpl %r14d,0x20(%rbp)
	jnb L_411062
L_89064:
	movl 0x10(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_411061
L_89065:
	movq 0x28(%rbp),%r15
	andq $0x1,%r15
	jz L_411059
L_89066:
	movq $0x1,%r15
L_89067:
	movl 0x4(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_89023
L_89068:
	cmpq $0x0,%r15
	jng L_411057
L_89077:
L_89070:
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	movq %r11,%r10
	addq $0x7,%r13
	addq %r13,%r10
	addq %r10,%r11
	addq %r11,%r15
	movq %r15,0x30(%rbp)
	addq $0x0,%r15
	jc L_89027
L_89071:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jb L_411055
.p2align 0x4,,0x7
L_89072:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x30(%rbp),%rdx
	movl 0x4(%rbp),%esi
	movq 0x28(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_89073:
	movq (gcState+0x0)(%rip),%r12
	movq %rax,%r15
L_89074:
	movq %r15,0x28(%rbp)
	movl 0x20(%rbp),%r15d
	subl %r15d,0x8(%rbp)
	jmp loop_1007
.p2align 0x4
L_411055:
L_89075:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89076+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89076
.p2align 0x4
.long 0x8E7
L_89076:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_89072
.p2align 0x4
L_411057:
L_89069:
	xorq %r15,%r15
	jmp L_89070
.p2align 0x4
L_411059:
L_89078:
	movq 0x28(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_89023
L_89079:
	jmp L_89067
.p2align 0x4
L_411061:
L_89080:
	movq 0x28(%rbp),%r15
	jmp L_89074
.p2align 0x4
L_411062:
L_89048:
	movl 0x8(%rbp),%r14d
	testl %r14d,%r14d
	jz L_411069
L_89049:
	movq 0x28(%rbp),%r15
	andq $0x1,%r15
	jz L_411067
L_89050:
	movq $0x1,%r15
L_89051:
	movl 0x8(%rbp),%r14d
	shrl $0x6,%r14d
	movslq %r14d,%r13
	subq %r13,%r15
	jo L_89023
L_89052:
	cmpq $0x0,%r15
	jng L_411065
L_89060:
L_89054:
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	addq $0x7,%r13
	addq %r11,%r13
	addq %r11,%r13
	addq %r13,%r15
	movq %r15,%rsi
	movq %r15,0x10(%rbp)
	addq $0x0,%rsi
	jc L_89027
L_89055:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_89056
L_89058:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89059+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89059
.p2align 0x4
.long 0x504
L_89059:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89056:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movl 0x8(%rbp),%esi
	movq 0x28(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_arshift
L_89057:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411065:
L_89053:
	xorq %r15,%r15
	jmp L_89054
.p2align 0x4
L_411067:
L_89061:
	movq 0x28(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_89023
L_89062:
	jmp L_89051
.p2align 0x4
L_411069:
L_89063:
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411072:
L_89042:
	xorq %r15,%r15
	jmp L_89043
.p2align 0x4
L_411074:
L_89084:
	movq 0x8(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	decq %r15
	jo L_89023
L_89085:
	jmp L_89040
.p2align 0x4
L_411076:
L_89086:
	movq 0x8(%rbp),%r15
	jmp L_89047
.text
.p2align 0x4
.globl x_1479
.hidden x_1479
x_1479:
L_89089:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89090
L_89108:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89109+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89109
.p2align 0x4
.long 0x4E7
L_89109:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_89090:
	movq 0x18(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_89091+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
.long 0x517
L_89091:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movl 0x30(%rbp),%r15d
	movl %r15d,0x4(%rbp)
	testl %r15d,%r15d
	jnz L_411079
L_89092:
	movq (globalObjptr+0x1998)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_246+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_411079:
L_89096:
	movl 0x0(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_411081
L_89097:
	movq 0x10(%rbp),%r14
	movq 0x0(%r14),%r15
L_89098:
	movq 0x8(%rbp),%r13
	movq 0x0(%r13),%r11
	movq %r15,%r14
	movq %r11,%r15
L_89099:
	movq %r15,%r13
	andq %r14,%r13
	andq $0x1,%r13
	jz L_411080
L_89100:
	cmpq %r15,%r14
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411080:
L_89101:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r15,%rsi
	movq %r14,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_89102:
	cmpl $0x0,%eax
	setl %al
	movzbl %al,%eax
	movl %eax,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411081:
L_89103:
	movq 0x10(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_89104+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toIntInfX_0
.p2align 0x4
.long 0x1
bug_246:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89093
L_89094:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_89095+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89095
.p2align 0x4
.long 0x451
L_89095:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_89093:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x496
L_89104:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x10(%rbp)
	movl 0x0(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_411083
L_89105:
	jmp L_89098
.p2align 0x4
L_411083:
L_89106:
	movq 0x20(%rbp),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%rbp),%r14
	movq %r14,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_89107+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toIntInfX_0
.p2align 0x4
.long 0x2B
L_89107:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r14
	jmp L_89099
.text
.p2align 0x4
.globl intInfBinary_12
.hidden intInfBinary_12
intInfBinary_12:
L_89110:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_89250
L_89111:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411084
L_89112:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x68(%rbp)
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r14,0x78(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_89113+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411084:
L_89250:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89251+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89251
.p2align 0x4
.long 0x804
L_89251:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_89112
.p2align 0x4
.long 0x65F
L_89113:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	testl %r15d,%r15d
	jnz L_411086
L_89114:
	movq 0x0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_89115+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411086:
L_89118:
	movq $0x2,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x65F
L_89115:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	testl %r15d,%r15d
	jnz L_89118
L_89116:
	movq 0x60(%rbp),%r15
	movq %r15,%r14
	andq $0xFF,%r14
	cmpq $0x1D,%r14
	je L_411121
	cmpq $0x1E,%r14
	je L_411112
	cmpq $0x23,%r14
	je L_411110
	cmpq $0x26,%r14
	je L_411109
	cmpq $0x2A,%r14
	je L_411100
	cmpq $0x2B,%r14
	je L_411099
	cmpq $0x2D,%r14
	je L_411098
	cmpq $0x2E,%r14
	je L_411097
	cmpq $0x33,%r14
	je L_411088
L_89117:
	andq $0x3,%r15
	jnz L_89118
L_89119:
	jmp L_89118
.p2align 0x4
L_411088:
L_89223:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	movq 0x0(%rbp),%r11
	andq %r11,%r13
	andq $0x1,%r13
	jz L_411089
L_89224:
	xorq %r11,%r14
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_4:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89225+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411089:
L_89231:
	andq $0x1,%r14
	jz L_411095
L_89232:
	movq $0x1,%r14
	xchgq %r14,%r15
L_89233:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_411093
L_89234:
	movq $0x1,%r14
L_89235:
	cmpq %r14,%r15
	jnl L_89237
L_89243:
	movq %r14,%r15
L_89237:
	movq 0x30(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%rsi
	imulq %rsi,%r15
	addq $0x7,%r13
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x10(%rbp)
	addq $0x0,%r15
	jc L_411091
L_89238:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_89239
L_89241:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_89242+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89242
.p2align 0x4
.long 0x129D
L_89242:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_89239:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movq 0x8(%rbp),%rsi
	movq 0x0(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_xorb
L_89240:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_4
.p2align 0x4
L_411091:
L_89143:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_411093:
L_89244:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_411094
L_89245:
	jmp L_89235
.p2align 0x4
L_411094:
L_89151:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411095:
L_89246:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_89151
L_89247:
	xchgq %r13,%r15
	jmp L_89233
.p2align 0x4
L_411097:
L_89215:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_89216+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1186
.p2align 0x4
L_411098:
L_89207:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_89208+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
L_411099:
L_89199:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_89200+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_411100:
L_89174:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	movq 0x0(%rbp),%r11
	andq %r11,%r13
	andq $0x1,%r13
	jz L_411101
L_89175:
	orq %r11,%r14
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_3:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89176+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411101:
L_89182:
	andq $0x1,%r14
	jz L_411107
L_89183:
	movq $0x1,%r14
	xchgq %r14,%r15
L_89184:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_411105
L_89185:
	movq $0x1,%r14
L_89186:
	cmpq %r14,%r15
	jnl L_89188
L_89194:
	movq %r14,%r15
L_89188:
	movq 0x40(%rbp),%r14
	movq 0x0(%r14),%rsi
	movq 0x8(%r14),%r13
	imulq %r13,%r15
	addq $0x7,%rsi
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x10(%rbp)
	addq $0x0,%r15
	jc L_89143
L_89189:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_89190
L_89192:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_89193+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89193
.p2align 0x4
.long 0x129D
L_89193:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_89190:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x10(%rbp),%rdx
	movq 0x8(%rbp),%rsi
	movq 0x0(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_orb
L_89191:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_3
.p2align 0x4
L_411105:
L_89195:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_89151
L_89196:
	jmp L_89186
.p2align 0x4
L_411107:
L_89197:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_89151
L_89198:
	xchgq %r13,%r15
	jmp L_89184
.p2align 0x4
L_411109:
L_89166:
	movq 0x0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_89167+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1182
.p2align 0x4
L_411110:
L_89155:
	movq 0x0(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x60(%rbp)
loop_1008:
	movq 0x58(%rbp),%r15
	cmpq $0x1,%r15
	je L_411111
L_89156:
	movq 0x48(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r13),%r11
	movq %r11,0x88(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x68(%rbp)
	movq %r15,0x78(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_89157+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigDiv_0
.p2align 0x4
L_411111:
L_89159:
	movq 0x60(%rbp),%r14
	movq %r14,0x70(%rbp)
	movq 0x50(%rbp),%r14
	movq %r14,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_89160+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411112:
L_89128:
	movq 0x0(%rbp),%r14
	andq 0x8(%rbp),%r14
	movq %r14,%r13
	andq $0x1,%r13
	jz L_411113
L_89129:
	orq $0x1,%r14
	movq %r14,0x58(%rbp)
intInf_2:
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89130+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
L_411113:
L_89136:
	movq 0x8(%rbp),%r14
	andq $0x1,%r14
	jz L_411119
L_89137:
	movq $0x1,%r14
	xchgq %r14,%r15
L_89138:
	movq 0x0(%rbp),%r14
	andq $0x1,%r14
	jz L_411117
L_89139:
	movq $0x1,%r14
L_89140:
	cmpq %r14,%r15
	jnl L_89142
L_89149:
	movq %r14,%r15
L_89142:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq 0x0(%r14),%r11
	imulq %r15,%r13
	addq $0x7,%r11
	addq %r11,%rsi
	addq %r13,%rsi
	movq %rsi,%r15
	movq %rsi,0x18(%rbp)
	addq $0x0,%r15
	jc L_89143
L_89144:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_89145
L_89147:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_89148+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89148
.p2align 0x4
.long 0x129D
L_89148:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_89145:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x18(%rbp),%rdx
	movq 0x8(%rbp),%rsi
	movq 0x0(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_andb
L_89146:
	movq %rax,0x58(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp intInf_2
.p2align 0x4
L_411117:
L_89150:
	movq 0x0(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_89151
L_89152:
	jmp L_89140
.p2align 0x4
L_411119:
L_89153:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_89151
L_89154:
	xchgq %r13,%r15
	jmp L_89138
.p2align 0x4
L_411121:
L_89120:
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x60,%rbp
	leaq (L_89121+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1183
.p2align 0x4
.long 0xA96
L_89225:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89226
L_89229:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89230+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89230
.p2align 0x4
.long 0x770
L_89230:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89226:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89227:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61B
L_89216:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89217+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
.long 0x61B
L_89208:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
.long 0x61B
L_89200:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89201+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
.long 0xA96
L_89176:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89177
L_89180:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89181+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89181
.p2align 0x4
.long 0x770
L_89181:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89177:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89178:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61B
L_89167:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89168+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
.long 0x129E
L_89157:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_89158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x79A
L_89160:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89161
L_89164:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_89165+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89165
.p2align 0x4
.long 0x129F
L_89165:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_89161:
	movl 0x68(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89162:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xA96
L_89130:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89131
L_89134:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89135+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89135
.p2align 0x4
.long 0x770
L_89135:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89131:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89132:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x61B
L_89121:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_89122+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1473
.p2align 0x4
.long 0xA96
L_89217:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89218
L_89221:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89222
.p2align 0x4
.long 0x770
L_89222:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89218:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89219:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xA96
L_89209:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89210
L_89213:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89214
.p2align 0x4
.long 0x770
L_89214:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89210:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89211:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xA96
L_89201:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89202
L_89205:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89206+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89206
.p2align 0x4
.long 0x770
L_89206:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89202:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89203:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xA96
L_89168:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89169
L_89172:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89173+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89173
.p2align 0x4
.long 0x770
L_89173:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89169:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89170:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x77E
L_89158:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq 0x58(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq %r15,0x58(%rbp)
	jmp loop_1008
.p2align 0x4
.long 0xA96
L_89122:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89123
L_89126:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_89127+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89127
.p2align 0x4
.long 0x770
L_89127:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_89123:
	movl 0x60(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_89118
L_89124:
	movq $0x1C99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x27F3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1480
.hidden x_1480
x_1480:
L_89252:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89253
L_89284:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89285+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89285
.p2align 0x4
.long 0x45B
L_89285:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_89253:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq %r14,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_89254+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
.long 0x525
L_89254:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x10(%rbp)
	testl %r15d,%r15d
	jnz L_411142
L_89255:
	movq (globalObjptr+0x1938)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_247+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_411142:
L_89259:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movq %r13,%r15
	andq %r14,%r15
	andq $0x1,%r15
	jz L_411143
L_89260:
	xorq %r14,%r13
	orq $0x1,%r13
	movq %r13,0x20(%rbp)
L_89261:
	movq 0x18(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89262+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411143:
L_89265:
	andq $0x1,%r14
	jz L_411149
L_89266:
	movq $0x1,%r15
L_89267:
	movq 0x30(%rbp),%r14
	andq $0x1,%r14
	jz L_411147
L_89268:
	movq $0x1,%r14
L_89269:
	cmpq %r14,%r15
	jnl L_89271
L_89278:
	movq %r14,%r15
L_89271:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%rsi
	movq 0x8(%r14),%r13
	imulq %r13,%r15
	addq $0x7,%rsi
	addq %r13,%rsi
	addq %r15,%rsi
	movq %rsi,%r15
	movq %rsi,0x38(%rbp)
	addq $0x0,%r15
	jc L_411145
L_89273:
	movq (gcState+0x458)(%rip),%r14
	subq %r12,%r14
	cmpq %r15,%r14
	jnb L_89274
L_89276:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r14d
	movl %r14d,%edx
	movq %r15,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89277+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89277
.p2align 0x4
.long 0x1021
L_89277:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89274:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x38(%rbp),%rdx
	movq 0x30(%rbp),%rsi
	movq 0x10(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_xorb
L_89275:
	movq %rax,0x20(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp L_89261
.p2align 0x4
L_411145:
L_89272:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_411147:
L_89279:
	movq 0x30(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_411148
L_89281:
	jmp L_89269
.p2align 0x4
L_411148:
L_89280:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411149:
L_89282:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_89280
L_89283:
	jmp L_89267
.p2align 0x4
.long 0x1
bug_247:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89256
L_89257:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_89258+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89258
.p2align 0x4
.long 0x451
L_89258:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_89256:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B2
L_89262:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_89263+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x511
L_89263:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_89264+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x51A
L_89264:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl rshift_0
.hidden rshift_0
rshift_0:
L_89286:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89287
L_89321:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89322+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89322
.p2align 0x4
.long 0x4E7
L_89322:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_89287:
	movq 0x18(%rbp),%r14
	movq 0x18(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x10(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r14),%r15
	movl 0x0(%rbp),%r14d
	testl %r14d,%r14d
	jnz L_411155
L_89288:
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r11
	movq %r11,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_411153
L_89289:
	cmpq %r13,%r11
	jl L_411152
zero_2:
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_89291+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411152:
	movq %r11,%r14
L_89295:
	movq %r14,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	addq $0x40,%rbp
	leaq (L_89296+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411153:
L_89301:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r11,%rdi
	xorq %rax,%rax
	movq %r11,%rbx
	call IntInf_compare
L_89302:
	cmpl $0x0,%eax
	jl L_411154
	jmp zero_2
.p2align 0x4
L_411154:
	movq %rbx,%r14
	jmp L_89295
.p2align 0x4
L_411155:
L_89305:
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x18(%rbp)
	movq %r15,%r14
	andq %r13,%r14
	andq $0x1,%r14
	jz L_411157
L_89306:
	cmpq %r15,%r13
	jl L_411156
L_89308:
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89309+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411156:
L_89316:
	movq 0x18(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89309+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411157:
L_89317:
	movq (c_stackP+0x0)(%rip),%rsp
	movq %r13,%rsi
	movq %r15,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_89318:
	cmpl $0x0,%eax
	jg L_89316
	jmp L_89308
.p2align 0x4
.long 0x71D
L_89291:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x38(%rbp)
	movq $0x3,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_89292+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x510
L_89296:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movl 0x40(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	movl %r15d,0x40(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_89297+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1487
.p2align 0x4
.long 0x4A7
L_89309:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movl 0x40(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_89310+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toIntInfX_0
.p2align 0x4
.long 0x71E
L_89292:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq $0x1,0x30(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x38(%rbp)
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_89293+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x1045
L_89297:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89298+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x1050
L_89310:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x20(%rbp)
	movl 0x38(%rbp),%r14d
	movl %r14d,0x40(%rbp)
	movq %r15,0x48(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_89311+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1487
.p2align 0x4
.long 0x48F
L_89293:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x8E8
L_89298:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_89299+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x1045
L_89311:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89312+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x5E3
L_89299:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_89300+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x8E8
L_89312:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_89313+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x48F
L_89300:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5E3
L_89313:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_89314+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x48F
L_89314:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl swap_0
.hidden swap_0
swap_0:
L_89323:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89324
L_89350:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89351+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89351
.p2align 0x4
.long 0x45B
L_89351:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_89324:
	movq 0x10(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x30(%rbp)
	movl 0x4(%r15),%r13d
	movl %r13d,0x34(%rbp)
	movl %r14d,0x40(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_89325+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1487
.p2align 0x4
.long 0x12A0
L_89325:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x10(%rbp)
	movl 0x30(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movq $0x3,0x48(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x40,%rbp
	leaq (L_89326+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0xF79
L_89326:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	movq 0x8(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x40(%rbp)
	movq %r15,0x50(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_89327+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigDiv_0
.p2align 0x4
.long 0x1019
L_89327:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89328+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x12A1
L_89328:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movl 0x34(%rbp),%r14d
	movl %r14d,0x38(%rbp)
	movq %r15,0x40(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_89329+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x50B
L_89329:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,%r13
	andq %r15,%r13
	andq $0x1,%r13
	jz L_411161
L_89330:
	orq %r15,%r14
	orq $0x1,%r14
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411161:
L_89331:
	andq $0x1,%r14
	jz L_411167
L_89332:
	movq $0x1,%r14
	xchgq %r14,%r15
L_89333:
	movq 0x18(%rbp),%r14
	andq $0x1,%r14
	jz L_411165
L_89334:
	movq $0x1,%r14
L_89335:
	cmpq %r14,%r15
	jnl L_89337
L_89344:
	movq %r14,%r15
L_89337:
	movq 0x28(%rbp),%r14
	movq 0x8(%r14),%rsi
	movq %rsi,%r13
	movq 0x0(%r14),%r11
	imulq %r15,%r13
	addq $0x7,%r11
	addq %r11,%rsi
	addq %rsi,%r13
	movq %r13,%rsi
	movq %r13,0x20(%rbp)
	addq $0x0,%rsi
	jc L_411163
L_89339:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_89340
L_89342:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89343+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89343
.p2align 0x4
.long 0x45E
L_89343:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_89340:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x20(%rbp),%rdx
	movq 0x18(%rbp),%rsi
	movq 0x10(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_orb
L_89341:
	movq %rax,0x0(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411163:
L_89338:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_411165:
L_89345:
	movq 0x18(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_411166
L_89347:
	jmp L_89335
.p2align 0x4
L_411166:
L_89346:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411167:
L_89348:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	decq %r13
	jo L_89346
L_89349:
	xchgq %r13,%r15
	jmp L_89333
.text
.p2align 0x4
.globl setRoundingMode_0
.hidden setRoundingMode_0
setRoundingMode_0:
L_89352:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89353
L_89381:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_89382+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89382
.p2align 0x4
.long 0x453
L_89382:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_89353:
	movb 0x0(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_411179
	cmpb $0x2,%r15b
	je L_411178
	cmpb $0x3,%r15b
	je L_411177
L_89354:
	movl $0x3,%ecx
L_89355:
	cmpl $0xFFFFFFFF,%ecx
	je L_411176
L_89356:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %ecx,%edi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_89357+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_setRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89357
.p2align 0x4
.long 0x0
L_89357:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movl %eax,%r15d
	movl %eax,(cReturnTemp+0x0)(%rip)
	testl %r15d,%r15d
	jz L_411175
L_89358:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x16,%r15d
	movl %r15d,%edi
	xorq %rax,%rax
	addq $0x8,%rbp
	leaq (L_89359+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Posix_Error_strError
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89359
.p2align 0x4
.long 0x0
L_89359:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq %rax,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89360
L_89374:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_89375+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89375
.p2align 0x4
.long 0x453
L_89375:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_89360:
	movq 0x0(%rbp),%r15
	movq %r15,0x8(%rbp)
	testq %r15,%r15
	jz L_411173
L_89361:
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_1009:
	movslq %ecx,%r15
	movq %r15,0x10(%rbp)
	movq 0x8(%rbp),%r13
	movb 0x0(%r13,%r15,1),%r14b
	testb %r14b,%r14b
	jz L_411169
L_89362:
	incl %ecx
	jmp loop_1009
.p2align 0x4
L_411169:
L_89363:
	movq 0x10(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_411172
L_89364:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89365+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89365
.p2align 0x4
.long 0x47A
L_89365:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x18(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1010:
	cmpq 0x10(%rbp),%r15
	jnl L_411170
L_89371:
	movl %r15d,%r14d
	movslq %r14d,%r13
	movq 0x18(%rbp),%r14
	movq 0x8(%rbp),%r10
	movb 0x0(%r10,%r13,1),%r11b
	movb %r11b,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1010
.p2align 0x4
L_411170:
L_89366:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89367
L_89369:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89370+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89370
.p2align 0x4
.long 0x27
L_89370:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_89367:
	movq 0x18(%rbp),%r15
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
L_89368:
	movq $0x141B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalWord64+0x10)(%rip),%r15
	movq %r15,0x0(%r14)
	movq $0x1931,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	addq $0x10,%r12
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411172:
L_89372:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411173:
L_89373:
	movq (globalObjptr+0xDBE8)(%rip),%r15
	jmp L_89368
.p2align 0x4
L_411175:
L_89376:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411176:
L_89377:
	movq (globalObjptr+0x760)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411177:
L_89380:
	xorl %ecx,%ecx
	jmp L_89355
.p2align 0x4
L_411178:
L_89379:
	movl $0x1,%ecx
	jmp L_89355
.p2align 0x4
L_411179:
L_89378:
	movl $0x2,%ecx
	jmp L_89355
.text
.p2align 0x4
.globl fromIntInf_1
.hidden fromIntInf_1
fromIntInf_1:
L_89383:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89384
L_89413:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89414+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89414
.p2align 0x4
.long 0x45C
L_89414:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_89384:
	movq 0x8(%rbp),%r14
	movq 0x10(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x0(%rbp),%r14
	movq %r14,%r13
	andq $0x1,%r13
	andq $0x1,%r13
	jz L_411182
L_89385:
	cmpq $0x1,%r14
	jnl L_411181
L_89406:
	movq %r15,0x40(%rbp)
	leaq L_89404(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x0(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_89407+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigNeg_0
.p2align 0x4
L_411181:
L_89387:
	leaq L_89404(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_89388+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1197
.p2align 0x4
L_411182:
L_89409:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1,%rsi
	movq %r14,%rdi
	xorq %rax,%rax
	call IntInf_compare
L_89410:
	cmpl $0x0,%eax
	jnl L_89387
	jmp L_89406
.p2align 0x4
.long 0x5ED
L_89407:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_89408+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1197
.p2align 0x4
.long 0x25
L_89404:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x459
L_89388:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (fromString_9+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x459
L_89408:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq %r15,0x30(%rbp)
	movq (globalObjptr+0xD3C0)(%rip),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_89388+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x473
fromString_9:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	decq %r14
	jo L_411190
L_89390:
	movb 0x0(%r15,%r14,1),%r13b
	testb %r13b,%r13b
	jz L_411185
L_89391:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411185:
L_89392:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89393+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89393
.p2align 0x4
.long 0x49D
L_89393:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	testl %eax,%eax
	jz L_411189
L_89394:
	cmpl $0x1,%eax
	je L_411188
L_89395:
	cmpl $0x2,%eax
	je L_411187
L_89396:
	cmpl $0x3,%eax
	je L_411186
L_89397:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411186:
L_89398:
	xorl %ecx,%ecx
L_89399:
	movq (c_stackP+0x0)(%rip),%rsp
	movl %ecx,%esi
	movq 0x20(%rbp),%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89400+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call Real32_strtor
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	movss %xmm0,(cReturnTemp+0x0)(%rip)
	jmp L_89400
.p2align 0x4
.long 0x649
L_89400:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movss (cReturnTemp+0x0)(%rip),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x0(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411187:
L_89401:
	movl $0x2,%ecx
	jmp L_89399
.p2align 0x4
L_411188:
L_89402:
	movl $0x3,%ecx
	jmp L_89399
.p2align 0x4
L_411189:
L_89403:
	movl $0x1,%ecx
	jmp L_89399
.p2align 0x4
L_411190:
L_89389:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1477
.hidden x_1477
x_1477:
L_89415:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89416
L_89449:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89450+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89450
.p2align 0x4
.long 0x6FE
L_89450:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_89416:
	movq 0x8(%rbp),%r15
	movl 0x20(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movl 0x2C(%r15),%r14d
	movl %r14d,0x2C(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	leaq L_89448(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x11,0x40(%rbp)
	movq $0x81,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_89417+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
.long 0x4FA
L_89417:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	jne L_411192
L_89420:
	movq $0x11,0x38(%rbp)
	movq $0x81,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_89421+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_411192:
L_89419:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48A
L_89448:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_89419
.p2align 0x4
.long 0x12A2
L_89421:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (new_5+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x12A2
new_5:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movslq %r15d,%rdx
	movq %rdx,0x10(%rbp)
	movl %r15d,0x8(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_89419
L_89422:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89423+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89423
.p2align 0x4
.long 0x12A3
L_89423:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1011:
	cmpq 0x10(%rbp),%r15
	jnl L_411193
L_89446:
	movq 0x8(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1011
.p2align 0x4
L_411193:
L_89424:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89425
L_89444:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89445+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89445
.p2align 0x4
.long 0x12A4
L_89445:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89425:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq %r15,%r14
	andq $0x1,%r14
	jz L_411200
L_89426:
	sarq $0x1,%r15
L_89427:
	movq 0x10(%rbp),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_89419
L_89429:
	movl 0x28(%rbp),%r14d
	decl %r14d
	jo L_89419
L_89430:
	cmpl %r13d,%r14d
	jnb L_89419
L_89432:
	movq 0x8(%rbp),%r14
	movq %r15,0x0(%r14)
	movl 0x2C(%rbp),%r11d
	decl %r11d
	jo L_89419
L_89433:
	cmpl %r13d,%r11d
	jnb L_89419
L_89435:
	movd %r15,%xmm15
	ucomisd %xmm15,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_89419
L_89437:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	addq $0x10,%r12
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411200:
L_89438:
	movq 0x0(%r15),%r14
	testq %r14,%r14
	jz L_411202
L_89439:
	movl $0x1,%ecx
L_89440:
	movq 0x8(%r15),%r14
	testl %ecx,%ecx
	jz L_411201
L_89442:
	negq %r14
	movq %r14,%r15
	jmp L_89427
.p2align 0x4
L_411201:
	movq %r14,%r15
	jmp L_89427
.p2align 0x4
L_411202:
L_89443:
	xorl %ecx,%ecx
	jmp L_89440
.text
.p2align 0x4
.globl x_1478
.hidden x_1478
x_1478:
L_89451:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89452
L_89485:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89486+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89486
.p2align 0x4
.long 0x6FE
L_89486:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_89452:
	movq 0x8(%rbp),%r15
	movl 0x4(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movl 0x10(%r15),%r14d
	movl %r14d,0x2C(%rbp)
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	leaq L_89484(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x11,0x40(%rbp)
	movq $0x41,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_89453+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigRem_0
.p2align 0x4
.long 0x4FA
L_89453:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	jne L_411206
L_89456:
	movq $0x11,0x38(%rbp)
	movq $0x41,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_89457+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigQuot_0
.p2align 0x4
L_411206:
L_89455:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48A
L_89484:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_89455
.p2align 0x4
.long 0x12A2
L_89457:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (new_6+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x12A2
new_6:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movslq %r15d,%rdx
	movq %rdx,0x10(%rbp)
	movl %r15d,0x8(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_89455
L_89458:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89459+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89459
.p2align 0x4
.long 0x12A3
L_89459:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq %rax,0x8(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1012:
	cmpq 0x10(%rbp),%r15
	jnl L_411207
L_89482:
	movq 0x8(%rbp),%r14
	movb $0x0,0x0(%r14,%r15,1)
	incq %r15
	jmp loop_1012
.p2align 0x4
L_411207:
L_89460:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89461
L_89480:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89481+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89481
.p2align 0x4
.long 0x12A4
L_89481:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89461:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq %r15,%r14
	andq $0x1,%r14
	jz L_411214
L_89462:
	sarq $0x1,%r15
L_89463:
	movq 0x10(%rbp),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_89455
L_89465:
	movl 0x28(%rbp),%r14d
	decl %r14d
	jo L_89455
L_89466:
	cmpl %r13d,%r14d
	jnb L_89455
L_89468:
	movl %r15d,%r14d
	movq 0x8(%rbp),%r15
	movl %r14d,0x0(%r15)
	movl 0x2C(%rbp),%r11d
	decl %r11d
	jo L_89455
L_89469:
	cmpl %r13d,%r11d
	jnb L_89455
L_89471:
	movd %r14d,%xmm15
	ucomiss %xmm15,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_89455
L_89473:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411214:
L_89474:
	movq 0x0(%r15),%r14
	testq %r14,%r14
	jz L_411216
L_89475:
	movl $0x1,%ecx
L_89476:
	movq 0x8(%r15),%r14
	testl %ecx,%ecx
	jz L_411215
L_89478:
	negq %r14
	movq %r14,%r15
	jmp L_89463
.p2align 0x4
L_411215:
	movq %r14,%r15
	jmp L_89463
.p2align 0x4
L_411216:
L_89479:
	xorl %ecx,%ecx
	jmp L_89476
.text
.p2align 0x4
.globl x_1476
.hidden x_1476
x_1476:
L_89487:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89488
L_89519:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_89520+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89520
.p2align 0x4
.long 0x45B
L_89520:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_89488:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq %r14,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_89489+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
.long 0x525
L_89489:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movl 0x38(%rbp),%r15d
	movl %r15d,0x10(%rbp)
	testl %r15d,%r15d
	jnz L_411220
L_89490:
	movq (globalObjptr+0x1918)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_248+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_411220:
L_89494:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	andq %r14,%r13
	movq %r13,%r15
	andq $0x1,%r15
	jz L_411221
L_89495:
	orq $0x1,%r13
	movq %r13,0x20(%rbp)
L_89496:
	movq 0x18(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89497+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411221:
L_89500:
	movq 0x10(%rbp),%r15
	andq $0x1,%r15
	jz L_411227
L_89501:
	movq $0x1,%r15
L_89502:
	movq 0x30(%rbp),%r14
	andq $0x1,%r14
	jz L_411225
L_89503:
	movq $0x1,%r14
L_89504:
	cmpq %r14,%r15
	jnl L_89506
L_89513:
	movq %r14,%r15
L_89506:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	imulq %r11,%r15
	addq $0x7,%r13
	addq %r11,%r13
	addq %r13,%r15
	movq %r15,%rsi
	movq %r15,0x38(%rbp)
	addq $0x0,%rsi
	jc L_411223
L_89508:
	movq (gcState+0x458)(%rip),%r15
	subq %r12,%r15
	cmpq %rsi,%r15
	jnb L_89509
L_89511:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89512+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89512
.p2align 0x4
.long 0x1021
L_89512:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89509:
	movq (c_stackP+0x0)(%rip),%rsp
	movq 0x38(%rbp),%rdx
	movq 0x10(%rbp),%rsi
	movq 0x30(%rbp),%rdi
	xorq %rax,%rax
	movq %r12,(gcState+0x0)(%rip)
	call IntInf_andb
L_89510:
	movq %rax,0x20(%rbp)
	movq (gcState+0x0)(%rip),%r12
	jmp L_89496
.p2align 0x4
L_411223:
L_89507:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	call MLton_heapCheckTooLarge
.p2align 0x4
L_411225:
L_89514:
	movq 0x30(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r14
	decq %r14
	jo L_411226
L_89516:
	jmp L_89504
.p2align 0x4
L_411226:
L_89515:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411227:
L_89517:
	movq 0x10(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	decq %r15
	jo L_89515
L_89518:
	jmp L_89502
.p2align 0x4
.long 0x1
bug_248:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89491
L_89492:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_89493+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89493
.p2align 0x4
.long 0x451
L_89493:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_89491:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4B2
L_89497:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0x48(%rbp)
	movq $0x3,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_89498+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x511
L_89498:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_89499+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x51A
L_89499:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1474
.hidden x_1474
x_1474:
L_89521:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89522
L_89562:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89563+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89563
.p2align 0x4
.long 0x12A7
L_89563:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89522:
	movq 0x8(%rbp),%r15
	movl 0x28(%r15),%r14d
	movl %r14d,0x30(%rbp)
	movslq 0x24(%r15),%rdx
	movq %rdx,0x38(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_89530
L_89523:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89524+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89524
.p2align 0x4
.long 0x960
L_89524:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x0(%rbp),%xmm15
	movd %xmm15,%r15
	movq %r15,0x0(%rax)
	movq %rax,0x8(%rbp)
	movq 0x38(%rbp),%rdx
	testq %rdx,%rdx
	jz L_411240
L_89525:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89526+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89526
.p2align 0x4
.long 0x12A5
L_89526:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,%r15
L_89527:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1013:
	cmpq 0x38(%rbp),%r14
	jnl L_411230
L_89559:
	movq 0x8(%rbp),%r11
	movb 0x0(%r11,%r14,1),%r13b
	movb %r13b,0x0(%r15,%r14,1)
	incq %r14
	jmp loop_1013
.p2align 0x4
L_411230:
L_89528:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_89530
L_89531:
	movl 0x30(%rbp),%r14d
	decl %r14d
	jo L_89530
L_89532:
	cmpl %r13d,%r14d
	jnb L_89530
L_89534:
	movq 0x0(%r15),%r14
	movq %r14,%r15
	sarq $0x3E,%r15
	jz L_411236
L_89535:
	movq %r14,0x40(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
.p2align 0x4,,0x7
loop_1014:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411235
.p2align 0x4,,0x7
L_89536:
	movq 0x40(%rbp),%r15
	testq %r15,%r15
	jz L_411232
L_89537:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_411231
L_89538:
	movq $0x5B,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x38(%rbp)
	movq $0x29A9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movq $0x0,0x40(%rbp)
	jmp loop_1014
.p2align 0x4
L_411231:
L_89530:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411232:
L_89539:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x16E7,%rcx
	movq 0x38(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89540+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89540
.p2align 0x4
.long 0x65D
L_89540:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_411234
L_89541:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_89542:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_411233
L_89543:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_89542
.p2align 0x4
L_411233:
L_89545:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x30(%rbp)
L_89546:
	leaq L_89554(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x81,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_89547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_411234:
	movq %rax,%r15
	jmp L_89545
.p2align 0x4
L_411235:
L_89556:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_89557+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89557
.p2align 0x4
.long 0x12A6
L_89557:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_89536
.p2align 0x4
L_411236:
L_89558:
	shlq $0x1,%r14
	orq $0x1,%r14
	movq %r14,0x30(%rbp)
	jmp L_89546
.p2align 0x4
L_411240:
L_89560:
	movq (globalObjptr+0x6F8)(%rip),%r15
	jmp L_89527
.p2align 0x4
.long 0x1045
L_89547:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x40(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_89548+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x473
L_89554:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_89530
.p2align 0x4
.long 0x1251
L_89548:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movl 0x58(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	movq $0x3,0x60(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_89549+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x6DB
L_89549:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x48(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89550+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x78B
L_89550:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89551
L_89552:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89553+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89553
.p2align 0x4
.long 0x6AE
L_89553:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89551:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1475
.hidden x_1475
x_1475:
L_89564:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89565
L_89605:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89606+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89606
.p2align 0x4
.long 0x12A7
L_89606:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89565:
	movq 0x8(%rbp),%r15
	movl 0xC(%r15),%r14d
	movl %r14d,0x4(%rbp)
	movslq 0x8(%r15),%rdx
	movq %rdx,0x30(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_89573
L_89566:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89567+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89567
.p2align 0x4
.long 0x8B3
L_89567:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movss 0x0(%rbp),%xmm15
	movd %xmm15,%r15d
	movl %r15d,0x0(%rax)
	movq %rax,0x8(%rbp)
	movq 0x30(%rbp),%rdx
	testq %rdx,%rdx
	jz L_411254
L_89568:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x51,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89569+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89569
.p2align 0x4
.long 0x12A8
L_89569:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,%r15
L_89570:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1015:
	cmpq 0x30(%rbp),%r14
	jnl L_411244
L_89602:
	movq 0x8(%rbp),%r11
	movb 0x0(%r11,%r14,1),%r13b
	movb %r13b,0x0(%r15,%r14,1)
	incq %r14
	jmp loop_1015
.p2align 0x4
L_411244:
L_89571:
	movq $0x7,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_89573
L_89574:
	movl 0x4(%rbp),%r14d
	decl %r14d
	jo L_89573
L_89575:
	cmpl %r13d,%r14d
	jnb L_89573
L_89577:
	movl 0x0(%r15),%r14d
	movq %r14,%r15
	sarq $0x3E,%r15
	jz L_411250
L_89578:
	movq %r14,0x40(%rbp)
	movq (globalObjptr+0x8)(%rip),%r15
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
.p2align 0x4,,0x7
loop_1016:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411249
.p2align 0x4,,0x7
L_89579:
	movq 0x40(%rbp),%r15
	testq %r15,%r15
	jz L_411246
L_89580:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	incq %r13
	jo L_411245
L_89581:
	movq $0x5B,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	movq %r13,0x38(%rbp)
	movq $0x29A9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movq $0x0,0x40(%rbp)
	jmp loop_1016
.p2align 0x4
L_411245:
L_89573:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411246:
L_89582:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x16E7,%rcx
	movq 0x38(%rbp),%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r14
	movq %r14,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89583+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89583
.p2align 0x4
.long 0x65D
L_89583:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_411248
L_89584:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
	movq %rax,%r15
.p2align 0x4,,0x7
L_89585:
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq %r10,0x0(%r15,%r11,8)
	cmpq $0x1,%r13
	je L_411247
L_89586:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_89585
.p2align 0x4
L_411247:
L_89588:
	movq $0xD,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x30(%rbp)
L_89589:
	leaq L_89597(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x41,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_89590+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_411248:
	movq %rax,%r15
	jmp L_89588
.p2align 0x4
L_411249:
L_89599:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_89600+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89600
.p2align 0x4
.long 0x12A6
L_89600:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_89579
.p2align 0x4
L_411250:
L_89601:
	shlq $0x1,%r14
	orq $0x1,%r14
	movq %r14,0x30(%rbp)
	jmp L_89589
.p2align 0x4
L_411254:
L_89603:
	movq (globalObjptr+0x6F8)(%rip),%r15
	jmp L_89570
.p2align 0x4
.long 0x1045
L_89590:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x40(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_89591+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x473
L_89597:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_89573
.p2align 0x4
.long 0x1251
L_89591:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movl 0x58(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	movl %r15d,0x58(%rbp)
	movq $0x3,0x60(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_89592+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x6DB
L_89592:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x50(%rbp)
	movq 0x48(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89593+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x78B
L_89593:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89594
L_89595:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89596+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89596
.p2align 0x4
.long 0x6AE
L_89596:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89594:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1484
.hidden x_1484
x_1484:
L_89607:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x18(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89608
L_89838:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89839+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89839
.p2align 0x4
.long 0x45C
L_89839:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_89608:
	movq 0x8(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_411263
L_89609:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_411262
L_89612:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_89613+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89613
.p2align 0x4
.long 0x508
L_89613:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_411261
L_89614:
	cmpl $0x1,%eax
	je L_411260
L_89615:
	cmpl $0x2,%eax
	je L_411259
L_89616:
	cmpl $0x3,%eax
	jne L_411258
L_89619:
	movb $0x0,0x30(%rbp)
L_89620:
	leaq L_89648(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89621+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411258:
L_89618:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411259:
L_89722:
	movb $0x1,0x30(%rbp)
	jmp L_89620
.p2align 0x4
L_411260:
L_89723:
	movb $0x2,0x30(%rbp)
	jmp L_89620
.p2align 0x4
L_411261:
L_89724:
	movb $0x3,0x30(%rbp)
	jmp L_89620
.p2align 0x4
L_411262:
L_89611:
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411263:
L_89725:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_89611
L_89727:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89728+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89728
.p2align 0x4
.long 0x6AE
L_89728:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411267
L_89729:
	cmpl $0x1,%eax
	je L_411266
L_89730:
	cmpl $0x2,%eax
	je L_411265
L_89731:
	cmpl $0x3,%eax
	jne L_89618
L_89733:
	movb $0x0,0xC(%rbp)
L_89734:
	leaq L_89764(%rip),%r15
	movq %r15,0x10(%rbp)
	movq %rbp,%r15
	addq $0x18,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89735+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411265:
L_89835:
	movb $0x1,0xC(%rbp)
	jmp L_89734
.p2align 0x4
L_411266:
L_89836:
	movb $0x2,0xC(%rbp)
	jmp L_89734
.p2align 0x4
L_411267:
L_89837:
	movb $0x3,0xC(%rbp)
	jmp L_89734
.p2align 0x4
.long 0x1039
L_89621:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_411284
	cmpq $0x2,%r15
	je L_411283
	cmpq $0x3,%r15
	je L_411282
	cmpq $0x5,%r15
	je L_411281
	cmpq $0x6,%r15
	je L_411280
	cmpq $0x7,%r15
	je L_411279
L_89622:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23C1,%r14
	je L_411276
	cmpq $0x23C2,%r14
	je L_411273
	cmpq $0x23C3,%r14
	je L_411271
L_89623:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd (globalReal64+0x0)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411270
L_89692:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
L_89626:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89627+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411270:
L_89624:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_ln
L_89625:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411271:
L_89707:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd (globalReal64+0x0)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411272
L_89710:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411272:
L_89708:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_log10
L_89709:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411273:
L_89700:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411275
L_89701:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411274
L_89702:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_acos
L_89703:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411274:
	movsd %xmm14,%xmm7
L_89705:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411275:
	movsd %xmm14,%xmm7
	jmp L_89705
.p2align 0x4
L_411276:
L_89693:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411278
L_89694:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411277
L_89695:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_asin
L_89696:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411277:
	movsd %xmm14,%xmm7
L_89698:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411278:
	movsd %xmm14,%xmm7
	jmp L_89698
.p2align 0x4
L_411279:
L_89721:
	sqrtsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411280:
L_89719:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_exp
L_89720:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411281:
L_89717:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_atan
L_89718:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411282:
L_89715:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_cos
L_89716:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411283:
L_89713:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_sin
L_89714:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
L_411284:
L_89711:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_tan
L_89712:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89626
.p2align 0x4
.long 0x25
L_89648:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89649+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89649
.p2align 0x4
.long 0x475
L_89649:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_411289
L_89650:
	cmpl $0x1,%eax
	je L_411288
L_89651:
	cmpl $0x2,%eax
	je L_411287
L_89652:
	cmpl $0x3,%eax
	jne L_89618
L_89654:
	xorb %dl,%dl
L_89655:
	movb 0x30(%rbp),%r15b
	cmpb %dl,%r15b
	je L_89611
L_89656:
	movq 0x18(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_89657+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411287:
L_89659:
	movb $0x1,%dl
	jmp L_89655
.p2align 0x4
L_411288:
L_89660:
	movb $0x2,%dl
	jmp L_89655
.p2align 0x4
L_411289:
L_89661:
	movb $0x3,%dl
	jmp L_89655
.p2align 0x4
.long 0x7BF
L_89735:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%rax
	andq $0xF,%rax
	subq $0x1,%rax
	cmpq $0x9,%rax
	ja L_411290
	leaq jumpTable_219(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_219:
.quad L_411306,L_411305,L_411304,L_89736,L_411302,L_411301,L_411300,L_89736,L_411298,L_411296
.text
.p2align 0x4
L_411290:
L_89736:
	movq 0x38(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23BE,%r14
	je L_411293
L_89809:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411292
L_89810:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411291
L_89811:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_acos
L_89812:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
L_89741:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89742+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411291:
	movss %xmm14,%xmm7
L_89814:
	movss %xmm7,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411292:
	movss %xmm14,%xmm7
	jmp L_89814
.p2align 0x4
L_411293:
L_89737:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411295
L_89738:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411294
L_89739:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_asin
L_89740:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411294:
	movss %xmm14,%xmm7
L_89807:
	movss %xmm7,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411295:
	movss %xmm14,%xmm7
	jmp L_89807
.p2align 0x4
L_411296:
L_89831:
	movq 0x38(%rbp),%r15
	shrq $0x4,%r15
	movl %r15d,%r14d
	movd %r14d,%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss (globalReal32+0x8)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411297
L_89834:
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411297:
L_89832:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_log10
L_89833:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411298:
L_89827:
	movq 0x38(%rbp),%r15
	shrq $0x4,%r15
	movl %r15d,%r14d
	movd %r14d,%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss (globalReal32+0x8)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411299
L_89830:
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411299:
L_89828:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_ln
L_89829:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411300:
L_89825:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_tan
L_89826:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411301:
L_89823:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_sin
L_89824:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411302:
L_89821:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_cos
L_89822:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411304:
L_89819:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_atan
L_89820:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411305:
L_89817:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_exp
L_89818:
	movss %xmm0,%xmm15
	movss %xmm15,0x20(%rbp)
	jmp L_89741
.p2align 0x4
L_411306:
L_89816:
	sqrtss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x20(%rbp)
	jmp L_89741
.p2align 0x4
.long 0x25
L_89764:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_89765+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89765
.p2align 0x4
.long 0x649
L_89765:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	testl %eax,%eax
	jz L_411311
L_89766:
	cmpl $0x1,%eax
	je L_411310
L_89767:
	cmpl $0x2,%eax
	je L_411309
L_89768:
	cmpl $0x3,%eax
	jne L_89618
L_89770:
	xorb %dl,%dl
L_89771:
	movb 0xC(%rbp),%r15b
	cmpb %dl,%r15b
	je L_89611
L_89772:
	movq 0x18(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_89657+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411309:
L_89774:
	movb $0x1,%dl
	jmp L_89771
.p2align 0x4
L_411310:
L_89775:
	movb $0x2,%dl
	jmp L_89771
.p2align 0x4
L_411311:
L_89776:
	movb $0x3,%dl
	jmp L_89771
.p2align 0x4
.long 0x12A9
L_89627:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_411326
	cmpq $0x2,%r15
	je L_411325
	cmpq $0x3,%r15
	je L_411324
	cmpq $0x5,%r15
	je L_411323
	cmpq $0x6,%r15
	je L_411322
	cmpq $0x7,%r15
	je L_411321
L_89628:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23C1,%r14
	je L_411318
	cmpq $0x23C2,%r14
	je L_411315
	cmpq $0x23C3,%r14
	je L_411313
L_89629:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd (globalReal64+0x0)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411312
L_89662:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
L_89632:
	movb 0x30(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89633+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411312:
L_89630:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_ln
L_89631:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411313:
L_89677:
	movsd 0x0(%r15),%xmm15
	movsd 0x8(%rbp),%xmm14
	ucomisd (globalReal64+0x0)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411314
L_89680:
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411314:
L_89678:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_log10
L_89679:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411315:
L_89670:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411317
L_89671:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411316
L_89672:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_acos
L_89673:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411316:
	movsd %xmm14,%xmm7
L_89675:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411317:
	movsd %xmm14,%xmm7
	jmp L_89675
.p2align 0x4
L_411318:
L_89663:
	movsd 0x8(%r15),%xmm15
	movsd 0x0(%r15),%xmm14
	movq $0x8000000000000000,%r15
	movd %r15,%xmm13
	xorpd %xmm15,%xmm13
	movsd 0x8(%rbp),%xmm12
	ucomisd %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411320
L_89664:
	ucomisd %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411319
L_89665:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd %xmm12,%xmm0
	movq $0x1,%rax
	movsd %xmm14,(localReal64+0x8)(%rip)
	call Real64_Math_asin
L_89666:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411319:
	movsd %xmm14,%xmm7
L_89668:
	movsd %xmm7,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411320:
	movsd %xmm14,%xmm7
	jmp L_89668
.p2align 0x4
L_411321:
L_89691:
	sqrtsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm14
	movsd %xmm14,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411322:
L_89689:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_exp
L_89690:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411323:
L_89687:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_atan
L_89688:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411324:
L_89685:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_cos
L_89686:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411325:
L_89683:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_sin
L_89684:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
L_411326:
L_89681:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x1,%rax
	call Real64_Math_tan
L_89682:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x28(%rbp)
	jmp L_89632
.p2align 0x4
.long 0x473
L_89657:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_89611
.p2align 0x4
.long 0x7BF
L_89742:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%rax
	andq $0xF,%rax
	subq $0x1,%rax
	cmpq $0x9,%rax
	ja L_411327
	leaq jumpTable_220(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_220:
.quad L_411343,L_411342,L_411341,L_89743,L_411339,L_411338,L_411337,L_89743,L_411335,L_411333
.text
.p2align 0x4
L_411327:
L_89743:
	movq 0x38(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23BE,%r14
	je L_411330
L_89780:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411329
L_89781:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411328
L_89782:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_acos
L_89783:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
L_89748:
	movb 0xC(%rbp),%r15b
	movb %r15b,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89749+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411328:
	movss %xmm14,%xmm7
L_89785:
	movss %xmm7,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411329:
	movss %xmm14,%xmm7
	jmp L_89785
.p2align 0x4
L_411330:
L_89744:
	movss 0x4(%r15),%xmm15
	movss 0x0(%r15),%xmm14
	movl $0x80000000,%r15d
	movd %r15d,%xmm13
	xorps %xmm15,%xmm13
	movss 0x8(%rbp),%xmm12
	ucomiss %xmm13,%xmm12
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411332
L_89745:
	ucomiss %xmm12,%xmm15
	setnp %bl
	movzbl %bl,%ebx
	setc %cl
	movzbl %cl,%ecx
	andl %ebx,%ecx
	jnz L_411331
L_89746:
	movq (c_stackP+0x0)(%rip),%rsp
	movss %xmm12,%xmm0
	movq $0x1,%rax
	movss %xmm14,(localReal32+0x4)(%rip)
	call Real32_Math_asin
L_89747:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411331:
	movss %xmm14,%xmm7
L_89778:
	movss %xmm7,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411332:
	movss %xmm14,%xmm7
	jmp L_89778
.p2align 0x4
L_411333:
L_89802:
	movq 0x38(%rbp),%r15
	shrq $0x4,%r15
	movl %r15d,%r14d
	movd %r14d,%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss (globalReal32+0x8)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411334
L_89805:
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411334:
L_89803:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_log10
L_89804:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411335:
L_89798:
	movq 0x38(%rbp),%r15
	shrq $0x4,%r15
	movl %r15d,%r14d
	movd %r14d,%xmm15
	movss 0x8(%rbp),%xmm14
	ucomiss (globalReal32+0x8)(%rip),%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jz L_411336
L_89801:
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411336:
L_89799:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_ln
L_89800:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411337:
L_89796:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_tan
L_89797:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411338:
L_89794:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_sin
L_89795:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411339:
L_89792:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_cos
L_89793:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411341:
L_89790:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_atan
L_89791:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411342:
L_89788:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x1,%rax
	call Real32_Math_exp
L_89789:
	movss %xmm0,%xmm15
	movss %xmm15,0x24(%rbp)
	jmp L_89748
.p2align 0x4
L_411343:
L_89787:
	sqrtss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x24(%rbp)
	jmp L_89748
.p2align 0x4
.long 0x12AA
L_89633:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89634
L_89646:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89647+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89647
.p2align 0x4
.long 0x12AB
L_89647:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89634:
	movsd 0x28(%rbp),%xmm15
	movsd 0x38(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411348
L_89635:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411347
L_89636:
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411346
L_89637:
	xorb %dl,%dl
L_89638:
	cmpb $0x2,%dl
	jne L_89611
L_89640:
	movsd 0x38(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x20(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x28(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r13,%r15
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_89611
L_89642:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411346:
L_89643:
	movb $0x2,%dl
	jmp L_89638
.p2align 0x4
L_411347:
L_89644:
	movb $0x1,%dl
	jmp L_89638
.p2align 0x4
L_411348:
L_89645:
	movb $0x3,%dl
	jmp L_89638
.p2align 0x4
.long 0x69B
L_89749:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89750
L_89762:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89763+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89763
.p2align 0x4
.long 0x79D
L_89763:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_89750:
	movss 0x24(%rbp),%xmm15
	movss 0x20(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411354
L_89751:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411353
L_89752:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411352
L_89753:
	xorb %dl,%dl
L_89754:
	cmpb $0x2,%dl
	jne L_89611
L_89756:
	movss 0x20(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x30(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movss 0x24(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_89611
L_89758:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x18(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411352:
L_89759:
	movb $0x2,%dl
	jmp L_89754
.p2align 0x4
L_411353:
L_89760:
	movb $0x1,%dl
	jmp L_89754
.p2align 0x4
L_411354:
L_89761:
	movb $0x3,%dl
	jmp L_89754
.text
.p2align 0x4
.globl x_1481
.hidden x_1481
x_1481:
L_89840:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x20(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89841
L_89963:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89964+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89964
.p2align 0x4
.long 0x6FE
L_89964:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_89841:
	movq 0x10(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movb 0x1(%r15),%r14b
	movb %r14b,0x30(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movb 0x0(%r15),%r14b
	movb %r14b,0x31(%rbp)
	movq 0x8(%r15),%r14
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_411362
L_89842:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_89843:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_411361
L_89845:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_411360
L_89848:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89849+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89849
.p2align 0x4
.long 0x5E4
L_89849:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_411359
L_89850:
	cmpl $0x1,%eax
	je L_411358
L_89851:
	cmpl $0x2,%eax
	je L_411357
L_89852:
	cmpl $0x3,%eax
	jne L_411356
L_89855:
	movb $0x0,0x31(%rbp)
L_89856:
	leaq L_89878(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_89857+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411356:
L_89854:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411357:
L_89902:
	movb $0x1,0x31(%rbp)
	jmp L_89856
.p2align 0x4
L_411358:
L_89903:
	movb $0x2,0x31(%rbp)
	jmp L_89856
.p2align 0x4
L_411359:
L_89904:
	movb $0x3,0x31(%rbp)
	jmp L_89856
.p2align 0x4
L_411360:
L_89847:
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411361:
L_89844:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411362:
L_89905:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_89844
L_89906:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_89847
L_89908:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89909+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89909
.p2align 0x4
.long 0x7BA
L_89909:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411366
L_89910:
	cmpl $0x1,%eax
	je L_411365
L_89911:
	cmpl $0x2,%eax
	je L_411364
L_89912:
	cmpl $0x3,%eax
	jne L_89854
L_89914:
	movb $0x0,0xC(%rbp)
L_89915:
	leaq L_89937(%rip),%r15
	movq %r15,0x18(%rbp)
	movq %rbp,%r15
	addq $0x20,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89916+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411364:
L_89960:
	movb $0x1,0xC(%rbp)
	jmp L_89915
.p2align 0x4
L_411365:
L_89961:
	movb $0x2,0xC(%rbp)
	jmp L_89915
.p2align 0x4
L_411366:
L_89962:
	movb $0x3,0xC(%rbp)
	jmp L_89915
.p2align 0x4
.long 0x12AC
L_89857:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movb 0x30(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_411373
	cmpb $0x2,%r15b
	je L_411372
	cmpb $0x3,%r15b
	je L_411371
	cmpb $0x4,%r15b
	je L_411370
L_89858:
	movsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
L_89859:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89860+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411370:
L_89901:
	movsd 0x10(%rbp),%xmm15
	mulsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89859
.p2align 0x4
L_411371:
L_89900:
	movsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89859
.p2align 0x4
L_411372:
L_89898:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm1
	movsd 0x10(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x2,%rax
	call Real64_Math_atan2
L_89899:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89859
.p2align 0x4
L_411373:
L_89897:
	movsd 0x10(%rbp),%xmm15
	divsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x38(%rbp)
	jmp L_89859
.p2align 0x4
.long 0x48A
L_89878:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89879+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89879
.p2align 0x4
.long 0x475
L_89879:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_411378
L_89880:
	cmpl $0x1,%eax
	je L_411377
L_89881:
	cmpl $0x2,%eax
	je L_411376
L_89882:
	cmpl $0x3,%eax
	jne L_89854
L_89884:
	xorb %dl,%dl
L_89885:
	movb 0x31(%rbp),%r15b
	cmpb %dl,%r15b
	je L_89847
L_89886:
	movq 0x20(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_89887+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411376:
L_89889:
	movb $0x1,%dl
	jmp L_89885
.p2align 0x4
L_411377:
L_89890:
	movb $0x2,%dl
	jmp L_89885
.p2align 0x4
L_411378:
L_89891:
	movb $0x3,%dl
	jmp L_89885
.p2align 0x4
.long 0x78B
L_89916:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x31(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_411382
	cmpb $0x2,%r15b
	je L_411381
	cmpb $0x3,%r15b
	je L_411380
	cmpb $0x4,%r15b
	je L_411379
L_89917:
	movss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
L_89918:
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89919+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411379:
L_89959:
	movss 0x8(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_89918
.p2align 0x4
L_411380:
L_89958:
	movss 0x8(%rbp),%xmm15
	addss 0x10(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_89918
.p2align 0x4
L_411381:
L_89956:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm1
	movss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x2,%rax
	call Real32_Math_atan2
L_89957:
	movss %xmm0,%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_89918
.p2align 0x4
L_411382:
L_89955:
	movss 0x10(%rbp),%xmm15
	divss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	jmp L_89918
.p2align 0x4
.long 0x48A
L_89937:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_89938+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89938
.p2align 0x4
.long 0x48B
L_89938:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	testl %eax,%eax
	jz L_411387
L_89939:
	cmpl $0x1,%eax
	je L_411386
L_89940:
	cmpl $0x2,%eax
	je L_411385
L_89941:
	cmpl $0x3,%eax
	jne L_89854
L_89943:
	xorb %dl,%dl
L_89944:
	movb 0xC(%rbp),%r15b
	cmpb %r15b,%dl
	je L_89847
L_89945:
	movq 0x20(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_89887+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411385:
L_89947:
	movb $0x1,%dl
	jmp L_89944
.p2align 0x4
L_411386:
L_89948:
	movb $0x2,%dl
	jmp L_89944
.p2align 0x4
L_411387:
L_89949:
	movb $0x3,%dl
	jmp L_89944
.p2align 0x4
.long 0x12AD
L_89860:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x30(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_411391
	cmpb $0x2,%r15b
	je L_411390
	cmpb $0x3,%r15b
	je L_411389
	cmpb $0x4,%r15b
	je L_411388
L_89861:
	movsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
L_89862:
	movb 0x31(%rbp),%r15b
	movb %r15b,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_89863+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411388:
L_89896:
	movsd 0x10(%rbp),%xmm15
	mulsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_89862
.p2align 0x4
L_411389:
L_89895:
	movsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_89862
.p2align 0x4
L_411390:
L_89893:
	movq (c_stackP+0x0)(%rip),%rsp
	movsd 0x8(%rbp),%xmm15
	movsd %xmm15,%xmm1
	movsd 0x10(%rbp),%xmm15
	movsd %xmm15,%xmm0
	movq $0x2,%rax
	call Real64_Math_atan2
L_89894:
	movsd %xmm0,%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_89862
.p2align 0x4
L_411391:
L_89892:
	movsd 0x10(%rbp),%xmm15
	divsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	jmp L_89862
.p2align 0x4
.long 0x920
L_89887:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	jmp L_89847
.p2align 0x4
.long 0x78B
L_89919:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movb 0x31(%rbp),%r15b
	cmpb $0x1,%r15b
	je L_411395
	cmpb $0x2,%r15b
	je L_411394
	cmpb $0x3,%r15b
	je L_411393
	cmpb $0x4,%r15b
	je L_411392
L_89920:
	movss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x10(%rbp)
L_89921:
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89922+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411392:
L_89954:
	movss 0x8(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x10(%rbp)
	jmp L_89921
.p2align 0x4
L_411393:
L_89953:
	movss 0x8(%rbp),%xmm15
	addss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm14
	movss %xmm14,0x10(%rbp)
	jmp L_89921
.p2align 0x4
L_411394:
L_89951:
	movq (c_stackP+0x0)(%rip),%rsp
	movss 0x8(%rbp),%xmm15
	movss %xmm15,%xmm1
	movss 0x10(%rbp),%xmm15
	movss %xmm15,%xmm0
	movq $0x2,%rax
	call Real32_Math_atan2
L_89952:
	movss %xmm0,%xmm15
	movss %xmm15,0x10(%rbp)
	jmp L_89921
.p2align 0x4
L_411395:
L_89950:
	movss 0x10(%rbp),%xmm15
	divss 0x8(%rbp),%xmm15
	movss %xmm15,0x10(%rbp)
	jmp L_89921
.p2align 0x4
.long 0x90A
L_89863:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89864
L_89876:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_89877+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89877
.p2align 0x4
.long 0x12AE
L_89877:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_89864:
	movsd 0x40(%rbp),%xmm15
	movsd 0x38(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411400
L_89865:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411399
L_89866:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411398
L_89867:
	xorb %dl,%dl
L_89868:
	cmpb $0x2,%dl
	jne L_89847
L_89870:
	movsd 0x38(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x28(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r13,%r15
	sete %al
	movzbl %al,%eax
	movsd 0x40(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r13,%r15
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_89847
L_89872:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411398:
L_89873:
	movb $0x2,%dl
	jmp L_89868
.p2align 0x4
L_411399:
L_89874:
	movb $0x1,%dl
	jmp L_89868
.p2align 0x4
L_411400:
L_89875:
	movb $0x3,%dl
	jmp L_89868
.p2align 0x4
.long 0x78B
L_89922:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89923
L_89935:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_89936+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89936
.p2align 0x4
.long 0x7BA
L_89936:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_89923:
	movss 0x10(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411406
L_89924:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411405
L_89925:
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411404
L_89926:
	xorb %dl,%dl
L_89927:
	cmpb $0x2,%dl
	jne L_89847
L_89929:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %al
	movzbl %al,%eax
	movss 0x10(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_89847
L_89931:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411404:
L_89932:
	movb $0x2,%dl
	jmp L_89927
.p2align 0x4
L_411405:
L_89933:
	movb $0x1,%dl
	jmp L_89927
.p2align 0x4
L_411406:
L_89934:
	movb $0x3,%dl
	jmp L_89927
.text
.p2align 0x4
.globl x_1483
.hidden x_1483
x_1483:
L_89965:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_89966
L_90063:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90064+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90064
.p2align 0x4
.long 0x75C
L_90064:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_89966:
	movq 0x18(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_411415
L_89967:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x18(%rbp)
L_89968:
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_89969
L_89970:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_89971:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_411413
L_89972:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_411412
L_89975:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_89976+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_89976
.p2align 0x4
.long 0x79D
L_89976:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_411411
L_89977:
	cmpl $0x1,%eax
	je L_411410
L_89978:
	cmpl $0x2,%eax
	je L_411409
L_89979:
	cmpl $0x3,%eax
	jne L_411408
L_89982:
	movb $0x0,0x38(%rbp)
L_89983:
	leaq L_90001(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_89984+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411408:
L_89981:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411409:
L_90015:
	movb $0x1,0x38(%rbp)
	jmp L_89983
.p2align 0x4
L_411410:
L_90016:
	movb $0x2,0x38(%rbp)
	jmp L_89983
.p2align 0x4
L_411411:
L_90017:
	movb $0x3,0x38(%rbp)
	jmp L_89983
.p2align 0x4
L_411412:
L_89974:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411413:
L_89969:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411415:
L_90018:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_89969
L_90019:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_89969
L_90020:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_89974
L_90022:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90023+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90023
.p2align 0x4
.long 0x7BA
L_90023:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411419
L_90024:
	cmpl $0x1,%eax
	je L_411418
L_90025:
	cmpl $0x2,%eax
	je L_411417
L_90026:
	cmpl $0x3,%eax
	jne L_89981
L_90028:
	movb $0x0,0xC(%rbp)
L_90029:
	leaq L_90047(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90030+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411417:
L_90060:
	movb $0x1,0xC(%rbp)
	jmp L_90029
.p2align 0x4
L_411418:
L_90061:
	movb $0x2,0xC(%rbp)
	jmp L_90029
.p2align 0x4
L_411419:
L_90062:
	movb $0x3,0xC(%rbp)
	jmp L_90029
.p2align 0x4
.long 0x12AF
L_89984:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	movb $0x1,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_89985+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x473
L_90001:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90002+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90002
.p2align 0x4
.long 0x478
L_90002:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411428
L_90003:
	cmpl $0x1,%eax
	je L_411427
L_90004:
	cmpl $0x2,%eax
	je L_411426
L_90005:
	cmpl $0x3,%eax
	jne L_89981
L_90007:
	xorb %dl,%dl
L_90008:
	cmpb %dl,0x38(%rbp)
	je L_89974
L_90009:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x38,%rbp
	leaq (L_90010+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411426:
L_90012:
	movb $0x1,%dl
	jmp L_90008
.p2align 0x4
L_411427:
L_90013:
	movb $0x2,%dl
	jmp L_90008
.p2align 0x4
L_411428:
L_90014:
	movb $0x3,%dl
	jmp L_90008
.p2align 0x4
.long 0x78B
L_90030:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	addss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90031+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x473
L_90047:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90048+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90048
.p2align 0x4
.long 0x474
L_90048:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_411433
L_90049:
	cmpl $0x1,%eax
	je L_411432
L_90050:
	cmpl $0x2,%eax
	je L_411431
L_90051:
	cmpl $0x3,%eax
	jne L_89981
L_90053:
	xorb %dl,%dl
L_90054:
	movb 0xC(%rbp),%r15b
	cmpb %r15b,%dl
	je L_89974
L_90055:
	movq 0x28(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_90010+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411431:
L_90057:
	movb $0x1,%dl
	jmp L_90054
.p2align 0x4
L_411432:
L_90058:
	movb $0x2,%dl
	jmp L_90054
.p2align 0x4
L_411433:
L_90059:
	movb $0x3,%dl
	jmp L_90054
.p2align 0x4
.long 0x12B0
L_89985:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	addsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x48(%rbp)
	movb 0x38(%rbp),%r15b
	movb %r15b,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_89986+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x651
L_90010:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_89974
.p2align 0x4
.long 0x78B
L_90031:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	addss 0x8(%rbp),%xmm15
	movss %xmm15,0x1C(%rbp)
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90032+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x12B1
L_89986:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_89987
L_89999:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_90000+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90000
.p2align 0x4
.long 0x12B2
L_90000:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_89987:
	movsd 0x48(%rbp),%xmm15
	movsd 0x40(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411438
L_89988:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411437
L_89989:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411436
L_89990:
	xorb %dl,%dl
L_89991:
	cmpb $0x2,%dl
	jne L_89974
L_89993:
	movsd 0x40(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x48(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r13,%r15
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_89974
L_89995:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411436:
L_89996:
	movb $0x2,%dl
	jmp L_89991
.p2align 0x4
L_411437:
L_89997:
	movb $0x1,%dl
	jmp L_89991
.p2align 0x4
L_411438:
L_89998:
	movb $0x3,%dl
	jmp L_89991
.p2align 0x4
.long 0x78B
L_90032:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90033
L_90045:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90046+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90046
.p2align 0x4
.long 0x7BA
L_90046:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_90033:
	movss 0x1C(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411444
L_90034:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411443
L_90035:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411442
L_90036:
	xorb %dl,%dl
L_90037:
	cmpb $0x2,%dl
	jne L_89974
L_90039:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %al
	movzbl %al,%eax
	movss 0x1C(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r15d,%r13d
	sete %bl
	movzbl %bl,%ebx
	cmpl %ebx,%eax
	jne L_89974
L_90041:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411442:
L_90042:
	movb $0x2,%dl
	jmp L_90037
.p2align 0x4
L_411443:
L_90043:
	movb $0x1,%dl
	jmp L_90037
.p2align 0x4
L_411444:
L_90044:
	movb $0x3,%dl
	jmp L_90037
.text
.p2align 0x4
.globl x_1482
.hidden x_1482
x_1482:
L_90065:
	movq (gcState+0x20)(%rip),%r15
	movq %r15,0x28(%rbp)
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_90066
L_90163:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90164+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90164
.p2align 0x4
.long 0x75C
L_90164:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90066:
	movq 0x18(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	je L_411453
L_90067:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x18(%rbp)
L_90068:
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_90069
L_90070:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x10(%rbp)
L_90071:
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_411451
L_90072:
	movsd 0x0(%r15),%xmm15
	movsd %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_411450
L_90075:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_90076+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90076
.p2align 0x4
.long 0x79D
L_90076:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	testl %eax,%eax
	jz L_411449
L_90077:
	cmpl $0x1,%eax
	je L_411448
L_90078:
	cmpl $0x2,%eax
	je L_411447
L_90079:
	cmpl $0x3,%eax
	jne L_411446
L_90082:
	movb $0x0,0x38(%rbp)
L_90083:
	leaq L_90101(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90084+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411446:
L_90081:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq (globalObjptr+0x778)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq %r15,%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411447:
L_90115:
	movb $0x1,0x38(%rbp)
	jmp L_90083
.p2align 0x4
L_411448:
L_90116:
	movb $0x2,0x38(%rbp)
	jmp L_90083
.p2align 0x4
L_411449:
L_90117:
	movb $0x3,0x38(%rbp)
	jmp L_90083
.p2align 0x4
L_411450:
L_90074:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	movq $0x1,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411451:
L_90069:
	movq (globalObjptr+0x19D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411453:
L_90118:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_90069
L_90119:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,%r13
	andq $0x1,%r13
	cmpq $0x1,%r13
	jne L_90069
L_90120:
	shrq $0x1,%r15
	movl %r15d,%r13d
	movd %r13d,%xmm15
	movss %xmm15,0x8(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,0x0(%r15)
	jne L_90074
L_90122:
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90123+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90123
.p2align 0x4
.long 0x7BA
L_90123:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411457
L_90124:
	cmpl $0x1,%eax
	je L_411456
L_90125:
	cmpl $0x2,%eax
	je L_411455
L_90126:
	cmpl $0x3,%eax
	jne L_90081
L_90128:
	movb $0x0,0xC(%rbp)
L_90129:
	leaq L_90147(%rip),%r15
	movq %r15,0x20(%rbp)
	movq %rbp,%r15
	addq $0x28,%r15
	subq (gcState+0x560)(%rip),%r15
	movq %r15,(gcState+0x20)(%rip)
	movb $0x2,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90130+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411455:
L_90160:
	movb $0x1,0xC(%rbp)
	jmp L_90129
.p2align 0x4
L_411456:
L_90161:
	movb $0x2,0xC(%rbp)
	jmp L_90129
.p2align 0x4
L_411457:
L_90162:
	movb $0x3,0xC(%rbp)
	jmp L_90129
.p2align 0x4
.long 0x12AF
L_90084:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x40(%rbp)
	movb $0x1,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_90085+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x473
L_90101:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90102+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90102
.p2align 0x4
.long 0x478
L_90102:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	testl %eax,%eax
	jz L_411466
L_90103:
	cmpl $0x1,%eax
	je L_411465
L_90104:
	cmpl $0x2,%eax
	je L_411464
L_90105:
	cmpl $0x3,%eax
	jne L_90081
L_90107:
	xorb %dl,%dl
L_90108:
	cmpb 0x38(%rbp),%dl
	je L_90074
L_90109:
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	addq $0x38,%rbp
	leaq (L_90110+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411464:
L_90112:
	movb $0x1,%dl
	jmp L_90108
.p2align 0x4
L_411465:
L_90113:
	movb $0x2,%dl
	jmp L_90108
.p2align 0x4
L_411466:
L_90114:
	movb $0x3,%dl
	jmp L_90108
.p2align 0x4
.long 0x78B
L_90130:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x14(%rbp)
	movb $0x1,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90131+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x473
L_90147:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq (c_stackP+0x0)(%rip),%rsp
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90148+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call IEEEReal_getRoundingMode
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90148
.p2align 0x4
.long 0x474
L_90148:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	testl %eax,%eax
	jz L_411471
L_90149:
	cmpl $0x1,%eax
	je L_411470
L_90150:
	cmpl $0x2,%eax
	je L_411469
L_90151:
	cmpl $0x3,%eax
	jne L_90081
L_90153:
	xorb %dl,%dl
L_90154:
	movb 0xC(%rbp),%r15b
	cmpb %r15b,%dl
	je L_90074
L_90155:
	movq 0x28(%rbp),%r14
	movq %r14,(gcState+0x20)(%rip)
	movb %r15b,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_90110+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
L_411469:
L_90157:
	movb $0x1,%dl
	jmp L_90154
.p2align 0x4
L_411470:
L_90158:
	movb $0x2,%dl
	jmp L_90154
.p2align 0x4
L_411471:
L_90159:
	movb $0x3,%dl
	jmp L_90154
.p2align 0x4
.long 0x12B0
L_90085:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movsd 0x18(%rbp),%xmm15
	mulsd 0x10(%rbp),%xmm15
	subsd 0x8(%rbp),%xmm15
	movsd %xmm15,0x48(%rbp)
	movb 0x38(%rbp),%r15b
	movb %r15b,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_90086+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x651
L_90110:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_90074
.p2align 0x4
.long 0x78B
L_90131:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movss 0x18(%rbp),%xmm15
	mulss 0x10(%rbp),%xmm15
	subss 0x8(%rbp),%xmm15
	movss %xmm15,0x1C(%rbp)
	movb 0xC(%rbp),%r15b
	movb %r15b,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90132+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp setRoundingMode_0
.p2align 0x4
.long 0x12B1
L_90086:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90087
L_90099:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_90100+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90100
.p2align 0x4
.long 0x12B2
L_90100:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_90087:
	movsd 0x48(%rbp),%xmm15
	movsd 0x40(%rbp),%xmm14
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411476
L_90088:
	ucomisd %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411475
L_90089:
	ucomisd %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411474
L_90090:
	xorb %dl,%dl
L_90091:
	cmpb $0x2,%dl
	jne L_90074
L_90093:
	movsd 0x40(%rbp),%xmm15
	movd %xmm15,%r15
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r13
	andq %r13,%r15
	cmpq %r15,%r13
	sete %al
	movzbl %al,%eax
	movsd 0x48(%rbp),%xmm14
	movd %xmm14,%r15
	andq %r13,%r15
	cmpq %r15,%r13
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_90074
L_90095:
	movq $0x1C8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movsd %xmm15,%xmm14
	movsd %xmm14,0x0(%r15)
	movq $0x1C91,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411474:
L_90096:
	movb $0x2,%dl
	jmp L_90091
.p2align 0x4
L_411475:
L_90097:
	movb $0x1,%dl
	jmp L_90091
.p2align 0x4
L_411476:
L_90098:
	movb $0x3,%dl
	jmp L_90091
.p2align 0x4
.long 0x78B
L_90132:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90133
L_90145:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90146+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90146
.p2align 0x4
.long 0x7BA
L_90146:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_90133:
	movss 0x1C(%rbp),%xmm15
	movss 0x14(%rbp),%xmm14
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411482
L_90134:
	ucomiss %xmm14,%xmm15
	setnp %al
	movzbl %al,%eax
	setc %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411481
L_90135:
	ucomiss %xmm15,%xmm14
	setnp %al
	movzbl %al,%eax
	setz %bl
	movzbl %bl,%ebx
	andl %eax,%ebx
	jnz L_411480
L_90136:
	xorb %dl,%dl
L_90137:
	cmpb $0x2,%dl
	jne L_90074
L_90139:
	movss 0x14(%rbp),%xmm15
	movd %xmm15,%r15d
	movq 0x38(%rbp),%r14
	movl 0xC(%r14),%r13d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %al
	movzbl %al,%eax
	movss 0x1C(%rbp),%xmm14
	movd %xmm14,%r15d
	andl %r13d,%r15d
	cmpl %r13d,%r15d
	sete %bl
	movzbl %bl,%ebx
	cmpl %eax,%ebx
	jne L_90074
L_90141:
	movd %xmm15,%r15d
	movl %r15d,%r14d
	shlq $0x1,%r14
	orq $0x1,%r14
	movq $0x1C91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r15
	movq %r15,(gcState+0x20)(%rip)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411480:
L_90142:
	movb $0x2,%dl
	jmp L_90137
.p2align 0x4
L_411481:
L_90143:
	movb $0x1,%dl
	jmp L_90137
.p2align 0x4
L_411482:
L_90144:
	movb $0x3,%dl
	jmp L_90137
.text
.p2align 0x4
.globl x_1468
.hidden x_1468
x_1468:
L_90165:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_90166
L_90191:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_90192+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90192
.p2align 0x4
.long 0x63C
L_90192:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_90166:
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (x_271+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_68
.p2align 0x4
.long 0x4DD
x_271:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%r15),%r14
	cmpl $0x1,0x0(%r14)
	jg L_411485
L_90167:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411485:
L_90168:
	movq 0x10(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_90169+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x556
L_90169:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movl 0x30(%rbp),%r15d
	movl %r15d,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90170
L_90189:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_90190+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90190
.p2align 0x4
.long 0x561
L_90190:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_90170:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x28(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x10(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xF0E8)(%rip),%r15
	movq %r15,0x18(%r13)
	movq 0x0(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_90171+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_68
.p2align 0x4
.long 0x465
L_90171:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90172
L_90187:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90188+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90188
.p2align 0x4
.long 0x45A
L_90188:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90172:
	movq 0x8(%rbp),%r15
	movq 0x18(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r15
	jne L_411487
L_90175:
	movl %r13d,0x40(%rbp)
	movq $0x3E63,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_90176+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_411487:
L_90174:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x466
L_90176:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq $0x2,0x38(%rbp)
	movl $0x0,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_90177+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
.long 0x557
L_90177:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90178
L_90185:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90186
.p2align 0x4
.long 0xFCF
L_90186:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90178:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_90174
L_90180:
	movl %r13d,0x40(%rbp)
	movq $0x4041,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_90181+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
.long 0xB9B
L_90181:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90182
L_90183:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90184+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90184
.p2align 0x4
.long 0x4DE
L_90184:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90182:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x28,%r12
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%r14)
	movq 0x8(%rbp),%r13
	movq %r13,0x18(%r14)
	movq 0x20(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r14,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r10,0x0(%r13)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl route_0
.hidden route_0
route_0:
L_90193:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_90194
L_90335:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_90336+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90336
.p2align 0x4
.long 0x45F
L_90336:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_90194:
	movq 0x8(%rbp),%r15
	movq 0x30(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_56
.p2align 0x4
.long 0x12B3
L_90195:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90196
L_90333:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90334+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90334
.p2align 0x4
.long 0x657
L_90334:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_90196:
	movq 0x8(%rbp),%r15
	movq 0x18(%r15),%r14
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	movl %r15d,%r14d
	movslq %r14d,%r11
	cmpq %r15,%r11
	jne L_411494
L_90199:
	testl %r14d,%r14d
	jz L_411493
L_90200:
	movl %r14d,0x50(%rbp)
	movq $0x3FF7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90201+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411493:
L_90332:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411494:
L_90198:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x540
L_90201:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r13
	movl 0x0(%r13),%ebx
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%ecx
	movslq %ecx,%r14
	cmpq %r15,%r14
	jne L_90198
L_90203:
	cmpl $0x0,%ecx
	jl L_411511
L_90204:
	movl %ebx,0x40(%rbp)
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_1017:
	cmpl %ecx,%ebx
	jnl L_411496
L_90330:
	movslq %ebx,%r14
	movq 0x10(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movl 0x0(%r11),%r10d
	xorl 0x40(%rbp),%r10d
	movl %r10d,0x40(%rbp)
	incl %ebx
	jmp loop_1017
.p2align 0x4
L_411496:
L_90205:
	movq 0x18(%rbp),%r11
	movq 0x0(%r11),%r14
	movq (globalObjptr+0xAE0)(%rip),%r11
	movq 0x0(%r11),%r13
	incq %r13
	jo L_411510
L_90207:
	movq %r13,0x0(%r11)
	movq 0x20(%rbp),%r11
	movl 0x0(%r11),%r10d
	andl 0x40(%rbp),%r10d
	cmpl $0x0,%r10d
	jl L_90250
L_90208:
	movslq %r10d,%r11
	movq %r11,0x48(%rbp)
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r11
	jnb L_90210
L_90211:
	movq 0x0(%r14,%r11,8),%r10
	movq %r10,0x50(%rbp)
	cmpq $0x1,%r10
	je L_90220
L_90212:
	movq 0x8(%r10),%r13
	movq 0x0(%r10),%r14
.p2align 0x4,,0x7
L_90213:
	movq (globalObjptr+0xAE8)(%rip),%r10
	movq 0x0(%r10),%r11
	incq %r11
	jo L_411506
L_90215:
	movq %r11,0x0(%r10)
	movq 0x10(%r14),%r10
	movq 0x0(%rbp),%r9
	movq 0x18(%r14),%r8
	movq 0x10(%r8),%rsp
	cmpq %rsp,0x10(%r9)
	jne L_411505
L_90314:
	movq 0xFFFFFFFFFFFFFFF0(%r10),%r9
	movl %r9d,%ebx
	movslq %ebx,%r11
	cmpq %r9,%r11
	jne L_90198
L_90316:
	cmpl %ecx,%ebx
	jne L_411502
L_90318:
	xorl %ebx,%ebx
	movq %r15,%r11
	movq %r10,%r15
.p2align 0x4,,0x7
loop_1023:
	cmpl %ebx,%ecx
	je L_411501
L_90319:
	movslq %ebx,%r10
	cmpq %r11,%r10
	jnb L_411500
L_90321:
	movq 0x10(%rbp),%r9
	movq 0x0(%r9,%r10,8),%r8
	movq 0x0(%r15,%r10,8),%rsp
	movq 0x10(%rsp),%rsi
	cmpq %rsi,0x10(%r8)
	jne L_411498
L_90325:
	incl %ebx
	jo L_411497
L_90326:
	jmp loop_1023
.p2align 0x4
L_411497:
L_90250:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411498:
L_90322:
	cmpq $0x1,%r13
	je L_411499
L_90323:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	movq %r11,%r15
	jmp L_90213
.p2align 0x4
L_411499:
L_90220:
	movq 0x0(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_90221+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411500:
L_90210:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411501:
L_90327:
	movq 0x8(%r14),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411502:
	movl %ecx,(localWord32+0x4)(%rip)
	movq %r15,(localWord64+0x0)(%rip)
L_90217:
	cmpq $0x1,%r13
	je L_90220
L_90218:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	movq (localWord64+0x0)(%rip),%r15
	movl (localWord32+0x4)(%rip),%ecx
	jmp L_90213
.p2align 0x4
L_411505:
	movq %r15,(localWord64+0x0)(%rip)
	movl %ecx,(localWord32+0x4)(%rip)
	jmp L_90217
.p2align 0x4
L_411506:
L_90214:
	movq (globalObjptr+0xAF0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411510:
L_90206:
	movq (globalObjptr+0xAF8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411511:
L_90282:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x12B4
L_90221:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x44(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90222
L_90312:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_90313+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90313
.p2align 0x4
.long 0x12BE
L_90313:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_90222:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x60(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x44(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq 0x58(%rbp),%r15
	movq %r15,0x18(%r13)
	movq 0x8(%rbp),%r15
	movq 0x48(%r15),%r14
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	movl %r15d,%r14d
	movslq %r14d,%r11
	cmpq %r15,%r11
	jne L_90198
L_90224:
	movl %r14d,0x78(%rbp)
	movq $0x3E89,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_90225+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x12B5
L_90225:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90226
L_90310:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90311+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90311
.p2align 0x4
.long 0x12BD
L_90311:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_90226:
	movq $0x27E1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x28(%rbp)
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_90198
L_90228:
	movl %r13d,0x78(%rbp)
	movq $0x401D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_90229+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
.long 0x12B6
L_90229:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq $0x1,0x68(%rbp)
.p2align 0x4,,0x7
L_90230:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411531
.p2align 0x4,,0x7
L_90231:
	movq 0x58(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq $0xF51,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	addq $0x18,%r12
	movq %r15,0x8(%r13)
	movq $0x298B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r13,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_411517
L_90232:
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x58(%rbp)
	jmp L_90230
.p2align 0x4
L_411517:
L_90233:
	movq %r13,0x58(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0x68(%rbp)
.p2align 0x4,,0x7
L_90234:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411530
.p2align 0x4,,0x7
L_90235:
	movq $0x298B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_411518
L_90236:
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x58(%rbp)
	jmp L_90234
.p2align 0x4
L_411518:
L_90237:
	movq 0x68(%rbp),%r13
	cmpq $0x1,%r13
	je L_411525
L_90238:
	movq 0x58(%rbp),%r11
	xorq %r15,%r15
	xchgq %r11,%r14
.p2align 0x4,,0x7
L_90239:
	addq 0x0(%r14),%r15
	movq %r15,0x28(%rbp)
	cmpq $0x1,%r13
	je L_411519
L_90240:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_90239
.p2align 0x4
L_411519:
L_90241:
	testq %r15,%r15
	jz L_411524
L_90242:
	cmpq $0x7FFFFFFF,%r15
	ja L_411523
L_90243:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x95F,%rcx
	movq %r15,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90244+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90244
.p2align 0x4
.long 0x12B7
L_90244:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,%r15
L_90245:
	movq 0x68(%rbp),%r10
	movq 0x58(%rbp),%r11
	xorq %r13,%r13
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1018:
	cmpq 0x28(%rbp),%r14
	jnl L_411522
.p2align 0x4,,0x7
loop_1021:
	cmpq 0x0(%r11),%r13
	jl L_411521
L_90289:
	cmpq $0x1,%r10
	je L_411520
L_90290:
	movq 0x0(%r10),%r9
	movq 0x8(%r10),%r10
	xorq %r13,%r13
	movq %r9,%r11
	jmp loop_1021
.p2align 0x4
L_411520:
L_90291:
	movq (globalObjptr+0x5B8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411521:
L_90292:
	movq 0x8(%r11),%r9
	movq 0x0(%r9,%r13,8),%r8
	incq %r13
	movq %r15,%r9
	shrq $0x8,%r9
	movq (gcState+0x3C8)(%rip),%rsp
	movb $0x1,0x0(%rsp,%r9,1)
	movq %r8,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_1018
.p2align 0x4
L_411522:
L_90246:
	movq $0x6ED,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x28(%rbp)
L_90247:
	movq $0x2,0x70(%rbp)
	movl $0x0,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_90248+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411523:
L_90285:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411524:
L_90294:
	movq (globalObjptr+0x1F48)(%rip),%r14
	xchgq %r14,%r15
	jmp L_90245
.p2align 0x4
L_411525:
L_90295:
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x68(%rbp)
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	movq %r14,0x28(%rbp)
	je L_90247
L_90296:
	testq %r13,%r13
	jz L_411528
L_90297:
	cmpq $0x7FFFFFFF,%r13
	ja L_90285
L_90298:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x95F,%rcx
	movq %r13,%rdx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90299+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90299
.p2align 0x4
.long 0x12BB
L_90299:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq %rax,%r15
L_90300:
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_1022:
	cmpq 0x68(%rbp),%r14
	jnl L_411526
L_90302:
	movq 0x28(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r11,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_1022
.p2align 0x4
L_411526:
L_90301:
	movq $0x6ED,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x28(%rbp)
	jmp L_90247
.p2align 0x4
L_411528:
L_90304:
	movq (globalObjptr+0x1F50)(%rip),%r15
	jmp L_90300
.p2align 0x4
L_411530:
L_90306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90307
.p2align 0x4
.long 0x12BC
L_90307:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	jmp L_90235
.p2align 0x4
L_411531:
L_90308:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90309+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90309
.p2align 0x4
.long 0x12BC
L_90309:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	jmp L_90231
.p2align 0x4
.long 0x12B6
L_90248:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90249
L_90286:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90287+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90287
.p2align 0x4
.long 0x12BA
L_90287:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_90249:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1B,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x28,%r12
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%r13)
	movq 0x60(%rbp),%r15
	movq %r15,0x10(%r13)
	movq 0x8(%rbp),%r11
	movq %r11,0x18(%r13)
	movq 0x30(%rbp),%rdx
	movq 0x0(%rdx),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %rdx,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%rdx)
	movq $0xF99,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x28,%r12
	movl 0x40(%rbp),%r10d
	movl %r10d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq 0x10(%rbp),%r15
	movq %r15,0x10(%r13)
	movq %r14,0x18(%r13)
	movq 0x38(%rbp),%r15
	movl 0x0(%r15),%r14d
	incl %r14d
	jo L_90250
L_90251:
	movl %r14d,0x0(%r15)
	movq 0x18(%rbp),%r14
	movq 0x0(%r14),%r10
	movq $0x2901,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r13,0x0(%r9)
	addq $0x18,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x8(%r9)
	movq 0x48(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r10),%r13
	jnb L_90210
L_90253:
	movq %r10,%r8
	shrq $0x8,%r8
	movb $0x1,0x0(%r11,%r8,1)
	movq %r9,0x0(%r10,%r13,8)
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r11
	movl %r11d,%r10d
	movslq %r10d,%r9
	cmpq %r9,%r11
	jne L_90198
L_90255:
	movl 0x0(%r15),%r14d
	imull $0x4,%r14d
	jo L_90250
L_90256:
	cmpl %r14d,%r10d
	jnl L_411543
L_90258:
	addl %r10d,%r10d
	jo L_90250
L_90259:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	shll $0x1,%r14d
	orl $0x1,%r14d
	movl %r14d,0x28(%rbp)
	movslq %r10d,%rdx
	movq %rdx,0x30(%rbp)
	cmpq $0x7FFFFFFF,%rdx
	ja L_90285
L_90260:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xBA7,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90261+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90261
.p2align 0x4
.long 0x12B8
L_90261:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq %rax,0x38(%rbp)
	xorq %r15,%r15
.p2align 0x4,,0x7
loop_1019:
	cmpq 0x30(%rbp),%r15
	jnl L_411532
L_90283:
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq $0x1,0x0(%r14,%r15,8)
	incq %r15
	jmp loop_1019
.p2align 0x4
L_411532:
L_90262:
	movq 0x18(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%r13d
	movl %r13d,0x2C(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r15
	jne L_90198
L_90264:
	cmpl $0x0,%r13d
	jl L_90282
L_90265:
	movl $0x0,0x48(%rbp)
.p2align 0x4,,0x7
loop_1020:
	movl 0x48(%rbp),%r15d
	cmpl 0x2C(%rbp),%r15d
	jnl L_411538
L_90267:
	movslq %r15d,%r14
	movq 0x40(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_90276
L_90268:
	movq 0x8(%r13),%r15
	movq %r15,0x50(%rbp)
	movq 0x0(%r13),%r15
	movq %r15,0x58(%rbp)
L_90269:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411536
.p2align 0x4,,0x7
L_90270:
	movq 0x58(%rbp),%r15
	movl 0x0(%r15),%r14d
	andl 0x28(%rbp),%r14d
	cmpl $0x0,%r14d
	jl L_90250
L_90271:
	movslq %r14d,%r13
	cmpq 0x30(%rbp),%r13
	jnb L_90210
L_90273:
	movq 0x38(%rbp),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq $0x2901,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r15,0x0(%r10)
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r14,%r13,8)
	movq 0x50(%rbp),%r15
	cmpq $0x1,%r15
	je L_411533
L_90274:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x50(%rbp)
	movq %r14,0x58(%rbp)
	jmp L_90269
.p2align 0x4
L_411533:
L_90276:
	incl 0x48(%rbp)
	jmp loop_1020
.p2align 0x4
L_411536:
L_90278:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90279+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90279
.p2align 0x4
.long 0x12B9
L_90279:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_90270
.p2align 0x4
L_411538:
L_90266:
	movq 0x18(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x38(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r14
	movl 0x28(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411543:
L_90257:
	movq 0x60(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl loop_3849
.hidden loop_3849
loop_3849:
L_90337:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_90338
L_90520:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_90521+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90521
.p2align 0x4
.long 0x4AE
L_90521:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_90338:
	movq 0x0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x30(%rbp)
.p2align 0x4,,0x7
loop_1024:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411574
.p2align 0x4,,0x7
L_90339:
	movq 0x18(%rbp),%r15
	movq 0x60(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x58(%r15),%r14
	movq 0x50(%r15),%r13
	movq 0x28(%r15),%r11
	movq %r11,0x40(%rbp)
	movq 0x20(%r15),%r11
	movq 0x18(%r15),%r10
	movq 0x8(%r15),%r9
	movq %r9,0x48(%rbp)
	movq 0x0(%r15),%r9
	movq %r9,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0xEC5,%rax
	cmpq $0xF,%rax
	ja L_411549
	leaq jumpTable_221(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_221:
.quad L_411573,L_411572,L_411571,L_411570,L_411566,L_411565,L_411564,L_411563,L_411560,L_411559,L_411558,L_411557,L_411556,L_411553,L_411552,L_411550
.text
.p2align 0x4
L_411549:
L_90340:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp sendVar_0
.p2align 0x4
L_411550:
L_90517:
	movq 0x30(%rbp),%r13
	movq 0x18(%r13),%r15
	movq 0x10(%r13),%r14
	movq 0x8(%r13),%r11
	movq 0x0(%r13),%r9
	movq $0x4747,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r11,0x18(%r13)
	movq %r10,0x20(%r13)
	movq %r15,0x28(%r13)
	addq $0x40,%r12
	movq 0x18(%rbp),%r11
	movq %r11,0x8(%r13)
	movq 0x28(%rbp),%r11
	movq %r11,0x10(%r13)
	movq 0x20(%rbp),%r11
	movq %r11,0x30(%r13)
	movq %r9,%r15
	movq %r13,%r14
loops_0:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movslq %r11d,%r10
	cmpq %r13,%r10
	jne L_411551
L_90344:
	movq $0x315,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r11d,0x0(%r13)
	movq %r15,0x18(%r13)
	movq %r14,0x20(%r13)
	addq $0x30,%r12
	movl $0x0,0x4(%r13)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%r13)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%r13)
	movq %r13,0x10(%rbp)
	movq $0x1,0x0(%rbp)
	movl $0x0,0x8(%rbp)
	jmp each_0
.p2align 0x4
L_411551:
L_90343:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411552:
L_90516:
	movq 0x30(%rbp),%r14
	movq 0x10(%r14),%r15
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq $0x474D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r10,0x10(%r14)
	movq %r15,0x18(%r14)
	addq $0x30,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x20(%r14)
	movq %r11,%r15
	jmp loops_0
.p2align 0x4
L_411553:
L_90483:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r10),%r15
	movq %r15,0x58(%rbp)
	movq 0x30(%r10),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x60(%rbp)
L_90484:
	movq 0x20(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_411555
L_90514:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xEDB,%r13
	jne L_411554
L_90515:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq 0x10(%r15),%r15
	movq %r15,0x20(%rbp)
	movq %r13,0x68(%rbp)
L_90489:
	movq 0x60(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_90490+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411554:
	xchgq %r14,%r15
L_90485:
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_90486+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411555:
	xchgq %r14,%r15
	jmp L_90485
.p2align 0x4
L_411556:
L_90482:
	movq 0x30(%rbp),%r13
	movq 0x10(%r13),%r15
	movq 0x8(%r13),%r14
	movq 0x0(%r13),%r11
	movq $0x474B,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x18(%r13)
	addq $0x28,%r12
	movq 0x40(%rbp),%r10
	movq %r10,0x0(%r13)
	movq 0x20(%rbp),%r10
	movq %r10,0x10(%r13)
	movq %r11,%r15
	movq %r13,%r14
	jmp loops_0
.p2align 0x4
L_411557:
L_90463:
	movq %r11,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movq %r14,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_90464+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp ofConst_0
.p2align 0x4
L_411558:
L_90462:
	movq 0x30(%rbp),%r15
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	movq 0x10(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x1DB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %r13d,0x0(%r15)
	movq %r11,0x20(%r15)
	movq %r14,0x28(%r15)
	addq $0x38,%r12
	movl $0x0,0x4(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x20(%rbp)
	jmp loop_1024
.p2align 0x4
L_411559:
L_90426:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x68(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x58,%rbp
	leaq (L_90427+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
L_411560:
L_90366:
	movq 0x30(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x0(%r10),%r15
	movq %r15,0x68(%rbp)
	movq 0x30(%r10),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x70(%rbp)
L_90367:
	movq 0x20(%rbp),%r15
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_411562
L_90424:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xEDB,%r13
	jne L_411561
L_90425:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq 0x10(%r15),%r15
	movq %r15,0x20(%rbp)
	movq %r13,0x78(%rbp)
L_90372:
	movq 0x70(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_90373+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411561:
	xchgq %r14,%r15
L_90368:
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_90369+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411562:
	xchgq %r14,%r15
	jmp L_90368
.p2align 0x4
L_411563:
L_90365:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x18(%rbp)
	jmp each_1
.p2align 0x4
L_411564:
L_90364:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x4741,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x18(%r15)
	addq $0x28,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1024
.p2align 0x4
L_411565:
L_90363:
	movq 0x30(%rbp),%r14
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	movq 0x0(%r14),%r10
	movq $0x4751,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	movq %r13,0x18(%r14)
	movq %r11,0x20(%r14)
	addq $0x30,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x10(%r14)
	movq %r10,%r15
	jmp loops_0
.p2align 0x4
L_411566:
L_90348:
	movq 0x30(%rbp),%r14
	movq 0x0(%r14),%r15
	movq $0x1D73,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq 0x10(%r14),%r15
L_90349:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_90350
L_90360:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_411568
	cmpq $0xEDB,%r13
	je L_411567
L_90350:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90351+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411567:
L_90362:
	movq 0x20(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_90355:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411568:
L_90361:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq 0x20(%r15),%r15
	movq %r15,0x20(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r13,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x28(%rbp)
	jmp x_1488
.p2align 0x4
L_411570:
L_90347:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	movq $0x473F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1024
.p2align 0x4
L_411571:
L_90346:
	movq 0x30(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r9
	movq 0x0(%r11),%r8
	movq $0x474F,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r9,0x10(%r11)
	movq %r13,0x18(%r11)
	movq %r14,0x20(%r11)
	movq %r10,0x28(%r11)
	movq %r15,0x30(%r11)
	addq $0x48,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r11)
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r11)
	movq 0x20(%rbp),%r13
	movq %r13,0x38(%r11)
	movq %r8,%r15
	movq %r11,%r14
	jmp loops_0
.p2align 0x4
L_411572:
L_90345:
	movq 0x30(%rbp),%r15
	movq 0x10(%r15),%r14
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r15
	movq %r15,0x30(%rbp)
	movq $0x4743,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %r13d,0x0(%r15)
	movq %r14,0x10(%r15)
	addq $0x28,%r12
	movl $0x0,0x4(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	jmp loop_1024
.p2align 0x4
L_411573:
L_90341:
	movq 0x30(%rbp),%r13
	movq 0x8(%r13),%r15
	movq 0x0(%r13),%r11
	movq $0x4749,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x20,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r13
	movq %r13,0x10(%r14)
	movq %r11,%r15
	jmp loops_0
.p2align 0x4
L_411574:
L_90518:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_90519+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90519
.p2align 0x4
.long 0x71F
L_90519:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_90339
.p2align 0x4
.long 0x99A
L_90490:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90491
L_90510:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90511+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90511
.p2align 0x4
.long 0xC30
L_90511:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_90491:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x70(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x80(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x90(%rbp)
	addq $0x10,%r12
	movl $0x1,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_90492+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x12D3
L_90486:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90487
L_90512:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90513+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90513
.p2align 0x4
.long 0x12D9
L_90513:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_90487:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x68(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x78(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x78,%rbp
	leaq (L_90488+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7AB
L_90464:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90465
L_90480:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_90481+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90481
.p2align 0x4
.long 0x7A3
L_90481:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_90465:
	movq $0x1D77,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x40(%rbp),%r14
	movq 0x10(%r14),%r15
L_90466:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_90467
L_90477:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_411579
	cmpq $0xEDB,%r13
	je L_411578
L_90467:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_90468+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411578:
L_90479:
	movq 0x20(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_90472:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411579:
L_90478:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x20(%r15),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1488
.p2align 0x4
.long 0x9B0
L_90427:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90428
L_90460:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_90461+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90461
.p2align 0x4
.long 0x12D1
L_90461:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_90428:
	movq 0x48(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0x60(%rbp)
	movl %r14d,%r15d
	movslq %r15d,%r13
	cmpq %r14,%r13
	jne L_90343
L_90430:
	cmpl $0x0,%r15d
	je L_411594
	cmpl $0x1,%r15d
	je L_411592
L_90431:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
L_90432:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_90433
L_90434:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_411590
L_90435:
	movq 0x0(%r14),%r15
	movq %r15,0x68(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x70(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_90343
L_90437:
	cmpl $0x0,%r13d
	jl L_411588
L_90438:
	movq $0x1,0x78(%rbp)
	movl $0x0,0x74(%rbp)
.p2align 0x4,,0x7
loop_1025:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411587
.p2align 0x4,,0x7
L_90439:
	movl 0x74(%rbp),%r15d
	cmpl 0x70(%rbp),%r15d
	jnl L_411583
L_90449:
	movslq %r15d,%r14
	movq 0x68(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	cmpq 0x60(%rbp),%r14
	jnb L_411582
L_90452:
	movq 0x48(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r10
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x40(%rbp),%r13
	movq %r13,0x8(%r14)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r10,0x0(%r13)
	movq %r11,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	addq $0x18,%r12
	movq 0x78(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,0x78(%rbp)
	incl %r15d
	movl %r15d,0x74(%rbp)
	jmp loop_1025
.p2align 0x4
L_411582:
L_90451:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411583:
L_90440:
	movq 0x78(%rbp),%r14
	cmpq $0x1,%r14
	je L_411586
L_90441:
	movq 0x0(%r14),%r13
	movq %r13,0x60(%rbp)
	movq 0x58(%rbp),%r13
	movq %r13,0x68(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x58(%rbp)
.p2align 0x4,,0x7
L_90442:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411585
.p2align 0x4,,0x7
L_90443:
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	cmpq $0x1,%r14
	je L_411584
L_90444:
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x58(%rbp)
	movq %r15,0x60(%rbp)
	jmp L_90442
.p2align 0x4
L_411584:
L_90445:
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411585:
L_90446:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_90447+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90447
.p2align 0x4
.long 0xEF6
L_90447:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	jmp L_90443
.p2align 0x4
L_411586:
L_90448:
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%rbp)
	movq 0x58(%rbp),%r13
	movq %r13,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411587:
L_90453:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90454+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90454
.p2align 0x4
.long 0x12D0
L_90454:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	jmp L_90439
.p2align 0x4
L_411588:
L_90455:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411590:
L_90433:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411592:
L_90457:
	cmpq $0x0,0x60(%rbp)
	jna L_90451
L_90459:
	movq 0x48(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x10(%r13)
	addq $0x20,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%r13)
	movq %r13,0x60(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq $0x1,0x58(%rbp)
	jmp L_90442
.p2align 0x4
L_411594:
L_90456:
	movq 0x50(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x12C1
L_90373:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90374
L_90420:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90421+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90421
.p2align 0x4
.long 0x12CE
L_90421:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90374:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	addq $0x28,%r12
	movl 0x70(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_90375+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x12BF
L_90369:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90370
L_90422:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_90423+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90423
.p2align 0x4
.long 0x12CF
L_90423:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_90370:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x88(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x88,%rbp
	leaq (L_90371+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x511
L_90351:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90352
L_90358:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90359+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90359
.p2align 0x4
.long 0x815
L_90359:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_90352:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x40(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x50(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x50,%rbp
	leaq (L_90353+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x12D5
L_90492:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90493
L_90508:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90509+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90509
.p2align 0x4
.long 0x12D7
L_90509:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90493:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x68(%rbp)
	addq $0x10,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411603
L_90494:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90495:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_411602
L_90496:
	cmpq $0x1,%r15
	je L_411600
L_90497:
	movq 0x8(%r15),%r15
	jmp L_90495
.p2align 0x4
L_411600:
L_90498:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90499
L_90505:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90506+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90506
.p2align 0x4
.long 0x12D8
L_90506:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90499:
	movl 0x30(%rbp),%ecx
L_90500:
	movl %ecx,0x98(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_90501+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411602:
L_90379:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411603:
L_90507:
	xorl %ecx,%ecx
	jmp L_90500
.p2align 0x4
.long 0x12D4
L_90488:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_90489
.p2align 0x4
.long 0x75D
L_90468:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90469
L_90475:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_90476+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90476
.p2align 0x4
.long 0x7C0
L_90476:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_90469:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x40(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x28(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x50,%rbp
	leaq (L_90470+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x12C2
L_90375:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90376
L_90418:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_90419+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90419
.p2align 0x4
.long 0x12CC
L_90419:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_90376:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411609
L_90377:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90378:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_90379
L_90380:
	cmpq $0x1,%r15
	je L_411606
L_90381:
	movq 0x8(%r15),%r15
	jmp L_90378
.p2align 0x4
L_411606:
L_90382:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90383
L_90415:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_90416+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90416
.p2align 0x4
.long 0x12CD
L_90416:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_90383:
	movl 0x30(%rbp),%ecx
L_90384:
	movl %ecx,0xA8(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x78(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_90385+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411609:
L_90417:
	xorl %ecx,%ecx
	jmp L_90384
.p2align 0x4
.long 0x12C0
L_90371:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_90372
.p2align 0x4
.long 0x9AF
L_90353:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90354
L_90356:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_90357+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90357
.p2align 0x4
.long 0xDE1
L_90357:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_90354:
	movq 0x30(%rbp),%r15
	movq 0x48(%rbp),%r13
	movq 0x40(%rbp),%r14
	jmp L_90355
.p2align 0x4
.long 0x12D6
L_90501:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90502
L_90503:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90504+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90504
.p2align 0x4
.long 0x12D7
L_90504:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90502:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movl 0x60(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x4745,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x18(%r14)
	addq $0x38,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x50(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,0x10(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%r14)
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%r14)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x20(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp loop_1024
.p2align 0x4
.long 0x512
L_90470:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90471
L_90473:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_90474+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90474
.p2align 0x4
.long 0x12D2
L_90474:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_90471:
	movq 0x48(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x40(%rbp),%r14
	jmp L_90472
.p2align 0x4
.long 0x12C3
L_90385:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90386
L_90413:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_90414+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90414
.p2align 0x4
.long 0x12CC
L_90414:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_90386:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x68(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x78(%rbp)
	addq $0x28,%r12
	movl 0x70(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x48(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_90387+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x12C4
L_90387:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90388
L_90411:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90412+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90412
.p2align 0x4
.long 0x12CB
L_90412:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90388:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x30(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x20(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq 0x78(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0xA0(%rbp)
	addq $0x88,%rbp
	leaq (L_90389+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
.long 0x12C5
L_90389:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90390
L_90409:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90410+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90410
.p2align 0x4
.long 0x12CA
L_90410:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90390:
	movq $0x3E83,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	movl $0x1,0x90(%rbp)
	addq $0x88,%rbp
	leaq (L_90391+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x12C6
L_90391:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90392
L_90407:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90408+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90408
.p2align 0x4
.long 0x12C8
L_90408:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90392:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x48(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411620
L_90393:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90394:
	incl %ecx
	movl %ecx,0x28(%rbp)
	jo L_90379
L_90395:
	cmpq $0x1,%r15
	je L_411617
L_90396:
	movq 0x8(%r15),%r15
	jmp L_90394
.p2align 0x4
L_411617:
L_90397:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90398
L_90404:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90405
.p2align 0x4
.long 0x12C9
L_90405:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90398:
	movl 0x28(%rbp),%ecx
L_90399:
	movl %ecx,0x90(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_90400+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411620:
L_90406:
	xorl %ecx,%ecx
	jmp L_90399
.p2align 0x4
.long 0x12C7
L_90400:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90401
L_90402:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90403+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90403
.p2align 0x4
.long 0x12C8
L_90403:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90401:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x50(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq %r14,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp loop_1024
.text
.p2align 0x4
.globl sendVar_0
.hidden sendVar_0
sendVar_0:
L_90522:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_90970
L_90523:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411663
L_90524:
	movq 0x10(%rbp),%r15
	cmpq $0x1,%r15
	je L_411662
L_90525:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_411661
	cmpq $0xEDA,%r14
	je L_411660
	cmpq $0xEDB,%r14
	je L_411659
L_90526:
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x239F,%r15
	je L_411656
	cmpq $0x23A0,%r15
	je L_411637
	cmpq $0x23A1,%r15
	je L_411633
	cmpq $0x23A2,%r15
	je L_411624
L_90527:
	movl 0x0(%r14),%r15d
	movq 0x10(%r14),%r13
	movq 0x8(%r14),%r11
	incl %r15d
	jo L_411623
L_90529:
	movl %r15d,0x8(%rbp)
	movq %r11,0x10(%rbp)
	movq $0x1CE1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	jmp each_0
.p2align 0x4
L_411623:
L_90528:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411624:
L_90890:
	movq 0x28(%r14),%r15
	movq %r15,0x8(%rbp)
	movq 0x20(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x18(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0x10(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x30(%rbp)
	cmpq $0x1,%r15
	je L_411625
L_90891:
	movq $0x1,0x40(%rbp)
	movl $0x0,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_90892+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_411625:
L_90955:
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xED5,%r14
	je L_411631
L_90957:
	movq 0x0(%r15),%r14
	movq %r14,0x8(%rbp)
	movq $0x1,0x20(%rbp)
L_90915:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	movq %r11,0x28(%rbp)
	cmpq %r14,%r11
	jne L_411630
L_90917:
	testq %r11,%r11
	jz L_411629
L_90918:
	cmpq $0x7FFFFFFF,%r11
	ja L_411628
L_90919:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90920
L_90944:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_90945+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90945
.p2align 0x4
.long 0x1127
L_90945:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_90920:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x14DF,%rcx
	movq 0x28(%rbp),%rdx
	movq $0x30,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_90921+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90921
.p2align 0x4
.long 0x1127
L_90921:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,0x38(%rbp)
L_90922:
	movq $0x0,0x40(%rbp)
loop_1027:
	movq 0x28(%rbp),%r13
	cmpq %r13,0x40(%rbp)
	jl L_411626
L_90923:
	movq 0x38(%rbp),%r13
	movq $0xB03,0xFFFFFFFFFFFFFFF8(%r13)
	movq $0x240F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r13,0x0(%r14)
	movq 0x20(%rbp),%r15
L_90911:
	movq $0x1D83,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x20,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%r13)
	movq %r13,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411626:
L_90924:
	movq 0x40(%rbp),%r15
	movl %r15d,%r14d
	movslq %r14d,%r15
	movq %r15,%r14
	movq %r15,%r13
	imulq $0x18,%r14
	movq 0x8(%rbp),%r11
	movq 0x0(%r11,%r14,1),%r10
	movq %r10,0x48(%rbp)
	imulq $0x18,%r13
	movq 0x8(%r11,%r13,1),%r14
	movq %r14,0x80(%rbp)
	imulq $0x18,%r15
	movq 0x10(%r11,%r15,1),%r14
	movq %r14,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x70(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,0x78(%rbp)
	movq %r15,0x88(%rbp)
	addq $0x70,%rbp
	leaq (L_90925+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
L_411628:
L_90946:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411629:
L_90947:
	movq (globalObjptr+0x1E70)(%rip),%r15
	movq %r15,0x38(%rbp)
	jmp L_90922
.p2align 0x4
L_411630:
L_90569:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411631:
L_90956:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x8(%rbp)
	movq $0x1,0x28(%rbp)
	movq %r14,%r15
L_90906:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_90569
L_90908:
	movl %r13d,0x40(%rbp)
	movq $0x3985,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x18(%r14)
	addq $0x28,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x10(%rbp),%r15
	movq %r15,0x10(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_90909+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_27
.p2align 0x4
L_411633:
L_90875:
	movl 0x0(%r14),%r13d
	movq 0x18(%r14),%r11
	movq %r11,0x8(%rbp)
	movq 0x10(%r14),%r10
	movq %r10,0x10(%rbp)
	movq 0x8(%r14),%r15
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x18(%rbp)
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x0(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x10(%r15),%r14
L_90876:
	movq %r11,%r15
	andq $0x3,%r15
	jnz L_411636
L_90887:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r15
	shrq $0x1,%r15
	cmpq $0xED9,%r15
	je L_411635
	cmpq $0xEDB,%r15
	je L_411634
	movq %r14,%r15
L_90877:
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_90878+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411634:
L_90889:
	movq 0x8(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_90882:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411635:
L_90888:
	movq 0x8(%rbp),%r15
	movq 0x28(%r15),%r14
	movq 0x20(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x28(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%rbp)
	movl 0x0(%r15),%r13d
	movl %r13d,0x10(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x18(%rbp)
	jmp x_1488
.p2align 0x4
L_411636:
	movq %r14,%r15
	jmp L_90877
.p2align 0x4
L_411637:
L_90542:
	movq 0x18(%r14),%r15
	movq 0x10(%r14),%r13
	movq %r13,0x8(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x18(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23AA,%r14
	je L_411655
	cmpq $0x23AB,%r14
	je L_411654
	cmpq $0x23AC,%r14
	je L_411638
L_90543:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x4759,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x20,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq %r14,%r15
L_90544:
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x10(%rbp)
	jmp loop_3849
.p2align 0x4
L_411638:
L_90548:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq %r11,0x20(%rbp)
	movq 0xD8(%r11),%r15
	movq 0xD0(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0xC8(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0xC0(%r11),%r10
	movq %r10,0x38(%rbp)
	movq 0xB8(%r11),%r9
	movq 0xB0(%r11),%r8
	movq %r8,0x40(%rbp)
	movq 0xA8(%r11),%r8
	movq %r8,0x48(%rbp)
	movq 0xA0(%r11),%r8
	movq %r8,0x50(%rbp)
	movq 0x98(%r11),%r8
	movq %r8,0x58(%rbp)
	movq 0x90(%r11),%r8
	movq %r8,0x60(%rbp)
	movq 0x88(%r11),%r8
	movq %r8,0x68(%rbp)
	movq 0x80(%r11),%r8
	movq %r8,0x70(%rbp)
	movq 0x78(%r11),%r8
	movq 0x48(%r11),%rsp
	movq %rsp,0x78(%rbp)
	movq 0x40(%r11),%rsp
	movq %rsp,0x80(%rbp)
	movq 0x20(%r11),%rsi
	movq %rsi,0x88(%rbp)
	movq 0x18(%r11),%rsi
	movq %rsi,0x90(%rbp)
	movq $0xA01,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x8(%r11)
	addq $0x18,%r12
	movq %rsp,0x0(%r11)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x98(%rbp)
	movq %r11,0x0(%r14)
	addq $0x10,%r12
	movq $0xA01,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x18,%r12
	movq %r13,0x0(%r11)
	movq 0x0(%rbp),%rsp
	movq %rsp,0x8(%r11)
	movq $0x1D89,0x0(%r12)
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,0xA0(%rbp)
	movq %r11,0x0(%rsp)
	addq $0x10,%r12
	movq 0x8(%r13),%r11
	movq %r11,%rsi
	andq $0x7,%rsi
	cmpq $0x1,%rsi
	je L_411652
	cmpq $0x2,%rsi
	je L_411650
	cmpq $0x3,%rsi
	je stateful_4
	cmpq $0x5,%rsi
	je L_411648
L_90549:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%rsi
	shrq $0x1,%rsi
	cmpq $0xEB0,%rsi
	je stateful_3
	cmpq $0xEB1,%rsi
	je L_411647
	cmpq $0xEB2,%rsi
	je L_411640
	cmpq $0xEB3,%rsi
	je stateful_2
	cmpq $0xEB4,%rsi
	je L_411639
	cmpq $0xEB5,%rsi
	je stateful_1
L_90550:
	movq 0x0(%r11),%rsi
	movq %rsi,0x28(%rbp)
	movq %rsp,0x30(%rbp)
	movq %r10,0x40(%rbp)
	movq %r14,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_90547+0x0)(%rip),%r14
	movq %r14,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
stateful_1:
	movq %r13,%r15
stateful_0:
	movq 0x88(%rbp),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x20(%rbp)
	movl 0x0(%r15),%r13d
	shlq $0x1,%r13
	orq $0x1,%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90552+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
L_411639:
L_90582:
	movq 0x0(%r11),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r13
	movq 0x68(%r13),%r11
	movq %r11,0x30(%rbp)
	movq 0x60(%r13),%r11
	movq %r11,0x38(%rbp)
	movq 0x58(%r13),%r11
	movq %r11,0x40(%rbp)
	movq 0x50(%r13),%r11
	movq %r11,0x48(%rbp)
	movq 0x38(%r13),%r11
	movq %r11,0x50(%rbp)
	movq 0x30(%r13),%r11
	movq %r11,0x58(%rbp)
	movq 0x10(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x8(%r13),%r11
	movq %r11,0x68(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x70(%rbp)
	movq 0x70(%r13),%r11
	movq 0x8(%r11),%r10
	movq %r10,0xC8(%rbp)
	movq 0x0(%r11),%r10
	movq %r10,0xA8(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0xB0(%rbp)
	movq %r13,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_90583+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp peek_6
.p2align 0x4
stateful_2:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_411640:
L_90567:
	movq 0x0(%r11),%r15
	movq %r15,0x28(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movq %r13,0x30(%rbp)
	movl %r13d,%r15d
	movslq %r15d,%r11
	cmpq %r13,%r11
	jne L_90569
L_90570:
	decl %r15d
	movl %r15d,0x38(%rbp)
	jo L_90528
L_90571:
	movq %r14,0x40(%rbp)
	movl $0x0,0x3C(%rbp)
.p2align 0x4,,0x7
loop_1026:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411644
.p2align 0x4,,0x7
L_90572:
	movl 0x3C(%rbp),%r15d
	cmpl %r15d,0x38(%rbp)
	jl L_411643
L_90573:
	movslq %r15d,%r14
	cmpq 0x30(%rbp),%r14
	jnb L_411642
L_90576:
	movq 0x28(%rbp),%r13
	movq 0x0(%r13,%r14,8),%r11
	movq $0x1D8D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x20,%r12
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0xA0(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r11,0x10(%r14)
	incl %r15d
	jo L_90528
L_90577:
	movl %r15d,0x3C(%rbp)
	movq $0x4753,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r11,0x8(%r15)
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x40(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x40(%rbp)
	jmp loop_1026
.p2align 0x4
L_411642:
L_90575:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411643:
L_90578:
	movq 0x40(%rbp),%r14
	movq %r14,%r15
	jmp L_90544
.p2align 0x4
L_411644:
L_90579:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90580+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90580
.p2align 0x4
.long 0x12E2
L_90580:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	jmp L_90572
.p2align 0x4
L_411647:
L_90558:
	movq 0x0(%r11),%r15
	movq %r15,0xB0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_90559+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp vectorHashFunc_0
.p2align 0x4
stateful_3:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_411648:
L_90850:
	shrq $0x3,%r11
	movb %r11b,%r13b
	movb %r13b,0x20(%rbp)
	testb %r13b,%r13b
	jnz L_411649
L_90851:
	movq $0x11,%r13
	xchgq %r15,%r14
	xchgq %r13,%r15
toBits_12:
	movq %r15,0xB8(%rbp)
	movq %r14,0xC0(%rbp)
	movq $0x11,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_90852+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1182
.p2align 0x4
L_411649:
L_90874:
	movq $0x9,%r13
	xchgq %r15,%r14
	xchgq %r13,%r15
	jmp toBits_12
.p2align 0x4
stateful_4:
	movq %r13,%r15
	jmp stateful_0
.p2align 0x4
L_411650:
L_90734:
	movq 0x0(%r9),%r15
	movq 0x8(%r9),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r8
	movq 0x0(%r8),%rsi
	cmpq $0x1,%rsi
	je L_411651
L_90735:
	movq %r15,0xB8(%rbp)
	movq 0x0(%rsi),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_90736+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_411651:
L_90844:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_90845+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
L_411652:
L_90708:
	movq 0x0(%r8),%r15
	movq 0x8(%r8),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r9
	movq 0x0(%r9),%rsi
	cmpq $0x1,%rsi
	je L_411653
L_90709:
	movq %r15,0xB8(%rbp)
	movq 0x0(%rsi),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_90710+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_411653:
L_90729:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_90730+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
L_411654:
L_90546:
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_90547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equal_3
.p2align 0x4
L_411655:
L_90545:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x4757,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x20,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1D97,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq %r14,%r15
	jmp L_90544
.p2align 0x4
L_411656:
L_90530:
	movq 0x0(%r14),%r15
	movq %r15,0x8(%rbp)
	cmpq $0x1,%r15
	je L_411658
	cmpq $0x2,%r15
	je L_411657
L_90531:
	movq $0x400B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x18(%rbp)
	movl $0x1,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_90532+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411657:
L_90537:
	movq $0x400B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x8(%rbp)
	movl $0x1,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_90538+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411658:
L_90536:
	movq (globalObjptr+0x1E68)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411659:
L_90964:
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r10
	movq %r10,0x0(%r15)
	movq %r14,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x8(%rbp),%r15
	movq %r15,0x8(%r14)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	movq %r15,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411660:
L_90959:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x8(%r15),%r11
	movl 0x0(%r15),%r10d
	movq $0x17,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x8(%rbp)
	movl %r10d,0x0(%r15)
	movq %r14,0x8(%r15)
	movq %r13,0x10(%r15)
	movq %r11,0x18(%r15)
	addq $0x28,%r12
	movl $0x0,0x4(%r15)
	movq $0x400B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x18(%rbp)
	movl $0x1,0x20(%rbp)
	addq $0x18,%rbp
	leaq (L_90960+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411661:
L_90958:
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x8(%r15),%r14
	movl 0x0(%r15),%r13d
	movl %r13d,0x10(%rbp)
	movq %r14,0x38(%rbp)
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp x_1488
.p2align 0x4
L_411662:
L_90965:
	movq $0x400B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x0(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,0x8(%rbp)
	movl $0x1,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_90966+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411663:
L_90970:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_90971+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90971
.p2align 0x4
.long 0x45B
L_90971:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_90524
.p2align 0x4
.long 0x655
L_90892:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq 0x8(%rbp),%r14
	movq %r14,0x68(%rbp)
	movq %r15,0x70(%rbp)
	addq $0x58,%rbp
	leaq (L_90893+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
.long 0x133A
L_90925:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_90926+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x56C
L_90909:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90910
L_90912:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90913+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90913
.p2align 0x4
.long 0xFCE
L_90913:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90910:
	movq $0x240D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x10(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x28(%rbp),%r15
	jmp L_90911
.p2align 0x4
.long 0x5EF
L_90878:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movl 0x28(%rbp),%r15d
	movl %r15d,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90879
L_90885:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_90886+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90886
.p2align 0x4
.long 0x4E1
L_90886:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_90879:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x28(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x20(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x38(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_90880+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x5EF
L_90547:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_90544
.p2align 0x4
.long 0x12DA
L_90552:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	movl %r15d,0xA8(%rbp)
	movq $0x3,0xB0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90553+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x12E3
L_90583:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90584
L_90705:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC8,%rbp
	leaq (L_90706+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90706
.p2align 0x4
.long 0x12F6
L_90706:
	addq $0xFFFFFFFFFFFFFF38,%rbp
L_90584:
	movq 0xB8(%rbp),%r15
	cmpq $0x1,%r15
	je L_411668
L_90585:
x_272:
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_411667
L_90586:
	movq %r14,0x20(%rbp)
L_90587:
	movq $0x3771,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x90(%rbp)
	movl $0x2,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_90588+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
L_411667:
L_90592:
	movq 0x28(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xF0F0)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_90593+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_411668:
L_90704:
	movq $0x6F5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x1957,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x18,%r12
	movq 0xA8(%rbp),%r11
	movq %r11,0x0(%r13)
	movq %r14,0x8(%r13)
	movq 0xB0(%rbp),%r11
	movq 0x0(%r11),%r10
	movq $0x28DF,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r13,0x0(%r9)
	movq %r10,0x8(%r9)
	addq $0x18,%r12
	movq %r11,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r9,0x0(%r11)
	xchgq %r14,%r15
	jmp x_272
.p2align 0x4
.long 0x12DE
L_90559:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90560
L_90565:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90566+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90566
.p2align 0x4
.long 0x12E1
L_90566:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_90560:
	movq $0x3771,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x90(%rbp)
	movl $0x2,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_90561+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x132E
L_90852:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq %r15,0xB0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_90853+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
.long 0x12FF
L_90736:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r10
	movq 0x0(%r10),%r9
	cmpq $0x1,%r9
	je L_411671
L_90737:
	movq %r14,0xB8(%rbp)
	movq 0x0(%r9),%r15
	movq %r15,0xB0(%rbp)
	addq $0xB0,%rbp
	leaq (L_90738+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_411671:
L_90839:
	movq %r11,0x8(%rbp)
	movq (globalObjptr+0xD098)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_90840+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x1
L_90845:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_251+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x12F7
L_90710:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_90711+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1
L_90730:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_249+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x521
L_90532:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90533
L_90534:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_90535+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90535
.p2align 0x4
.long 0x4E8
L_90535:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_90533:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_90538:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90539
L_90540:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90541+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90541
.p2align 0x4
.long 0x451
L_90541:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90539:
	movq $0x1D7F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x521
L_90960:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90961
L_90962:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_90963+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90963
.p2align 0x4
.long 0x4E8
L_90963:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_90961:
	movq $0x1D81,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x10(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_90966:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90967
L_90968:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90969+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90969
.p2align 0x4
.long 0x451
L_90969:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90967:
	movq $0x1D7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1337
L_90893:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_90894+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x133B
L_90926:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90927
L_90942:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_90943+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90943
.p2align 0x4
.long 0x133F
L_90943:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_90927:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x58(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x80(%rbp)
	addq $0x10,%r12
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411679
L_90928:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90929:
	incl %ecx
	movl %ecx,0x58(%rbp)
	jo L_90528
L_90930:
	cmpq $0x1,%r15
	je L_411676
L_90931:
	movq 0x8(%r15),%r15
	jmp L_90929
.p2align 0x4
L_411676:
L_90932:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90933
L_90939:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90940+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90940
.p2align 0x4
.long 0x133E
L_90940:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90933:
	movl 0x58(%rbp),%ecx
L_90934:
	movl %ecx,0x90(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x80(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_90935+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411679:
L_90941:
	xorl %ecx,%ecx
	jmp L_90934
.p2align 0x4
.long 0x4E2
L_90880:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90881
L_90883:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_90884+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90884
.p2align 0x4
.long 0x720
L_90884:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_90881:
	movq 0x20(%rbp),%r15
	movq 0x30(%rbp),%r13
	movq 0x28(%rbp),%r14
	jmp L_90882
.p2align 0x4
.long 0x12DB
L_90553:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0xA8(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xB0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90554+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x12DF
L_90588:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90589
L_90590:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90591+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90591
.p2align 0x4
.long 0x12E0
L_90591:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90589:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_90544
.p2align 0x4
.long 0x12E3
L_90593:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xC8,%rbp
	leaq (L_90594+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x12DF
L_90561:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90562
L_90563:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_90564+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90564
.p2align 0x4
.long 0x12E0
L_90564:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_90562:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_90544
.p2align 0x4
.long 0x12F7
L_90853:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90854
L_90872:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90873+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90873
.p2align 0x4
.long 0x1336
L_90873:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_90854:
	movq $0x1E1F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	addq $0x18,%r12
	movzbl 0x20(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_90855+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1300
L_90738:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq $0x1,0xB0(%rbp)
	movl $0x0,0xB8(%rbp)
	addq $0xB0,%rbp
	leaq (L_90739+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1
L_90840:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xD0A0)(%rip),%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (bug_250+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp append_0
.p2align 0x4
.long 0x1
bug_251:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90846
L_90847:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90848+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90848
.p2align 0x4
.long 0x451
L_90848:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90846:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x12F8
L_90711:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90712
L_90727:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90728+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90728
.p2align 0x4
.long 0x12FE
L_90728:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_90712:
	movq $0x3773,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_90713+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1
bug_249:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90731
L_90732:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90733+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90733
.p2align 0x4
.long 0x451
L_90733:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90731:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1338
L_90894:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90895
L_90953:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_90954+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90954
.p2align 0x4
.long 0x1342
L_90954:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_90895:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x60(%rbp)
	addq $0x10,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411691
L_90896:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90897:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_90528
L_90898:
	cmpq $0x1,%r15
	je L_411688
L_90899:
	movq 0x8(%r15),%r15
	jmp L_90897
.p2align 0x4
L_411688:
L_90900:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90901
L_90950:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_90951+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90951
.p2align 0x4
.long 0x1341
L_90951:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_90901:
	movl 0x40(%rbp),%ecx
L_90902:
	movl %ecx,0x70(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_90903+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411691:
L_90952:
	xorl %ecx,%ecx
	jmp L_90902
.p2align 0x4
.long 0x133C
L_90935:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90936
L_90937:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_90938+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90938
.p2align 0x4
.long 0x133D
L_90938:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_90936:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x50(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x60(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x17D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x40(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x40(%rbp)
	jmp loop_1027
.p2align 0x4
.long 0x12DC
L_90554:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90555
L_90556:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_90557+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90557
.p2align 0x4
.long 0x12DD
L_90557:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_90555:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1C95,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x10,%r12
	movq $0x1DA1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	movq %r15,0x30(%rbp)
	addq $0x10,%r12
	movq %r14,0x28(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x28,%rbp
	leaq (L_90547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x12E4
L_90594:
	addq $0xFFFFFFFFFFFFFF38,%rbp
	movl 0xC8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90595
L_90702:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC8,%rbp
	leaq (L_90703+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90703
.p2align 0x4
.long 0x12F5
L_90703:
	addq $0xFFFFFFFFFFFFFF38,%rbp
L_90595:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0xC0(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq 0xB8(%rbp),%r15
	movq %r15,0x18(%r13)
	movq 0xB0(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90596+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp peek_6
.p2align 0x4
.long 0x132F
L_90855:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90856
L_90870:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90871+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90871
.p2align 0x4
.long 0x1335
L_90871:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_90856:
	movq $0x3773,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_90857+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1301
L_90739:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movq 0xB0(%rbp),%r15
	movq %r15,0x88(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90740
L_90837:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_90838+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90838
.p2align 0x4
.long 0x132D
L_90838:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_90740:
	movq $0x3773,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x90(%rbp)
	addq $0x10,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_90741+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1
bug_250:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90841
L_90842:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90843+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90843
.p2align 0x4
.long 0x451
L_90843:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90841:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x12F9
L_90713:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90714+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1339
L_90903:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90904
L_90948:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_90949+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90949
.p2align 0x4
.long 0x1340
L_90949:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_90904:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x48(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xED5,%r13
	je L_411699
L_90914:
	movq 0x0(%r15),%r13
	movq %r13,0x8(%rbp)
	movq %r14,0x20(%rbp)
	jmp L_90915
.p2align 0x4
L_411699:
L_90905:
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq %r11,0x8(%rbp)
	movq %r14,0x28(%rbp)
	movq %r13,%r15
	jmp L_90906
.p2align 0x4
.long 0x12E5
L_90596:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90597
L_90700:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90701+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90701
.p2align 0x4
.long 0x12F2
L_90701:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90597:
	movq 0x30(%rbp),%r15
	cmpq $0x1,%r15
	je L_411701
L_90598:
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r14,1)
	movq 0xC0(%rbp),%r14
	movq %r14,0x0(%r15)
datatypee_1:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0xD8(%rbp)
	movq $0x1D69,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xD0(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90599+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
L_411701:
L_90699:
	movq $0x6F5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0xC0(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1957,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r13)
	movq 0xB0(%rbp),%r14
	movq 0x0(%r14),%r11
	movq $0x28DF,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r10,0x0(%r14)
	jmp datatypee_1
.p2align 0x4
.long 0x1330
L_90857:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90858+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1302
L_90741:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xB0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_90742+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x12FA
L_90714:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90715
L_90725:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_90726+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90726
.p2align 0x4
.long 0x12FD
L_90726:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_90715:
	movslq 0x30(%rbp),%r15
	movq 0x50(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_90575
L_90717:
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_411703
L_90718:
	movl 0x0(%r13),%r15d
	movl %r15d,0xB0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90719+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
L_411703:
L_90724:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x12E6
L_90599:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90600+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1331
L_90858:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90859
L_90868:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_90869+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90869
.p2align 0x4
.long 0x1334
L_90869:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_90859:
	movslq 0x30(%rbp),%r15
	movq 0x58(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_90575
L_90861:
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_90724
L_90862:
	movl 0x0(%r13),%r15d
	movl %r15d,0xB0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_90863+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1303
L_90742:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movl 0xC0(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90743
L_90835:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_90836+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90836
.p2align 0x4
.long 0x132C
L_90836:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_90743:
	movq 0xB0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0xB8(%rbp)
	movslq 0x30(%rbp),%r13
	cmpq %r14,%r13
	jnb L_90575
L_90745:
	movq 0x0(%r15,%r13,8),%r14
	cmpq $0x1,%r14
	je L_90724
L_90746:
	movl 0x0(%r14),%r15d
	movl %r15d,0xD0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x30(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xC8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xC8,%rbp
	leaq (L_90747+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x12FB
L_90719:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90720
L_90721:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_90722+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90722
.p2align 0x4
.long 0x12FC
L_90722:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_90720:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x16,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x30(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_90547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x12E7
L_90600:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90601
L_90697:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90698+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90698
.p2align 0x4
.long 0x12F4
L_90698:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90601:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x80(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90602+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1332
L_90863:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90864
L_90865:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_90866+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90866
.p2align 0x4
.long 0x1333
L_90866:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_90864:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq %r15,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_90547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x1304
L_90747:
	addq $0xFFFFFFFFFFFFFF38,%rbp
	movq 0xC8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90748
L_90832:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90833+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90833
.p2align 0x4
.long 0x132B
L_90833:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90748:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC8(%rbp)
	addq $0x28,%r12
	movq 0xA0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x32,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0xC0(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xD8(%rbp)
	movl $0x0,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_90749+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x12E8
L_90602:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90603
L_90695:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90696+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90696
.p2align 0x4
.long 0x12F3
L_90696:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90603:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x48(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x3E7F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq %r15,0x0(%r14)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0xD0(%rbp)
	movl $0x2,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90604+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1305
L_90749:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movl $0x1,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_90750+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x12E5
L_90604:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90605
L_90693:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90694+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90694
.p2align 0x4
.long 0x12F2
L_90694:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90605:
	movq $0x1D89,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x38(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r11
	movq %r11,0x0(%r13)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0xB8(%rbp)
	addq $0x10,%r12
	movq 0x48(%rbp),%r11
	movq %r11,0x0(%r13)
	movq (globalObjptr+0x1068)(%rip),%r13
	movq 0x0(%r13),%r15
	incq %r15
	jo L_411729
L_90607:
	movq %r15,0x0(%r13)
	movq 0xB0(%rbp),%r13
	movq 0x0(%r13),%r11
	cmpq $0x1,%r11
	je L_411728
L_90608:
	movq 0x0(%r11),%r14
	movq 0x8(%r11),%r11
	movl $0x0,0x40(%rbp)
	movq %r11,%r15
.p2align 0x4,,0x7
L_90610:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_90611
L_90653:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xD1A,%r13
	jne L_90611
L_90654:
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r13
	cmpq %r13,0x50(%rbp)
	je L_411721
L_90611:
	movl 0x40(%rbp),%r13d
	incl %r13d
	jo L_90528
L_90612:
	cmpq $0x1,%r15
	je L_411717
L_90613:
	movl %r13d,0x40(%rbp)
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	jmp L_90610
.p2align 0x4
L_411717:
	movl %r13d,%ecx
L_90615:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_411719
L_90617:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl x_273
L_90652:
	movl %ecx,0x0(%r15)
x_273:
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x28(%rbp),%r14
	movq 0x8(%r14),%r11
	movq %r11,0x30(%rbp)
	movq 0x0(%r11),%r15
	cmpq $0x1,%r15
	je L_411718
L_90619:
L_90620:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_90621+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
L_411718:
L_90650:
	movq %r13,0x48(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_90651+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unique_0
.p2align 0x4
L_411719:
L_90616:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411721:
L_90656:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90657
L_90690:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90691+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90691
.p2align 0x4
.long 0x12F1
L_90691:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90657:
	movl 0x40(%rbp),%r14d
	movslq %r14d,%r15
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r15
	jo L_90616
L_90658:
	movq %r15,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r13
	cmpl %r14d,0x0(%r13)
	jl L_411723
L_90659:
	movq 0x48(%rbp),%r15
L_90660:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_90569
L_90662:
	movl %r13d,0xD8(%rbp)
	movq $0x3913,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x28(%r14)
	addq $0x38,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x88(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x90(%rbp),%r15
	movq %r15,0x10(%r14)
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%r14)
	movq 0x78(%rbp),%r15
	movq %r15,0x20(%r14)
	movq %r14,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90663+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_29
.p2align 0x4
L_411723:
L_90689:
	movq (globalObjptr+0x1078)(%rip),%r14
	movl 0x40(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movq 0x48(%rbp),%r15
	jmp L_90660
.p2align 0x4
L_411728:
L_90692:
	xorl %ecx,%ecx
	jmp L_90615
.p2align 0x4
L_411729:
L_90606:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1306
L_90750:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90751+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1
L_90621:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xDFE8)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%rbp
	leaq (L_90622+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x69B
L_90651:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_90620
.p2align 0x4
.long 0x12E9
L_90663:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90664
L_90687:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90688+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90688
.p2align 0x4
.long 0x12F0
L_90688:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90664:
	movq $0x1DAD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DA5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x28,%r12
	movq $0x1,0x8(%r14)
	movq 0xB8(%rbp),%r15
	movq %r15,0x10(%r14)
	movq 0x80(%rbp),%r15
	movq %r15,0x18(%r14)
	movq %r14,0xD8(%rbp)
	movq $0x2,0xD0(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90665+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1490
.p2align 0x4
.long 0x1307
L_90751:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0xA0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90752
L_90830:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90831+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90831
.p2align 0x4
.long 0x132A
L_90831:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90752:
	movslq 0xA0(%rbp),%r15
	cmpq 0xB8(%rbp),%r15
	jnb L_90575
L_90754:
	movq 0xB0(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_90724
L_90755:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE0(%rbp)
	movq $0x1D5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xA0(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xD8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90756+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x4AF
L_90622:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq (globalObjptr+0xF0F8)(%rip),%r15
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_90623+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x12EA
L_90665:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0xD8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90666
L_90685:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90686+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90686
.p2align 0x4
.long 0x12EE
L_90686:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90666:
	movq $0x30D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411738
L_90667:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_90668:
	incl %ecx
	movl %ecx,0x20(%rbp)
	jo L_90528
L_90669:
	cmpq $0x1,%r15
	je L_411735
L_90670:
	movq 0x8(%r15),%r15
	jmp L_90668
.p2align 0x4
L_411735:
L_90671:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90672
L_90682:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90683+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90683
.p2align 0x4
.long 0x12EF
L_90683:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90672:
	movl 0x20(%rbp),%ecx
L_90673:
	movl %ecx,0xD8(%rbp)
	movq $0x3F35,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90674+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_5
.p2align 0x4
L_411738:
L_90684:
	xorl %ecx,%ecx
	jmp L_90673
.p2align 0x4
.long 0x1308
L_90756:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90757
L_90827:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90828+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90828
.p2align 0x4
.long 0x1329
L_90828:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90757:
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xE8(%rbp)
	movl 0x0(%r15),%r14d
	movq 0xC0(%rbp),%r15
	xorl 0x0(%r15),%r14d
	movl %r14d,0xE0(%rbp)
	movq $0x1D63,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90758+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x5AF
L_90623:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	movq (globalObjptr+0xDFF8)(%rip),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_90624+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x12EB
L_90674:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90675
L_90680:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90681+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90681
.p2align 0x4
.long 0x12EE
L_90681:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90675:
	movq $0x721,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x40,%r12
	movl $0x1,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1,0x18(%r15)
	movq 0xC0(%rbp),%r14
	movq %r14,0x20(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x28(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x30(%r15)
	movq 0x70(%rbp),%r14
	movq 0x10(%r14),%r13
	movq %r13,0xD0(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0xE0(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x38(%rbp)
	movq $0x723,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq $0x7FFFFFFF,0x0(%r14)
	movq %r15,0x8(%r14)
	movq $0x2937,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x10,%r12
	movq %r14,0x0(%r13)
	movq $0x725,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x0(%r11)
	addq $0x10,%r12
	movq $0x727,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r11,0x0(%r13)
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq $0x729,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0xD8(%rbp)
	addq $0x18,%r12
	addq $0xD0,%rbp
	leaq (L_90676+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1491
.p2align 0x4
.long 0x1309
L_90758:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90759
L_90825:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90826+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90826
.p2align 0x4
.long 0x1328
L_90826:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90759:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC0(%rbp)
	addq $0x28,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x31,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x78(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90760+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x51E
L_90624:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90625
L_90648:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_90649+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90649
.p2align 0x4
.long 0x4AE
L_90649:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_90625:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x20(%rbp)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq 0x0(%rbp),%r11
	movq %r11,0x0(%r13)
	xorl %ecx,%ecx
	movq %r15,%r14
	movq %r11,%r15
.p2align 0x4,,0x7
L_90626:
	addl 0x0(%r15),%ecx
	movl %ecx,0x28(%rbp)
	jo L_90528
L_90627:
	cmpq $0x1,%r14
	je L_411743
L_90628:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_90626
.p2align 0x4
L_411743:
L_90629:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90630
L_90646:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_90647+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90647
.p2align 0x4
.long 0x4E6
L_90647:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_90630:
	movl 0x28(%rbp),%ecx
	testl %ecx,%ecx
	jz L_411744
L_90631:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
toString_116:
	movq $0xC3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	movq $0x1,0x8(%rbp)
	addq $0x8,%rbp
	leaq (rev_116+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3785
.p2align 0x4
L_411744:
L_90645:
	movq $0x1,%r15
	xorl %r14d,%r14d
	xchgl %r14d,%ecx
	jmp toString_116
.p2align 0x4
.long 0x12EC
L_90676:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90677
L_90678:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90679+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90679
.p2align 0x4
.long 0x12ED
L_90679:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90677:
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x210F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq 0xC0(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_90587
.p2align 0x4
.long 0x130A
L_90760:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90761
L_90823:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90824+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90824
.p2align 0x4
.long 0x1327
L_90824:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90761:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x48(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq 0x28(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90762+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1
rev_116:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq $0x1,%r15
	je L_411752
L_90632:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_90633:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411751
.p2align 0x4,,0x7
L_90634:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_411750
L_90635:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_90633
.p2align 0x4
L_411750:
L_90637:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_90638+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_411751:
L_90642:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_90643+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90643
.p2align 0x4
.long 0x45B
L_90643:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_90634
.p2align 0x4
L_411752:
L_90644:
	movq $0x1,%r14
	xchgq %r14,%r15
	jmp L_90637
.p2align 0x4
.long 0x130B
L_90762:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movl 0xD8(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	movslq %r15d,%r14
	cmpq 0xB8(%rbp),%r14
	jnb L_90575
L_90764:
	movq 0xB0(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_90724
L_90765:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90766+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1
L_90638:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90639
L_90640:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_90641+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90641
.p2align 0x4
.long 0x451
L_90641:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_90639:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x130B
L_90766:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90767
L_90820:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90821+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90821
.p2align 0x4
.long 0x1326
L_90821:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90767:
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D89,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x90(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xD0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xE0,%rbp
	leaq (L_90768+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x130C
L_90768:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movl 0xE0(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	movl %r15d,0xE0(%rbp)
	movq $0x3,0xE8(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0xF0(%rbp)
	addq $0xE0,%rbp
	leaq (L_90769+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x130D
L_90769:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq %r15,0xD8(%rbp)
	movq $0x3,0xE0(%rbp)
	movq 0xD0(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD8,%rbp
	leaq (L_90770+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x130E
L_90770:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90771
L_90818:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90819+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90819
.p2align 0x4
.long 0x1325
L_90819:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90771:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1C95,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x10,%r12
	movq $0x1DA1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x50(%rbp)
	movq %r13,0x0(%r15)
	addq $0x10,%r12
	movq $0x12BB,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x78(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0xC8(%rbp),%r13
	movq %r13,0x8(%r15)
	movq $0x1DAF,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	movq %r15,0x0(%r13)
	addq $0x18,%r12
	movq $0x1,0x8(%r13)
	movq $0x1E17,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xD0(%rbp)
	addq $0x10,%r12
	movq %r14,0x0(%r15)
	movq $0x1,0xE0(%rbp)
	movl $0x0,0xE8(%rbp)
	addq $0xE0,%rbp
	leaq (L_90772+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x130F
L_90772:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90773
L_90816:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xE0,%rbp
	leaq (L_90817+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90817
.p2align 0x4
.long 0x1324
L_90817:
	addq $0xFFFFFFFFFFFFFF20,%rbp
L_90773:
	movq $0x3771,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xE0(%rbp)
	movl $0x2,0xE8(%rbp)
	addq $0xE0,%rbp
	leaq (L_90774+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1310
L_90774:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0xC8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xD8(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xE8,%rbp
	leaq (L_90775+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1311
L_90775:
	addq $0xFFFFFFFFFFFFFF18,%rbp
	movl 0xE8(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	movslq %r15d,%r14
	movq 0xD8(%rbp),%r15
	cmpq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	jnb L_90575
L_90777:
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_90724
L_90778:
	movl 0x0(%r13),%r15d
	movl %r15d,0xE8(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0xE0(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xF0(%rbp)
	addq $0xE0,%rbp
	leaq (L_90779+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1312
L_90779:
	addq $0xFFFFFFFFFFFFFF20,%rbp
	movq 0xE0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90780
L_90813:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xE0,%rbp
	leaq (L_90814+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90814
.p2align 0x4
.long 0x1323
L_90814:
	addq $0xFFFFFFFFFFFFFF20,%rbp
L_90780:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x58(%rbp)
	addq $0x28,%r12
	movq 0x78(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0xD0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1E13,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xC8(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0xD8(%rbp)
	movl $0x0,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_90781+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0x1313
L_90781:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90782
L_90811:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90812+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90812
.p2align 0x4
.long 0x1322
L_90812:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90782:
	movq $0x3771,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xD8(%rbp)
	movl $0x2,0xE0(%rbp)
	addq $0xD8,%rbp
	leaq (L_90783+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1314
L_90783:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90784
L_90809:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_90810+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90810
.p2align 0x4
.long 0x1321
L_90810:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_90784:
	movq $0x1D95,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x50(%rbp)
	addq $0x28,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0xC8(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xD0(%rbp)
	movl $0x0,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90785+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1315
L_90785:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0xE0(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xE8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90786+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp wordBytes_0
.p2align 0x4
.long 0x1316
L_90786:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90787
L_90807:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90808+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90808
.p2align 0x4
.long 0x1320
L_90808:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90787:
	movq $0xBE7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	addq $0x20,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1,0xD0(%rbp)
	movl $0x0,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90788+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1317
L_90788:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xD0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90789+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
.long 0x1318
L_90789:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movl 0xD0(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	movslq %r15d,%r14
	cmpq 0xB8(%rbp),%r14
	jnb L_90575
L_90791:
	movq 0xB0(%rbp),%r15
	movq 0x0(%r15,%r14,8),%r13
	cmpq $0x1,%r13
	je L_90724
L_90792:
	movl 0x0(%r13),%r15d
	movl %r15d,0xD8(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0xE0(%rbp)
	addq $0xD0,%rbp
	leaq (L_90793+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_1
.p2align 0x4
.long 0x1319
L_90793:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0xD0(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_90794+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp vectorHashFunc_0
.p2align 0x4
.long 0x131A
L_90794:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90795
L_90804:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_90805+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90805
.p2align 0x4
.long 0x131F
L_90805:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_90795:
	movq $0x3771,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xC0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xA0(%rbp)
	movl $0x2,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_90796+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x131B
L_90796:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90797
L_90802:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_90803+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90803
.p2align 0x4
.long 0x131E
L_90803:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_90797:
	movq $0x1DA7,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0xBE7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x20,%r12
	movq 0x70(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%r14)
	movq $0x390F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0xA0(%rbp)
	movl $0x2,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_90798+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_29
.p2align 0x4
.long 0x131C
L_90798:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90799
L_90800:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_90801+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_90801
.p2align 0x4
.long 0x131D
L_90801:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_90799:
	movq $0x1DAD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1DA5,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x28,%r12
	movq $0x1,0x8(%r14)
	movq 0x50(%rbp),%r13
	movq %r13,0x10(%r14)
	movq 0x80(%rbp),%r13
	movq %r13,0x18(%r14)
	movq $0x1D99,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_90544
.text
.p2align 0x4
.globl each_0
.hidden each_0
each_0:
L_90972:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_91227
L_90973:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_411776
L_90974:
	movq 0x10(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x8(%r15),%r11
	movl 0x8(%rbp),%r10d
	cmpl 0x0(%r15),%r10d
	je L_411771
L_90975:
	movslq %r10d,%r9
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r9
	jnb L_411770
L_90978:
	movq %r11,0x18(%rbp)
	movq 0x0(%r14,%r9,8),%r11
	movq $0x473D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x20,%r12
	movl %r10d,0x0(%r14)
	movq %r13,0x8(%rbp)
	movl $0x0,0x4(%r14)
	movq %r15,0x8(%r14)
	movq %r11,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%r14)
	movq $0x1DB1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r15,0x0(%rbp)
	addq $0x10,%r12
	jmp loop_3849
.p2align 0x4
L_411770:
L_90977:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411771:
L_90979:
	movq $0x19D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x8(%rbp)
	addq $0x10,%r12
	movq 0x0(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411775
L_90980:
	movq 0x8(%r13),%r14
	xorl %ecx,%ecx
	xchgq %r14,%r15
.p2align 0x4,,0x7
L_90981:
	incl %ecx
	movl %ecx,0x10(%rbp)
	jo L_411774
L_90983:
	cmpq $0x1,%r15
	je L_411772
L_90984:
	movq 0x8(%r15),%r15
	jmp L_90981
.p2align 0x4
L_411772:
L_90985:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90986
L_91224:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_91225+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91225
.p2align 0x4
.long 0x522
L_91225:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_90986:
	movl 0x10(%rbp),%ecx
L_90987:
	movl %ecx,0x30(%rbp)
	movq $0x4009,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_90988+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411774:
L_90982:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411775:
L_91226:
	xorl %ecx,%ecx
	jmp L_90987
.p2align 0x4
L_411776:
L_91227:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_91228+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91228
.p2align 0x4
.long 0x65A
L_91228:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_90974
.p2align 0x4
.long 0x48F
L_90988:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90989
L_91222:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_91223+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91223
.p2align 0x4
.long 0x5E5
L_91223:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_90989:
	movq 0x20(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_411779
L_90992:
	movl %r13d,%r14d
	decl %r14d
	jo L_90982
L_90993:
	movl %r13d,0x30(%rbp)
	movq $0x4005,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r14d,0x0(%r13)
	addq $0x18,%r12
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r13,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_90994+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_411779:
L_90991:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x48F
L_90994:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_90995
L_91220:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_91221+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91221
.p2align 0x4
.long 0x5E5
L_91221:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_90995:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x23A4,%r14
	je L_411797
	cmpq $0x23A5,%r14
	je L_411793
	cmpq $0x23A6,%r14
	je L_411790
	cmpq $0x23A7,%r14
	je L_411787
	cmpq $0x23A8,%r14
	je L_411783
L_90996:
	movq 0x30(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x28(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x20(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x58(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x60(%rbp)
L_90997:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_411782
L_91047:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_411781
L_91048:
	movq 0x8(%r14),%r15
	movq %r15,0x68(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x70(%rbp)
L_91002:
	movq 0x60(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_91003+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411781:
	movq %r10,%r15
L_90998:
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_90999+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411782:
	movq %r10,%r15
	jmp L_90998
.p2align 0x4
L_411783:
L_91205:
	movq 0x20(%r15),%r14
	movq 0x18(%r15),%r13
	movq 0x10(%r15),%r11
	movq %r11,0x28(%rbp)
	movq 0x8(%r15),%r10
	movq %r10,0x30(%rbp)
	movq 0x0(%r15),%r10
	movq $0x1D75,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r9,0x38(%rbp)
	movq %r14,0x8(%r9)
	movq %r13,0x10(%r9)
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r9)
	movq 0x10(%r10),%r15
L_91206:
	movq %r11,%r14
	andq $0x3,%r14
	jnz L_91207
L_91217:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_411785
	cmpq $0xEDB,%r14
	je L_411784
L_91207:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_91208+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411784:
L_91219:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_91212:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411785:
L_91218:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1488
.p2align 0x4
L_411787:
L_91112:
	movq 0x38(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x30(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x20(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x48(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x28(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x60(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x68(%rbp)
L_91113:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_411789
L_91203:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_411788
L_91204:
	movq 0x8(%r14),%r15
	movq %r15,0x70(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x78(%rbp)
L_91118:
	movq 0x68(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x88,%rbp
	leaq (L_91119+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411788:
	movq %r10,%r15
L_91114:
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_91115+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411789:
	movq %r10,%r15
	jmp L_91114
.p2align 0x4
L_411790:
L_91079:
	movq 0x20(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x18(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x40(%rbp)
	movq 0x10(%r15),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x48(%rbp)
	movq 0x30(%r13),%r11
	movq 0x8(%r11),%r10
	movq 0x0(%r11),%r9
	movq %r9,0x50(%rbp)
L_91080:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_411792
L_91110:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEDB,%r15
	jne L_411791
L_91111:
	movq 0x8(%r14),%r15
	movq %r15,0x58(%rbp)
	movq 0x0(%r14),%r10
	movq 0x10(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r10,0x60(%rbp)
L_91085:
	movq 0x50(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_91086+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411791:
	movq %r10,%r15
L_91081:
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_91082+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411792:
	movq %r10,%r15
	jmp L_91081
.p2align 0x4
L_411793:
L_91064:
	movq 0x18(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x28(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	movq 0x0(%r15),%r11
	movq $0x1D79,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,0x38(%rbp)
	movq %r14,0x8(%r10)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r10)
	movq 0x10(%r11),%r15
L_91065:
	movq %r13,%r14
	andq $0x3,%r14
	jnz L_91066
L_91076:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r14
	shrq $0x1,%r14
	cmpq $0xED9,%r14
	je L_411795
	cmpq $0xEDB,%r14
	je L_411794
L_91066:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_91067+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411794:
L_91078:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_91071:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411795:
L_91077:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1488
.p2align 0x4
L_411797:
L_91049:
	movq 0x10(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq $0x1D6F,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,0x38(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r10
	movq %r10,0x0(%r11)
	movq 0x10(%r13),%r15
L_91050:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_91051
L_91061:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xED9,%r13
	je L_411799
	cmpq $0xEDB,%r13
	je L_411798
L_91051:
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_91052+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_411798:
L_91063:
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r15
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r14
L_91056:
	movq %r15,0x0(%rbp)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq $0x1DB9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_411799:
L_91062:
	movq 0x28(%rbp),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x10(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq 0x8(%r15),%r13
	movq 0x18(%r15),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x30(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r13,0x38(%rbp)
	jmp x_1488
.p2align 0x4
.long 0x1344
L_91003:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91004
L_91043:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_91044+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91044
.p2align 0x4
.long 0x1350
L_91044:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_91004:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x78(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x88(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x98(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA0(%rbp)
	addq $0x98,%rbp
	leaq (L_91005+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0xA36
L_90999:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91000
L_91045:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_91046+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91046
.p2align 0x4
.long 0x1351
L_91046:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_91000:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x70(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x68(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x80(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_91001+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B4
L_91208:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91209
L_91215:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_91216+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91216
.p2align 0x4
.long 0x1281
L_91216:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_91209:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_91210+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x135A
L_91119:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movl 0x88(%rbp),%r15d
	movl %r15d,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91120
L_91199:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_91200+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91200
.p2align 0x4
.long 0x1367
L_91200:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_91120:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x80(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x88(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x90(%rbp)
	addq $0x28,%r12
	movl 0x68(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA0(%rbp)
	addq $0x10,%r12
	movl $0x1,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_91121+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1358
L_91115:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movl 0x78(%rbp),%r15d
	movl %r15d,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91116
L_91201:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_91202+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91202
.p2align 0x4
.long 0x1368
L_91202:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_91116:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x78(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x70(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x88(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x88,%rbp
	leaq (L_91117+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x1352
L_91086:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movl 0x70(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91087
L_91106:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_91107+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91107
.p2align 0x4
.long 0x86C
L_91107:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_91087:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x68(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x50(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x78(%rbp)
	addq $0x10,%r12
	movl $0x1,0x80(%rbp)
	addq $0x78,%rbp
	leaq (L_91088+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x4B3
L_91082:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91083
L_91108:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_91109+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91109
.p2align 0x4
.long 0x1357
L_91109:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_91083:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x60(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x58(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x70(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x70,%rbp
	leaq (L_91084+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B4
L_91067:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91068
L_91074:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_91075+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91075
.p2align 0x4
.long 0x1281
L_91075:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_91068:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_91069+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x7B4
L_91052:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91053
L_91059:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_91060+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91060
.p2align 0x4
.long 0x1281
L_91060:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_91053:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq %r13,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x58,%rbp
	leaq (L_91054+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sendVar_0
.p2align 0x4
.long 0x1345
L_91005:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91006
L_91041:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_91042+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91042
.p2align 0x4
.long 0x134E
L_91042:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_91006:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x90(%rbp)
	addq $0x10,%r12
	movq 0x68(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411814
L_91007:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_91008:
	incl %ecx
	movl %ecx,0x64(%rbp)
	jo L_90982
L_91009:
	cmpq $0x1,%r15
	je L_411811
L_91010:
	movq 0x8(%r15),%r15
	jmp L_91008
.p2align 0x4
L_411811:
L_91011:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91012
L_91038:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_91039+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91039
.p2align 0x4
.long 0x134F
L_91039:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_91012:
	movl 0x64(%rbp),%ecx
L_91013:
	movl %ecx,0xA0(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x90(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_91014+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411814:
L_91040:
	xorl %ecx,%ecx
	jmp L_91013
.p2align 0x4
.long 0x1343
L_91001:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x68(%rbp)
	jmp L_91002
.p2align 0x4
.long 0x6DB
L_91210:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91211
L_91213:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_91214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91214
.p2align 0x4
.long 0x12D2
L_91214:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_91211:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_91212
.p2align 0x4
.long 0x135B
L_91121:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x78(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91122
L_91197:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_91198+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91198
.p2align 0x4
.long 0x1365
L_91198:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_91122:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x98(%rbp)
	addq $0x10,%r12
	movq 0x70(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411820
L_91123:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_91124:
	incl %ecx
	movl %ecx,0x6C(%rbp)
	jo L_90982
L_91125:
	cmpq $0x1,%r15
	je L_411817
L_91126:
	movq 0x8(%r15),%r15
	jmp L_91124
.p2align 0x4
L_411817:
L_91127:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91128
L_91194:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_91195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91195
.p2align 0x4
.long 0x1366
L_91195:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_91128:
	movl 0x6C(%rbp),%ecx
L_91129:
	movl %ecx,0xA8(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_91130+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411820:
L_91196:
	xorl %ecx,%ecx
	jmp L_91129
.p2align 0x4
.long 0x1359
L_91117:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x70(%rbp)
	jmp L_91118
.p2align 0x4
.long 0x1353
L_91088:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91089
L_91104:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_91105+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91105
.p2align 0x4
.long 0x1356
L_91105:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_91089:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x50(%rbp)
	addq $0x10,%r12
	movq 0x58(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411825
L_91090:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_91091:
	incl %ecx
	movl %ecx,0x58(%rbp)
	jo L_90982
L_91092:
	cmpq $0x1,%r15
	je L_411822
L_91093:
	movq 0x8(%r15),%r15
	jmp L_91091
.p2align 0x4
L_411822:
L_91094:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91095
L_91101:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_91102+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91102
.p2align 0x4
.long 0x1355
L_91102:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_91095:
	movl 0x58(%rbp),%ecx
L_91096:
	movl %ecx,0x80(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x78(%rbp)
	addq $0x78,%rbp
	leaq (L_91097+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411825:
L_91103:
	xorl %ecx,%ecx
	jmp L_91096
.p2align 0x4
.long 0x823
L_91084:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x58(%rbp)
	jmp L_91085
.p2align 0x4
.long 0x6DB
L_91069:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91070
L_91072:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_91073+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91073
.p2align 0x4
.long 0x12D2
L_91073:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_91070:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_91071
.p2align 0x4
.long 0x6DB
L_91054:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91055
L_91057:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_91058+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91058
.p2align 0x4
.long 0x12D2
L_91058:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_91055:
	movq 0x40(%rbp),%r15
	movq 0x50(%rbp),%r13
	movq 0x48(%rbp),%r14
	jmp L_91056
.p2align 0x4
.long 0x1346
L_91014:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91015
L_91036:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_91037+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91037
.p2align 0x4
.long 0x134E
L_91037:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_91015:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x90(%rbp)
	addq $0x28,%r12
	movl 0x60(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x18(%r15)
	movq $0x1,0xA0(%rbp)
	movl $0x0,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_91016+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x135C
L_91130:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91131
L_91192:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_91193+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91193
.p2align 0x4
.long 0x1365
L_91193:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_91131:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x70(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x90(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x60(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1DB5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x98(%rbp)
	addq $0x28,%r12
	movl 0x68(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x8(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
L_91132:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_91133
L_91173:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB2,%r15
	jne L_411832
L_91174:
	movq 0x0(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r13
	jne L_90991
L_91176:
	testl %r11d,%r11d
	jz L_411830
L_91177:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_91178+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_545
.p2align 0x4
L_411830:
L_91186:
	movq $0x1,0xA8(%rbp)
	movl $0x0,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_91187+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_411832:
L_91133:
	movq 0x38(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_91134+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1354
L_91097:
	addq $0xFFFFFFFFFFFFFF88,%rbp
	movq 0x78(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91098
L_91099:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_91100+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91100
.p2align 0x4
.long 0x1355
L_91100:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_91098:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x68(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x30(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x48(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x240B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1D85,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1347
L_91016:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x90(%rbp),%r14
	movq %r14,0x98(%rbp)
	movq 0x40(%rbp),%r14
	movq %r14,0xA0(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0xA8(%rbp)
	movq %r15,0xB0(%rbp)
	addq $0x98,%rbp
	leaq (L_91017+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
.long 0x1
L_91178:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91179
L_91184:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_91185+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91185
.p2align 0x4
.long 0x451
L_91185:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_91179:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xF100)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_91180+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x135D
L_91187:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0xA8(%rbp)
	movl $0x0,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_91188+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x135D
L_91134:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91135
L_91171:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_91172+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91172
.p2align 0x4
.long 0x1364
L_91172:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_91135:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x28(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0xA01,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x3E83,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0xA8(%rbp)
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_91136+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
.long 0x1348
L_91017:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_91018+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x1
L_91180:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91181
L_91182:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_91183+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91183
.p2align 0x4
.long 0x451
L_91183:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_91181:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x135F
L_91188:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91189
L_91190:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_91191+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91191
.p2align 0x4
.long 0x1363
L_91191:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_91189:
	movq 0x38(%rbp),%r15
L_91140:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_90991
L_91142:
	cmpl $0x1,%r13d
	jne L_411840
L_91164:
	cmpq $0x0,%r14
	jna L_90977
L_91166:
	movq 0x0(%r15),%r15
L_91144:
	movq %r15,0x68(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x50(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq %r15,0x70(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_91145+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
L_411840:
L_91143:
	movq $0x1D8B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_91144
.p2align 0x4
.long 0x135E
L_91136:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91137
L_91169:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_91170+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91170
.p2align 0x4
.long 0x1363
L_91170:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_91137:
	movq $0x1D89,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x3773,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xA8(%rbp)
	addq $0x10,%r12
	movl $0x1,0xB0(%rbp)
	addq $0xA8,%rbp
	leaq (L_91138+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_6
.p2align 0x4
.long 0x1349
L_91018:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movl 0x98(%rbp),%r15d
	movl %r15d,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91019
L_91034:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_91035+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91035
.p2align 0x4
.long 0x134D
L_91035:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_91019:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x48(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x68(%rbp)
	addq $0x10,%r12
	movq 0x40(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411847
L_91020:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_91021:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_90982
L_91022:
	cmpq $0x1,%r15
	je L_411844
L_91023:
	movq 0x8(%r15),%r15
	jmp L_91021
.p2align 0x4
L_411844:
L_91024:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91025
L_91031:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_91032+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91032
.p2align 0x4
.long 0x134C
L_91032:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_91025:
	movl 0x40(%rbp),%ecx
L_91026:
	movl %ecx,0xA0(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x68(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_91027+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411847:
L_91033:
	xorl %ecx,%ecx
	jmp L_91026
.p2align 0x4
.long 0x77C
L_91145:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_91146+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x135F
L_91138:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movq 0xA8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91139
L_91167:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_91168+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91168
.p2align 0x4
.long 0x1363
L_91168:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_91139:
	movq 0x38(%rbp),%r15
	jmp L_91140
.p2align 0x4
.long 0x134A
L_91027:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91028
L_91029:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_91030+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91030
.p2align 0x4
.long 0x134B
L_91030:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_91028:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x60(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x1D87,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x30,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r15)
	movq %r14,0x8(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x88(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x20(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1360
L_91146:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91147
L_91162:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_91163+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91163
.p2align 0x4
.long 0x856
L_91163:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_91147:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x60(%rbp)
	addq $0x10,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_411854
L_91148:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_91149:
	incl %ecx
	movl %ecx,0x30(%rbp)
	jo L_90982
L_91150:
	cmpq $0x1,%r15
	je L_411851
L_91151:
	movq 0x8(%r15),%r15
	jmp L_91149
.p2align 0x4
L_411851:
L_91152:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91153
L_91159:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_91160+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91160
.p2align 0x4
.long 0x1362
L_91160:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_91153:
	movl 0x30(%rbp),%ecx
L_91154:
	movl %ecx,0x70(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_91155+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_411854:
L_91161:
	xorl %ecx,%ecx
	jmp L_91154
.p2align 0x4
.long 0x1361
L_91155:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_91156
L_91157:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_91158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_91158
.p2align 0x4
.long 0x7B0
L_91158:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_91156:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x28(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x38(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0x1D7B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x48(%rbp),%r13
	movq %r13,0x8(%r15)
	movq %r14,0x10(%r15)
	movq %r15,0x0(%rbp)
	movq $0x1,0x8(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
