/* MLton 20130715 (built Mon Jun 13 11:54:01 AEST 2016 on ports.extensibl.com) */
/*   created this file on Mon Jun 13 12:08:57 2016. */
/* Do not edit this file. */
/* Flag settings:  */
/*    align: 8 */
/*    atMLtons: (mlton-compile, @MLton, --) */
/*    chunk: chunk per function */
/*    closureConvertGlobalize: true */
/*    closureConvertShrink: true */
/*    codegen: amd64 */
/*    contifyIntoMain: false */
/*    debug: false */
/*    defaultChar: char8 */
/*    defaultWideChar: widechar32 */
/*    defaultInt: int32 */
/*    defaultReal: real64 */
/*    defaultWord: word32 */
/*    diag passes: [] */
/*    drop passes: [] */
/*    elaborate allowConstant (default): false */
/*    elaborate allowConstant (enabled): true */
/*    elaborate allowFFI (default): false */
/*    elaborate allowFFI (enabled): true */
/*    elaborate allowPrim (default): false */
/*    elaborate allowPrim (enabled): true */
/*    elaborate allowOverload (default): false */
/*    elaborate allowOverload (enabled): true */
/*    elaborate allowRebindEquals (default): false */
/*    elaborate allowRebindEquals (enabled): true */
/*    elaborate deadCode (default): false */
/*    elaborate deadCode (enabled): true */
/*    elaborate forceUsed (default): false */
/*    elaborate forceUsed (enabled): true */
/*    elaborate ffiStr (default):  */
/*    elaborate ffiStr (enabled): true */
/*    elaborate nonexhaustiveExnMatch (default): default */
/*    elaborate nonexhaustiveExnMatch (enabled): true */
/*    elaborate nonexhaustiveMatch (default): warn */
/*    elaborate nonexhaustiveMatch (enabled): true */
/*    elaborate redundantMatch (default): warn */
/*    elaborate redundantMatch (enabled): true */
/*    elaborate resolveScope (default): strdec */
/*    elaborate resolveScope (enabled): true */
/*    elaborate sequenceNonUnit (default): warn */
/*    elaborate sequenceNonUnit (enabled): true */
/*    elaborate warnUnused (default): true */
/*    elaborate warnUnused (enabled): true */
/*    elaborate only: false */
/*    emit main: true */
/*    export header: None */
/*    exn history: false */
/*    generated output format: executable */
/*    gc check: Limit */
/*    indentation: 3 */
/*    inlineIntoMain: true */
/*    inlineLeafA: {loops = true, repeat = true, size = Some 20} */
/*    inlineLeafB: {loops = true, repeat = true, size = Some 40} */
/*    inlineNonRec: {small = 60, product = 320} */
/*    input file: mlton */
/*    keep CoreML: false */
/*    keep def use: true */
/*    keep dot: false */
/*    keep Machine: false */
/*    keep passes: [] */
/*    keep RSSA: false */
/*    keep SSA: false */
/*    keep SSA2: false */
/*    keep SXML: false */
/*    keep XML: false */
/*    extra_: false */
/*    lib dir: /usr/ports/pobj/mlton-20130715/mlton-on-20130715-release/build/lib */
/*    lib target dir: /usr/ports/pobj/mlton-20130715/mlton-on-20130715-release/build/lib/targets/self */
/*    loop passes: 1 */
/*    mark cards: true */
/*    max function size: 10000 */
/*    mlb path vars: [{var = MLTON_ROOT, path = $(LIB_MLTON_DIR)/sml}, {var = SML_LIB, path = $(LIB_MLTON_DIR)/sml}] */
/*    native commented: 0 */
/*    native live stack: false */
/*    native optimize: 1 */
/*    native move hoist: true */
/*    native copy prop: true */
/*    native copy prop cutoff: 1000 */
/*    native cutoff: 100 */
/*    native live transfer: 8 */
/*    native shuffle: true */
/*    native ieee fp: false */
/*    native split: Some 20000 */
/*    optimizationPasses: [<ssa2::default>, <ssa::default>, <sxml::default>, <xml::default>] */
/*    polyvariance: Some {hofo = true, rounds = 2, small = 30, product = 300} */
/*    prefer abs paths: false */
/*    prof passes: [] */
/*    profile: None */
/*    profile branch: false */
/*    profile C: [] */
/*    profile IL: ProfileSource */
/*    profile include/exclude: [(Seq [Star [.], Or [Seq [Seq [[$], [(], [S], [M], [L], [_], [L], [I], [B], [)]]]], Star [.]], false)] */
/*    profile raise: false */
/*    profile stack: false */
/*    profile val: false */
/*    show basis: None */
/*    show def-use: None */
/*    show types: true */
/*    target: self */
/*    target arch: AMD64 */
/*    target OS: OpenBSD */
/*    type check: false */
/*    verbosity: Pass */
/*    warn unrecognized annotation: true */
/*    warn deprecated features: true */
/*    zone cut depth: 100 */
.text
.p2align 0x4
.globl dontFlatten_2
.hidden dontFlatten_2
dontFlatten_2:
L_81944:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_81945
L_81951:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_81952+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_81952
.p2align 0x4
.long 0x451
L_81952:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_81945:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_407887
L_81946:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407887:
L_81947:
	movq 0x0(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%rbp
	leaq (L_81948+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x4AF
L_81948:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,0x10(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x18(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x20(%rbp)
	movq 0x30(%rbp),%r14
	movq %r14,0x28(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x30(%rbp)
	movq 0x40(%rbp),%r14
	movq %r14,0x38(%rbp)
	movq 0x48(%rbp),%r14
	movq %r14,0x40(%rbp)
	movb 0x0(%r15),%r14b
	testb %r14b,%r14b
	jnz L_407889
L_81949:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407889:
L_81950:
	movq 0x8(%rbp),%r15
	movb $0x0,0x0(%r15)
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq $0x1,0x0(%r15)
	movq 0x0(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x0(%rbp)
	jmp loop_3846
.text
.p2align 0x4
.globl loop_3846
.hidden loop_3846
loop_3846:
loopS_11:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_81953
L_81975:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_81976+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_81976
.p2align 0x4
.long 0x45F
L_81976:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_81953:
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_407892
L_81954:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF43,%r15
	je L_407891
	cmpq $0xF44,%r15
	je L_407890
L_81955:
	movq 0x0(%r14),%r15
L_81956:
	movq %r15,0x0(%rbp)
	jmp unify_7
.p2align 0x4
L_407890:
L_81973:
	movq 0x8(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x0(%r14),%r15
L_81964:
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x20,%rbp
	leaq (L_81965+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3846
.p2align 0x4
L_407891:
L_81957:
	movq 0x8(%r14),%r13
	movq %r13,0x10(%rbp)
	movq 0x0(%r14),%r15
L_81958:
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x20,%rbp
	leaq (L_81959+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unify_7
.p2align 0x4
L_407892:
L_81971:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x4E5
L_81965:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x10(%rbp),%r14
	cmpq $0x1,%r14
	je L_81971
L_81966:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF43,%r15
	je L_407895
	cmpq $0xF44,%r15
	je L_407894
L_81967:
	movq 0x0(%r14),%r15
	jmp L_81956
.p2align 0x4
L_407894:
L_81969:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x10(%rbp)
	jmp L_81964
.p2align 0x4
L_407895:
L_81968:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x10(%rbp)
	jmp L_81958
.p2align 0x4
.long 0x4E5
L_81959:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x10(%rbp),%r14
	cmpq $0x1,%r14
	je L_81971
L_81960:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF43,%r15
	je L_407898
	cmpq $0xF44,%r15
	je L_407897
L_81961:
	movq 0x0(%r14),%r15
	jmp L_81956
.p2align 0x4
L_407897:
L_81963:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x10(%rbp)
	jmp L_81964
.p2align 0x4
L_407898:
L_81962:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x10(%rbp)
	jmp L_81958
.text
.p2align 0x4
.globl unify_7
.hidden unify_7
unify_7:
L_81977:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_81978
L_82092:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82093+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82093
.p2align 0x4
.long 0x45F
L_82093:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_81978:
	movq 0x8(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r15
	shrq $0x1,%r15
	cmpq $0xF40,%r15
	je L_407906
	cmpq $0xF41,%r15
	je L_407905
L_81979:
	movq 0x0(%r13),%r14
	movq 0x0(%rbp),%r15
.p2align 0x4,,0x7
L_81980:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xF3F,%r13
	jne L_81981
L_81982:
	movq 0x0(%r15),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF40,%r15
	je L_407902
	cmpq $0xF41,%r15
	je L_407900
L_81983:
	movq 0x0(%r14),%r14
	movq %r13,%r15
	jmp L_81980
.p2align 0x4
L_407900:
L_82087:
	movq %r13,%r15
L_82088:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF41,%r14
	jne L_407901
L_82089:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407901:
L_81981:
	movq (globalObjptr+0x2298)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407902:
L_81984:
	movq %r14,0x0(%rbp)
	movq %r13,0x8(%rbp)
	movq %r14,0x10(%rbp)
L_81985:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	jne L_81981
L_81986:
	movq 0x0(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_81987+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407905:
L_82091:
	movq 0x0(%rbp),%r15
	jmp L_82088
.p2align 0x4
L_407906:
L_82090:
	movq %r13,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r13,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_81985
.p2align 0x4
.long 0x51E
L_81987:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_81988+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
.long 0x65B
L_81988:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	cmpq %r15,0x18(%rbp)
	movq %r15,0x20(%rbp)
	je L_407908
L_81989:
	movq 0x0(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_81990+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407908:
L_82086:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x51E
L_81990:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r15,0x18(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1458,%r15
	jne L_407909
L_81992:
	movq 0x8(%r14),%r15
	movq %r15,0x18(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_81993+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407909:
L_81991:
	movq (globalObjptr+0x1500)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x65B
L_81993:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r15,0x20(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1458,%r15
	jne L_81991
L_81994:
	movq 0x8(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_81995+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
.long 0x4DD
L_81995:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_81996+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
.long 0x654
L_81996:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_81997
L_82084:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82085+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82085
.p2align 0x4
.long 0x4DE
L_82085:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_81997:
	movq 0x28(%rbp),%r15
	movq 0x8(%rbp),%r14
	cmpq %r14,%r15
	je L_82004
L_81998:
	movq 0x0(%r15),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0x1458,%r11
	jne L_81999
L_82000:
	movl 0x0(%r13),%r11d
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r10
	shrq $0x1,%r10
	cmpq $0x1458,%r10
	jne L_81999
L_82001:
	movl 0x0(%r13),%r10d
	cmpl %r10d,%r11d
	jl L_407931
L_82002:
	movq $0x28B3,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x10,%r12
	movq %r15,0x0(%r13)
	movq %r14,%r9
	shrq $0x8,%r9
	movq (gcState+0x3C8)(%rip),%r8
	movb $0x1,0x0(%r8,%r9,1)
	movq %r13,0x0(%r14)
	cmpl %r11d,%r10d
	jne L_407929
L_82073:
	movq 0x0(%r15),%r14
	movq %r14,%r13
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	movq %r11,%r10
	shrq $0x1,%r10
	cmpq $0x1458,%r10
	jne L_407928
L_82074:
	movl 0x0(%r13),%r11d
	incl %r11d
	jo L_407927
L_82076:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1458,%r13
	jne L_407926
L_82077:
	movq 0x8(%r14),%r13
	movq $0x28B1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r11d,0x0(%r14)
	movq %r13,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r8,%r13,1)
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	je L_407922
L_82079:
	movq 0x38(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq 0x30(%r15),%r15
	movq %r15,0x18(%rbp)
	movq %r14,0x50(%rbp)
L_82028:
	movq 0x20(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	je L_407921
L_82035:
	movq 0x38(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x30(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x68(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x70(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x78(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x80(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x88(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x90(%rbp)
	movq 0x50(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movl %r11d,0x98(%rbp)
	movslq %r11d,%r10
	cmpq %r13,%r10
	jne L_82037
L_82038:
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%ecx
	movslq %ecx,%r13
	cmpq %r13,%r15
	jne L_407919
L_82040:
	cmpl %ecx,%r11d
	jne L_82042
L_82043:
	cmpl $0x0,%r11d
	jl L_407917
L_82044:
	xorl %ecx,%ecx
loop_950:
	cmpl 0x98(%rbp),%ecx
	jnl L_407911
L_82067:
	movl %ecx,%r15d
	incl %r15d
	movl %r15d,0x20(%rbp)
	movslq %ecx,%r15
	movq %r15,%r14
	salq $0x4,%r14
	movq 0x50(%rbp),%r13
	movq 0x8(%r13,%r14,1),%r11
	movq %r11,0xB0(%rbp)
	salq $0x4,%r15
	movq 0x90(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0xA8(%rbp)
	addq $0xA8,%rbp
	leaq (L_82068+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unify_7
.p2align 0x4
L_407911:
L_82045:
	movq 0x58(%rbp),%rsp
	movb 0x0(%rsp),%dil
	movq 0x8(%rbp),%rsi
	movb 0x0(%rsi),%spl
	testb %spl,%spl
	jnz L_407913
L_82046:
	testb %dil,%dil
	jnz L_407912
L_82047:
	movq 0x18(%rbp),%r8
	movq 0x28(%rbp),%r9
	movq 0x30(%rbp),%r10
	movq 0x38(%rbp),%r11
	movq 0x40(%rbp),%r13
	movq 0x48(%rbp),%r14
	movq 0x50(%rbp),%r15
	movl $0x0,0x8(%rbp)
L_82048:
	movq $0x286F,0x0(%r12)
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %rsp,0x18(%rbp)
	movq %r15,0x0(%rsp)
	movq %r14,0x8(%rsp)
	movq %r13,0x10(%rsp)
	movq %r11,0x18(%rsp)
	movq %r10,0x20(%rsp)
	movq %r9,0x28(%rsp)
	movq %r8,0x30(%rsp)
	movq %rsi,0x38(%rsp)
	addq $0x48,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_82049+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407912:
L_82056:
	movl $0x1,0x8(%rbp)
	movq 0x58(%rbp),%rsp
	movq 0x60(%rbp),%r8
	movq 0x68(%rbp),%r9
	movq 0x70(%rbp),%r10
	movq 0x78(%rbp),%r11
	movq 0x80(%rbp),%r13
	movq 0x88(%rbp),%r14
	movq 0x90(%rbp),%r15
	xchgq %rsp,%rsi
	jmp L_82048
.p2align 0x4
L_407913:
L_82057:
	testb %dil,%dil
	jnz L_407914
L_82058:
	movq 0x18(%rbp),%r8
	movq 0x28(%rbp),%r9
	movq 0x30(%rbp),%r10
	movq 0x38(%rbp),%r11
	movq 0x40(%rbp),%r13
	movq 0x48(%rbp),%r14
	movq 0x50(%rbp),%r15
	movl $0x1,0x8(%rbp)
	jmp L_82048
.p2align 0x4
L_407914:
L_82059:
	movq 0x88(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x48(%rbp),%r15
	movq 0x0(%r15),%r13
	cmpq $0x1,%r14
	je L_407916
L_82060:
L_82061:
	cmpq $0x1,%r13
	je L_407915
L_82062:
L_82063:
	movq $0x1E89,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
L_82064:
	movq 0x48(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%rsp
	movb $0x1,0x0(%rsp,%r13,1)
	movq %r15,0x0(%r14)
	movq 0x8(%rbp),%rsi
	movq 0x18(%rbp),%r8
	movq 0x28(%rbp),%r9
	movq 0x30(%rbp),%r10
	movq 0x38(%rbp),%r11
	movq 0x40(%rbp),%r13
	movq 0x50(%rbp),%r15
	movl $0x0,0x8(%rbp)
	jmp L_82048
.p2align 0x4
L_407915:
	movq %r14,%r15
	jmp L_82064
.p2align 0x4
L_407916:
L_82066:
	movq %r13,%r15
	jmp L_82064
.p2align 0x4
L_407917:
L_82042:
	movq (globalObjptr+0xCF8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407919:
L_82037:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407921:
L_82029:
	movq 0x8(%r15),%r14
	movq %r14,0x10(%rbp)
	movq $0x286F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x20(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x28(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x30(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x38(%r15)
	movq 0x0(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_82030+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407922:
L_82078:
	movq 0x8(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
L_82006:
	movq 0x20(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	jne L_407925
L_82007:
	movq 0x8(%rbp),%r11
	movq 0x0(%r11),%r14
	movq 0x8(%r13),%r11
	movq 0x0(%r11),%r10
	cmpq $0x1,%r14
	je L_407924
L_82008:
L_82009:
	cmpq $0x1,%r10
	je L_82012
L_82010:
L_82011:
	movq $0x2875,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r10,0x8(%r13)
	addq $0x18,%r12
	movq %r13,%r14
L_82012:
	movq $0x100F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	addq $0x10,%r12
	movq $0x286D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x8(%rbp)
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	addq $0x18,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_82013+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407924:
L_82020:
	movq %r10,%r14
	jmp L_82012
.p2align 0x4
L_407925:
L_82021:
	movq 0x38(%r13),%r15
	movq %r15,0x10(%rbp)
	movq 0x30(%r13),%r14
	movq 0x28(%r13),%r11
	movq 0x20(%r13),%r10
	movq 0x18(%r13),%r9
	movq 0x10(%r13),%r8
	movq 0x8(%r13),%rsp
	movq %rsp,0x18(%rbp)
	movq 0x0(%r13),%rsi
	movq %rsi,0x28(%rbp)
	movq $0x286F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x30(%rbp)
	movq %r8,0x10(%r13)
	movq %r9,0x18(%r13)
	movq %r10,0x20(%r13)
	movq %r11,0x28(%r13)
	movq %r14,0x30(%r13)
	addq $0x48,%r12
	movq %rsi,0x0(%r13)
	movq %rsp,0x8(%r13)
	movq %r15,0x38(%r13)
	movq 0x0(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_82022+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407926:
L_82015:
	movq (globalObjptr+0x1508)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407927:
L_82075:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407928:
L_81999:
	movq (globalObjptr+0x1688)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407929:
L_82004:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	je L_407930
L_82027:
	movq 0x38(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq 0x30(%r15),%r15
	movq %r15,0x18(%rbp)
	movq %r14,0x50(%rbp)
	jmp L_82028
.p2align 0x4
L_407930:
L_82005:
	movq 0x8(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
	jmp L_82006
.p2align 0x4
L_407931:
L_82080:
	movq $0x28B3,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x10,%r12
	movq %r14,0x0(%r13)
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r13,0x0(%r15)
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	je L_407932
L_82082:
	movq 0x38(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x28(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x20(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq 0x30(%r15),%r15
	movq %r15,0x18(%rbp)
	movq %r14,0x50(%rbp)
	jmp L_82028
.p2align 0x4
L_407932:
L_82081:
	movq 0x8(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
	jmp L_82006
.p2align 0x4
.long 0x1101
L_82068:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82069
L_82070:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA8,%rbp
	leaq (L_82071+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82071
.p2align 0x4
.long 0x1102
L_82071:
	addq $0xFFFFFFFFFFFFFF58,%rbp
L_82069:
	movl 0x20(%rbp),%ecx
	jmp loop_950
.p2align 0x4
.long 0x490
L_82049:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82050
L_82054:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82055+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82055
.p2align 0x4
.long 0x4B1
L_82055:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82050:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1458,%r13
	jne L_82015
L_82051:
	movl 0x0(%r14),%r13d
	movq $0x28B1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x18(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	movl 0x8(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_407938
L_82052:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407938:
L_82053:
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	jmp dontFlatten_2
.p2align 0x4
.long 0x10FF
L_82030:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82031
L_82033:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_82034+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82034
.p2align 0x4
.long 0x1100
L_82034:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_82031:
	movq 0x18(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1458,%r13
	jne L_82015
L_82032:
	movl 0x0(%r14),%r13d
	movq $0x28B1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x58(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x0(%rbp)
	movq $0x3207,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x8(%rbp)
	jmp loop_3845
.p2align 0x4
.long 0x521
L_82013:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82014
L_82017:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82018+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82018
.p2align 0x4
.long 0x4E8
L_82018:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_82014:
	movq 0x10(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1458,%r13
	jne L_82015
L_82016:
	movl 0x0(%r14),%r13d
	movq $0x28B1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x8(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x5F5
L_82022:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82023
L_82025:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82026+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82026
.p2align 0x4
.long 0x4F0
L_82026:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82023:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1458,%r13
	jne L_82015
L_82024:
	movl 0x0(%r14),%r13d
	movq $0x28B1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x0(%rbp)
	movq $0x3203,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x8(%rbp)
	jmp loop_3845
.text
.p2align 0x4
.globl loop_3845
.hidden loop_3845
loop_3845:
loopS_12:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82129
L_82094:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_407954
L_82095:
	movq 0x0(%rbp),%r10
	cmpq $0x1,%r10
	je L_407953
L_82096:
	movq 0xFFFFFFFFFFFFFFF8(%r10),%r15
	shrq $0x1,%r15
	cmpq $0x1439,%r15
	je L_407950
	cmpq $0x143A,%r15
	je L_407949
L_82097:
	movq 0x18(%r10),%r11
	movq 0x10(%r10),%r13
	movq 0x8(%r10),%r14
	movq 0x0(%r10),%r15
L_82098:
	movq $0x100B,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r11,0x0(%r10)
	movq %r13,0x8(%r10)
	movq %r14,0x10(%r10)
	movq %r15,0x18(%r10)
	addq $0x28,%r12
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1902,%r14
	je L_407948
	cmpq $0x1903,%r14
	je L_407947
L_82099:
	movq %r10,0x18(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x10(%rbp)
	jmp x_1465
.p2align 0x4
L_407947:
L_82101:
	movq %r10,0x18(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x10(%rbp)
	jmp x_1465
.p2align 0x4
L_407948:
L_82100:
	movq %r10,0x18(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x8(%rbp)
	movq %r14,0x10(%rbp)
	jmp x_1465
.p2align 0x4
L_407949:
L_82127:
	movq 0x8(%r10),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r10),%r15
L_82111:
	movq %r15,0x20(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x20,%rbp
	leaq (L_82112+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3845
.p2align 0x4
L_407950:
L_82102:
	movq 0x8(%r10),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%r10),%r15
L_82103:
	movq 0x8(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0x1902,%r13
	je L_407952
	cmpq $0x1903,%r13
	je L_407951
L_82104:
	movq %r15,0x38(%rbp)
	movq 0x10(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x30(%rbp)
	addq $0x20,%rbp
	leaq (L_82105+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1465
.p2align 0x4
L_407951:
L_82126:
	movq %r15,0x38(%rbp)
	movq 0x10(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x30(%rbp)
	addq $0x20,%rbp
	leaq (L_82105+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1465
.p2align 0x4
L_407952:
L_82125:
	movq %r15,0x38(%rbp)
	movq 0x10(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x30(%rbp)
	addq $0x20,%rbp
	leaq (L_82105+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1465
.p2align 0x4
L_407953:
L_82119:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407954:
L_82129:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82130+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82130
.p2align 0x4
.long 0x45F
L_82130:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_82095
.p2align 0x4
.long 0x4E5
L_82112:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82113
L_82120:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82121+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82121
.p2align 0x4
.long 0x4E8
L_82121:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_82113:
	movq 0x10(%rbp),%r10
	cmpq $0x1,%r10
	je L_82119
L_82114:
	movq 0xFFFFFFFFFFFFFFF8(%r10),%r15
	shrq $0x1,%r15
	cmpq $0x1439,%r15
	je L_407957
	cmpq $0x143A,%r15
	je L_407956
L_82115:
	movq 0x18(%r10),%r11
	movq 0x10(%r10),%r13
	movq 0x8(%r10),%r14
	movq 0x0(%r10),%r15
	jmp L_82098
.p2align 0x4
L_407956:
L_82117:
	movq 0x0(%r10),%r15
	movq 0x8(%r10),%r10
	movq %r10,0x10(%rbp)
	jmp L_82111
.p2align 0x4
L_407957:
L_82116:
	movq 0x0(%r10),%r15
	movq 0x8(%r10),%r10
	movq %r10,0x10(%rbp)
	jmp L_82103
.p2align 0x4
.long 0x4E5
L_82105:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82106
L_82123:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82124+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82124
.p2align 0x4
.long 0x4E8
L_82124:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_82106:
	movq 0x10(%rbp),%r10
	cmpq $0x1,%r10
	je L_82119
L_82107:
	movq 0xFFFFFFFFFFFFFFF8(%r10),%r15
	shrq $0x1,%r15
	cmpq $0x1439,%r15
	je L_407961
	cmpq $0x143A,%r15
	je L_407960
L_82108:
	movq 0x18(%r10),%r11
	movq 0x10(%r10),%r13
	movq 0x8(%r10),%r14
	movq 0x0(%r10),%r15
	jmp L_82098
.p2align 0x4
L_407960:
L_82110:
	movq 0x0(%r10),%r15
	movq 0x8(%r10),%r10
	movq %r10,0x10(%rbp)
	jmp L_82111
.p2align 0x4
L_407961:
L_82109:
	movq 0x0(%r10),%r15
	movq 0x8(%r10),%r10
	movq %r10,0x10(%rbp)
	jmp L_82103
.text
.p2align 0x4
.globl x_1465
.hidden x_1465
x_1465:
L_82131:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82132
L_82157:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82158
.p2align 0x4
.long 0x4AE
L_82158:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_82132:
	movq 0x18(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_82133+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x103B
L_82133:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x70(%rbp),%r14
	movq %r14,0x60(%rbp)
	movq 0x78(%rbp),%r14
	movq %r14,0x68(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	movl %r15d,%ecx
	movslq %ecx,%r14
	cmpq %r14,%r15
	jne L_407973
L_82135:
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_951:
	cmpl %ebx,%ecx
	je L_407968
L_82136:
	movslq %ebx,%r14
	cmpq %r15,%r14
	jnb L_407967
L_82138:
	salq $0x4,%r14
	movq 0x68(%rbp),%r13
	movl 0x0(%r13,%r14,1),%r11d
	testl %r11d,%r11d
	jnz L_407966
L_82139:
	incl %ebx
	jo L_407965
L_82141:
	jmp loop_951
.p2align 0x4
L_407965:
L_82140:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407966:
L_82143:
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp unify_7
.p2align 0x4
L_407967:
L_82137:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407968:
L_82144:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82145
L_82155:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_82156+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82156
.p2align 0x4
.long 0x1103
L_82156:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_82145:
	cmpq $0x1,0x58(%rbp)
	je L_82143
L_82146:
L_82147:
	movq 0x0(%rbp),%r14
	movb 0x0(%r14),%r15b
	testb %r15b,%r15b
	jnz L_407969
L_82148:
	movq 0x28(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x8(%rbp)
	jmp unify_7
.p2align 0x4
L_407969:
L_82149:
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r15
	cmpq $0x1,%r15
	je L_407970
L_82150:
L_82151:
	movq $0x1E87,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,%r15
L_82152:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq 0x10(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp coerceProd_0
.p2align 0x4
L_407970:
L_82153:
	movq $0x1E85,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	jmp L_82152
.p2align 0x4
L_407973:
L_82134:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl coerceProd_0
.hidden coerceProd_0
coerceProd_0:
L_82159:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82160
L_82174:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82175+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82175
.p2align 0x4
.long 0x45B
L_82175:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_82160:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x18(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82162
L_82163:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r11
	cmpq %r14,%r11
	jne L_407977
L_82165:
	cmpl %r13d,%ecx
	jne L_82167
L_82168:
	cmpl $0x0,%r13d
	jl L_407975
L_82169:
	xorl %ecx,%ecx
loop_952:
	cmpl 0x18(%rbp),%ecx
	jnl L_407974
L_82171:
	movl %ecx,%r15d
	incl %r15d
	movl %r15d,0x1C(%rbp)
	movslq %ecx,%r15
	movq %r15,%r14
	salq $0x4,%r14
	movq 0x8(%rbp),%r13
	movq 0x8(%r13,%r14,1),%r11
	movq %r11,0x30(%rbp)
	salq $0x4,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0x28(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_82172+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp coerce_1
.p2align 0x4
L_407974:
L_82170:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407975:
L_82167:
	movq (globalObjptr+0xCF8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407977:
L_82162:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0xB9C
L_82172:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movl 0x1C(%rbp),%ecx
	jmp loop_952
.text
.p2align 0x4
.globl coerce_1
.hidden coerce_1
coerce_1:
L_82176:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82177
L_82204:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82205+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82205
.p2align 0x4
.long 0x45B
L_82205:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_82177:
	movq 0x8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_407983
	cmpq $0xF41,%r14
	je L_407981
L_82178:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF3F,%r14
	jne L_407980
L_82180:
	jmp unify_7
.p2align 0x4
L_407980:
L_82179:
	movq (globalObjptr+0x22A0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407981:
L_82202:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF41,%r14
	jne L_82179
L_82203:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407983:
L_82181:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	jne L_82179
L_82182:
	movq 0x8(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_82183+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
.long 0x51E
L_82183:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_82184+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
.long 0x65B
L_82184:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82185
L_82200:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82201+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82201
.p2align 0x4
.long 0x63C
L_82201:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82185:
	movq 0x18(%rbp),%r15
	cmpq %r15,0x20(%rbp)
	je L_407986
L_82186:
	movq $0x100B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x18(%rbp)
	addq $0x28,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x10(%rbp),%r13
	movq %r13,0x18(%r15)
	movq %r14,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_82187+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp root_9
.p2align 0x4
L_407986:
L_82199:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x65B
L_82187:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82188
L_82197:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82198+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82198
.p2align 0x4
.long 0x63C
L_82198:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82188:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1458,%r15
	jne L_407990
L_82190:
	movq 0x8(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0x1436,%r14
	je L_407988
L_82196:
	movq 0x38(%r15),%r14
	movq %r14,0x0(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	jmp x_1465
.p2align 0x4
L_407988:
L_82191:
	movq 0x8(%r15),%r14
	movq 0x0(%r14),%r15
	cmpq $0x1,%r15
	je L_407989
L_82192:
L_82193:
	movq $0x2873,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq 0x18(%rbp),%r11
	movq %r11,0x0(%r13)
	movq %r14,%r15
	movq %r13,%r14
L_82194:
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407989:
L_82195:
	movq $0x2871,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x28,%r12
	movq 0x10(%rbp),%r11
	movq %r11,0x0(%r13)
	movq 0x0(%rbp),%r11
	movq %r11,0x8(%r13)
	movq 0x8(%rbp),%r11
	movq %r11,0x10(%r13)
	movq %r11,0x18(%r13)
	movq %r14,%r15
	movq %r13,%r14
	jmp L_82194
.p2align 0x4
L_407990:
L_82189:
	movq (globalObjptr+0x1500)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1381
.hidden x_1381
x_1381:
L_82206:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82214
L_82207:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_407993
L_82208:
	movq 0x0(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x20D6,%r15
	je L_407992
L_82213:
	movq 0x8(%r14),%r15
	movq 0x0(%r14),%r13
	movq $0x1011,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x8(%r14)
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq $0x7FFFFFFF,0x0(%r14)
	movq $0x100F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x286D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq $0x28B1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x1E81,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
weak_1:
	movq $0x1E7F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x0(%rbp)
	addq $0x10,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407992:
L_82209:
	movq 0x0(%r14),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (weak_0+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1381
.p2align 0x4
L_407993:
L_82214:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82215+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82215
.p2align 0x4
.long 0x451
L_82215:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	jmp L_82208
.p2align 0x4
.long 0x1
weak_0:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82210
L_82211:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82212+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82212
.p2align 0x4
.long 0x451
L_82212:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82210:
	movq 0x0(%rbp),%r15
	jmp weak_1
.text
.p2align 0x4
.globl finalTypes_0
.hidden finalTypes_0
finalTypes_0:
L_82216:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82217
L_82280:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82281+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82281
.p2align 0x4
.long 0x45F
L_82281:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82217:
	movq 0x8(%rbp),%r15
	movq 0x58(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xF40,%r13
	je L_407996
L_82218:
	movq %r15,0x10(%rbp)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_82219+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_407996:
L_82223:
	movq %r14,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_82224+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x1
L_82219:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82220
L_82221:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82222
.p2align 0x4
.long 0x451
L_82222:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82220:
	movq $0x3949,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x0(%rbp)
	movl $0x1,0x8(%rbp)
	jmp tabulate_7
.p2align 0x4
.long 0x4E5
L_82224:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82225
L_82278:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82279+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82279
.p2align 0x4
.long 0x1107
L_82279:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_82225:
	movq 0x20(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_407999
L_82226:
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_407999:
L_82227:
	movq 0x50(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r14,%r13
	jne L_408006
L_82230:
	decl %ecx
	jo L_82231
L_82232:
	movq $0x1,0x28(%rbp)
loop_953:
	cmpl $0x0,%ecx
	jl L_408000
L_82233:
	movl %ecx,%r15d
	decl %r15d
	movl %r15d,0x30(%rbp)
	movslq %ecx,%r15
	movq %r15,%r14
	salq $0x4,%r14
	movq 0x50(%rbp),%r13
	movl 0x0(%r13,%r14,1),%r11d
	movl %r11d,0x34(%rbp)
	salq $0x4,%r15
	movq 0x8(%r13,%r15,1),%r14
	movq %r14,0x60(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x60,%rbp
	leaq (L_82234+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalTypes_0
.p2align 0x4
L_408000:
L_82246:
	movq $0xBC7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x30(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408004
L_82247:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_82248:
	incl %ecx
	movl %ecx,0x28(%rbp)
	jo L_408003
L_82249:
	cmpq $0x1,%r15
	je L_408001
L_82250:
	movq 0x8(%r15),%r15
	jmp L_82248
.p2align 0x4
L_408001:
L_82251:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82252
L_82275:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_82276+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82276
.p2align 0x4
.long 0x80F
L_82276:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_82252:
	movl 0x28(%rbp),%ecx
L_82253:
	movl %ecx,0x58(%rbp)
	movq $0x394B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x50(%rbp)
	addq $0x50,%rbp
	leaq (x_241+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408003:
L_82231:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408004:
L_82277:
	xorl %ecx,%ecx
	jmp L_82253
.p2align 0x4
L_408006:
L_82229:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1104
L_82234:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82229
L_82236:
	decl %r13d
	jo L_82231
L_82237:
	movl %r13d,0x48(%rbp)
.p2align 0x4,,0x7
loop_954:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408010
.p2align 0x4,,0x7
L_82238:
	movl 0x48(%rbp),%ebx
	cmpl $0x0,%ebx
	jl L_408009
L_82239:
	movl %ebx,%r14d
	decl %r14d
	movslq %ebx,%r15
	movq %r15,%r13
	salq $0x4,%r13
	movq 0x38(%rbp),%r11
	movl 0x0(%r11,%r13,1),%ecx
	salq $0x4,%r15
	movq 0x8(%r11,%r15,1),%r13
	movl 0x34(%rbp),%r11d
	testl %r11d,%r11d
	jz L_408008
L_82242:
	movl $0x1,%ecx
	movq %r13,%r15
	movl %r14d,%ebx
L_82241:
	movl %ebx,0x48(%rbp)
	movq $0x10AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq $0x273F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x28(%rbp)
	jmp loop_954
.p2align 0x4
L_408008:
	movq %r13,%r15
	movl %r14d,%ebx
	jmp L_82241
.p2align 0x4
L_408009:
L_82243:
	movl 0x30(%rbp),%ecx
	jmp loop_953
.p2align 0x4
L_408010:
L_82244:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82245+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82245
.p2align 0x4
.long 0x1105
L_82245:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_82238
.p2align 0x4
.long 0x1106
x_241:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x18(%rbp),%r14
	movb 0x0(%r14),%r15b
	testb %r15b,%r15b
	jnz L_408019
L_82254:
	movq 0x10(%rbp),%r15
	movl 0x4(%r15),%r14d
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	movq %r11,0x18(%rbp)
	movq 0x40(%rbp),%r15
	cmpq $0x1,%r15
	je L_408018
	cmpq $0x2,%r15
	je L_408017
L_82255:
	movl 0x0(%r15),%r14d
	movl %r14d,%ecx
L_82256:
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ebx
	movslq %ebx,%r13
	cmpq %r14,%r13
	jne L_82229
L_82258:
	cmpl $0x0,%ebx
	jl L_408015
L_82259:
	movl %ecx,0x30(%rbp)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_955:
	cmpl %ebx,%ecx
	jnl L_408013
L_82270:
	movslq %ecx,%r15
	salq $0x4,%r15
	movl 0x30(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x28(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x30(%rbp)
	incl %ecx
	jmp loop_955
.p2align 0x4
L_408013:
L_82260:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82261
L_82268:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_82269+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82269
.p2align 0x4
.long 0xA26
L_82269:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_82261:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movl 0x30(%rbp),%r14d
	movl %r14d,0x38(%rbp)
	movq %r15,0x30(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x30,%rbp
	leaq (L_82262+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408015:
L_82271:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408017:
L_82273:
	movl %r13d,%ecx
	jmp L_82256
.p2align 0x4
L_408018:
	movl %r14d,%ecx
	jmp L_82256
.p2align 0x4
L_408019:
L_82274:
	movq 0x28(%rbp),%r15
L_82265:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x459
L_82262:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82263
L_82266:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82267+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82267
.p2align 0x4
.long 0x508
L_82267:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82263:
	movq $0x3949,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	movl $0x1,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_82264+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
.long 0x459
L_82264:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_82265
.text
.p2align 0x4
.globl tabulate_7
.hidden tabulate_7
tabulate_7:
L_82282:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82283
L_82377:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82378+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82378
.p2align 0x4
.long 0x457
L_82378:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82283:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_408059
L_82284:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408058
L_82285:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1463,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82286+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82286
.p2align 0x4
.long 0x452
L_82286:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_82287:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_956:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408057
.p2align 0x4,,0x7
L_82288:
	movq 0x18(%rbp),%r15
	cmpq 0x10(%rbp),%r15
	jnl L_408056
L_82290:
	movl %r15d,%r14d
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_408055
L_82291:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0x1CA1,%rax
	cmpq $0x7,%rax
	ja L_408021
	leaq jumpTable_212(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_212:
.quad L_408038,L_408037,L_408036,L_408035,L_408033,L_408028,L_408023,L_408022
.text
.p2align 0x4
L_408021:
L_82292:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movslq %r14d,%r13
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq %r11,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_82293+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408022:
L_82367:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movslq %r14d,%r13
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq %r11,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_82368+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408023:
L_82359:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
.p2align 0x4,,0x7
loop_958:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movl 0x20(%rbp),%r14d
	movslq %r14d,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	cmpq $0x1,%r10
	jne L_408025
L_82365:
	incl %r14d
	jo L_408024
L_82366:
	movl %r14d,0x20(%rbp)
	jmp loop_958
.p2align 0x4
L_408024:
L_82305:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408025:
L_82360:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408027
.p2align 0x4,,0x7
L_82361:
	movq 0x30(%rbp),%r14
	movl 0x0(%r14),%r13d
	movq 0x8(%r14),%r15
	movq $0x10AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movl 0x20(%rbp),%r13d
	incl %r13d
	jo L_82305
L_82362:
	movq 0x28(%rbp),%r11
	movl %r13d,0x0(%r11)
	movq %r14,%r15
.p2align 0x4,,0x7
L_82295:
	movq 0x8(%r15),%r14
	movq 0x18(%rbp),%r13
	movq %r13,%r11
	salq $0x4,%r11
	movq 0x8(%rbp),%r10
	movl 0x0(%r15),%r9d
	movl %r9d,0x0(%r10,%r11,1)
	movq %r10,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r13,%r15
	salq $0x4,%r15
	movq %r14,0x8(%r10,%r15,1)
	incq %r13
	movq %r13,0x18(%rbp)
	jmp loop_956
.p2align 0x4
L_408027:
L_82363:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82364+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82364
.p2align 0x4
.long 0x578
L_82364:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_82361
.p2align 0x4
L_408028:
L_82351:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
.p2align 0x4,,0x7
loop_957:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movl 0x20(%rbp),%r14d
	movslq %r14d,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	cmpq $0x1,%r10
	jne L_408030
L_82357:
	incl %r14d
	jo L_82305
L_82358:
	movl %r14d,0x20(%rbp)
	jmp loop_957
.p2align 0x4
L_408030:
L_82352:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408032
.p2align 0x4,,0x7
L_82353:
	movq 0x30(%rbp),%r14
	movl 0x0(%r14),%r13d
	movq 0x8(%r14),%r15
	movq $0x10AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movl 0x20(%rbp),%r13d
	incl %r13d
	jo L_82305
L_82354:
	movq 0x28(%rbp),%r11
	movl %r13d,0x0(%r11)
	movq %r14,%r15
	jmp L_82295
.p2align 0x4
L_408032:
L_82355:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82356+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82356
.p2align 0x4
.long 0x578
L_82356:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_82353
.p2align 0x4
L_408033:
L_82348:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_408034
L_82349:
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r14,1)
	movq %r13,0x0(%r15)
	movq %r11,%r15
	jmp L_82295
.p2align 0x4
L_408034:
L_82350:
	movq (globalObjptr+0x4B0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408035:
L_82347:
	movq 0x0(%rbp),%r14
	movl 0x0(%r14),%r13d
	movq 0x8(%r14),%r15
	movq $0x10AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r13d,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_82295
.p2align 0x4
L_408036:
L_82342:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	movq 0x10(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	salq $0x4,%r14
	movq 0x8(%r15),%r13
	movl 0x0(%r13,%r14,1),%r11d
	movl %r11d,0x20(%rbp)
	addq $0x30,%rbp
	leaq (L_82343+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1377
.p2align 0x4
L_408037:
L_82337:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	salq $0x4,%r14
	movq 0x8(%r15),%r11
	movl 0x0(%r11,%r14,1),%r10d
	movl %r10d,0x20(%rbp)
	salq $0x4,%r13
	movq 0x8(%r11,%r13,1),%r14
	movq %r14,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_82338+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp simplifyType_1
.p2align 0x4
L_408038:
L_82298:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r11
	movq 0x0(%r11),%r10
	movq 0x8(%r10),%r14
	movq 0x0(%r10),%r9
	movq %r9,0x20(%rbp)
	movq 0x8(%r11),%r10
	movq 0x0(%r10,%r15,8),%r9
	movq 0x10(%r9),%r8
	movq %r8,0x28(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_408054
L_82300:
	movq %r15,0x0(%r11)
	movq 0x0(%r8),%r11
	cmpq $0x1,%r11
	je L_408053
L_82301:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	movl $0x0,0x30(%rbp)
	movq %r11,%r15
.p2align 0x4,,0x7
L_82303:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408052
L_82319:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD54,%r11
	jne L_408051
L_82320:
	movq 0x8(%r13),%r11
	movq %r11,0x38(%rbp)
	cmpq %r14,0x0(%r13)
	movq %r14,(localObjptr+0x18)(%rip)
	je L_408044
L_82304:
	movl 0x30(%rbp),%r11d
	incl %r11d
	movl %r11d,0x34(%rbp)
	jo L_82305
L_82306:
	cmpq $0x1,%r15
	je L_408039
L_82307:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movl %r11d,0x30(%rbp)
	movq (localObjptr+0x18)(%rip),%r14
	jmp L_82303
.p2align 0x4
L_408039:
L_82308:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82309
L_82317:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82318+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82318
.p2align 0x4
.long 0x760
L_82318:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82309:
	movl 0x34(%rbp),%ecx
L_82310:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408041
L_82312:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_82314
L_82316:
	movl %ecx,0x0(%r15)
L_82314:
	movq $0x1AA9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
L_82315:
	movq (globalObjptr+0xBC8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408041:
L_82311:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408044:
L_82322:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408050
.p2align 0x4,,0x7
L_82323:
	movl 0x30(%rbp),%r13d
	movslq %r13d,%r15
	movq (globalObjptr+0x1070)(%rip),%r11
	addq 0x0(%r11),%r15
	jo L_82311
L_82324:
	movq %r15,0x0(%r11)
	movq (globalObjptr+0x1078)(%rip),%r11
	cmpl %r13d,0x0(%r11)
	jl L_408047
L_82325:
	movq 0x38(%rbp),%r13
	cmpq $0x1,%r13
	je L_82315
L_82326:
	movq 0x18(%r13),%r15
	movq 0x10(%r13),%r14
L_82327:
	movq 0x0(%r15),%r13
	cmpq $0x1,%r13
	je L_408045
L_82328:
	movq 0x8(%r13),%r11
	movq %r15,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r13,1)
	movq %r11,0x0(%r15)
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	jmp L_82295
.p2align 0x4
L_408045:
L_82329:
	movq (globalObjptr+0x7E8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408047:
L_82331:
	movq (globalObjptr+0x1078)(%rip),%r13
	movl 0x30(%rbp),%r11d
	movl %r11d,0x0(%r13)
	movq 0x38(%rbp),%r13
	cmpq $0x1,%r13
	je L_82315
L_82332:
	movq 0x18(%r13),%r15
	movq 0x10(%r13),%r14
	jmp L_82327
.p2align 0x4
L_408050:
L_82334:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82335+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82335
.p2align 0x4
.long 0x1108
L_82335:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_82323
.p2align 0x4
L_408051:
	movq %r14,(localObjptr+0x18)(%rip)
	jmp L_82304
.p2align 0x4
L_408052:
	movq %r14,(localObjptr+0x18)(%rip)
	jmp L_82304
.p2align 0x4
L_408053:
L_82336:
	xorl %ecx,%ecx
	jmp L_82310
.p2align 0x4
L_408054:
L_82299:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408055:
L_82372:
	movq (globalObjptr+0x4A0)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408056:
L_82289:
	movq 0x8(%rbp),%r14
	movq $0x4E3,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408057:
L_82373:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82374+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82374
.p2align 0x4
.long 0x45C
L_82374:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_82288
.p2align 0x4
L_408058:
L_82375:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408059:
L_82376:
	movq (globalObjptr+0xBC0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_82287
.p2align 0x4
.long 0x5F8
L_82293:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82294
L_82296:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82297+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82297
.p2align 0x4
.long 0x52C
L_82297:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82294:
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_82295
.p2align 0x4
.long 0x5F8
L_82368:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82369
L_82370:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82371+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82371
.p2align 0x4
.long 0x52C
L_82371:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82369:
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_82295
.p2align 0x4
.long 0xC6F
L_82343:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82344
L_82345:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82346+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82346
.p2align 0x4
.long 0x464
L_82346:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82344:
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x20(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_82295
.p2align 0x4
.long 0xC6F
L_82338:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82339
L_82340:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82341+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82341
.p2align 0x4
.long 0x464
L_82341:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82339:
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x20(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_82295
.text
.p2align 0x4
.globl get_80
.hidden get_80
get_80:
L_82379:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82469
L_82380:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408089
L_82381:
	movq 0x8(%rbp),%r11
	movq 0x60(%r11),%r14
	movq 0x58(%r11),%r10
	movq %r10,0x10(%rbp)
	movq 0x50(%r11),%r10
	movq %r10,0x18(%rbp)
	movq 0x48(%r11),%r10
	movq %r10,0x20(%rbp)
	movq 0x40(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0x38(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0x30(%r11),%r10
	movq %r10,0x38(%rbp)
	movq 0x28(%r11),%r10
	movq %r10,0x40(%rbp)
	movq 0x20(%r11),%r10
	movq %r10,0x48(%rbp)
	movq 0x18(%r11),%r10
	movq %r10,0x50(%rbp)
	movq 0x10(%r11),%r10
	movq %r10,0x58(%rbp)
	movq 0x8(%r11),%r10
	movq %r10,0x60(%rbp)
	movq 0x0(%r11),%r10
	movq %r10,0x68(%rbp)
	movq 0x0(%rbp),%r11
	movq 0x10(%r11),%r10
	movq %r10,0x70(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_408088
L_82383:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408087
L_82384:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_82386:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408086
L_82461:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xCA2,%r11
	jne L_408085
L_82462:
	movq 0x8(%r13),%r11
	cmpq %r14,0x0(%r13)
	movq %r14,(localObjptr+0x0)(%rip)
	je L_408082
L_82387:
	incl %ecx
	movl %ecx,0x78(%rbp)
	jo L_408081
L_82389:
	cmpq $0x1,%r15
	je L_408065
L_82390:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x0)(%rip),%r14
	jmp L_82386
.p2align 0x4
L_408065:
L_82391:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82392
L_82459:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_82460+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82460
.p2align 0x4
.long 0x1112
L_82460:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_82392:
	movl 0x78(%rbp),%ecx
L_82393:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408079
L_82395:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_82397
L_82458:
	movl %ecx,0x0(%r15)
L_82397:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,%r15
	andq $0x7,%r15
	cmpq $0x1,%r15
	je L_408077
	cmpq $0x2,%r15
	je L_408076
	cmpq $0x3,%r15
	je L_408075
	cmpq $0x5,%r15
	je L_408073
L_82398:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xEB0,%r15
	je L_408072
	cmpq $0xEB1,%r15
	je L_408071
	cmpq $0xEB2,%r15
	je L_408069
	cmpq $0xEB3,%r15
	je L_408068
	cmpq $0xEB4,%r15
	je L_408067
	cmpq $0xEB5,%r15
	je L_408066
L_82399:
	movq 0x0(%r14),%r15
	movq %r15,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x50(%rbp)
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_82400+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
L_408066:
L_82449:
	movq 0x0(%r14),%r15
	movq %r15,0x80(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82450+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408067:
L_82448:
	movq 0x0(%r14),%r15
	movl 0x0(%r15),%r14d
	movl %r14d,0x88(%rbp)
	movq $0x1E4D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x80(%rbp)
	addq $0x10,%r12
	movq 0x18(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408068:
L_82434:
	movq 0x0(%r14),%r15
	movq %r15,0x80(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82435+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408069:
L_82420:
	movq 0x0(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_408070
L_82423:
	movl %r13d,0x88(%rbp)
	movq $0x3951,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x80(%rbp)
	addq $0x80,%rbp
	leaq (x_242+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408070:
L_82422:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408071:
L_82418:
	movq 0x0(%r14),%r15
	movq %r15,0x80(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82419+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408072:
L_82413:
	movq 0x0(%r14),%r15
	movq %r15,0x80(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82414+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_80
.p2align 0x4
L_408073:
L_82454:
	shrq $0x3,%r14
	movb %r14b,%dl
	movq 0x20(%rbp),%r13
	movq 0x8(%r13),%r14
	movq 0x0(%r13),%r11
	movq 0x8(%r11),%r15
	movq 0x0(%r11),%r10
	testb %dl,%dl
	jnz L_408074
L_82455:
L_82456:
	movq %r14,0x90(%rbp)
	movl 0x0(%r15),%r14d
	movl %r14d,0x88(%rbp)
	movzbq %dl,%r15
	shlq $0x3,%r15
	orq $0x5,%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408074:
L_82457:
	movq %r10,%r15
	jmp L_82456
.p2align 0x4
L_408075:
L_82453:
	movq 0x28(%rbp),%r15
L_82407:
	movq $0x1945,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	movq %r15,0x0(%rbp)
	addq $0x18,%r12
	movq 0x68(%rbp),%r15
	movq %r15,0x0(%r14)
	movq 0x70(%rbp),%r15
	movq 0x0(%r15),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r14,1)
	movq %r11,0x0(%r15)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408076:
L_82452:
	movq 0x58(%rbp),%r15
	jmp L_82407
.p2align 0x4
L_408077:
L_82451:
	movq 0x60(%rbp),%r15
	jmp L_82407
.p2align 0x4
L_408079:
L_82394:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408081:
L_82388:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408082:
L_82464:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_82394
L_82465:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_408083
L_82467:
	movl %ecx,0x0(%r15)
	movq %r11,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408083:
L_82466:
	movq %r11,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408085:
	movq %r14,(localObjptr+0x0)(%rip)
	jmp L_82387
.p2align 0x4
L_408086:
	movq %r14,(localObjptr+0x0)(%rip)
	jmp L_82387
.p2align 0x4
L_408087:
L_82468:
	xorl %ecx,%ecx
	jmp L_82393
.p2align 0x4
L_408088:
L_82382:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408089:
L_82469:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82470+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82470
.p2align 0x4
.long 0x45F
L_82470:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_82381
.p2align 0x4
.long 0x1109
L_82400:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movl 0x80(%rbp),%r15d
	movl %r15d,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82401
L_82411:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82412+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82412
.p2align 0x4
.long 0x110A
L_82412:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82401:
	movslq 0x58(%rbp),%r15
	movq 0x50(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_408092
L_82403:
	movq 0x0(%r14,%r15,8),%r13
	cmpq $0x1,%r13
	je L_408091
L_82404:
	movl 0x0(%r13),%r15d
	movl %r15d,0x88(%rbp)
	movq $0x1E47,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x80(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408091:
L_82410:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408092:
L_82402:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x8DD
L_82450:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq %r15,0x80(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1382
.p2align 0x4
.long 0xEE1
L_82405:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x78(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82406
L_82408:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_82409+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82409
.p2align 0x4
.long 0x10DE
L_82409:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_82406:
	movq 0x78(%rbp),%r15
	jmp L_82407
.p2align 0x4
.long 0x1110
L_82435:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82436
L_82446:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82447+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82447
.p2align 0x4
.long 0x110F
L_82447:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82436:
	movq $0x3949,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl $0x1,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x80(%rbp)
	movl $0x1,0x88(%rbp)
	addq $0x80,%rbp
	leaq (x_243+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
.long 0x110E
x_242:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x48(%rbp),%r14
	movl 0x0(%r14),%ebx
	movq 0x8(%r14),%r13
	movq %r13,0x58(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r13,%r14
	jne L_82422
L_82425:
	cmpl $0x0,%ecx
	jl L_408098
L_82426:
	movl %ebx,0x60(%rbp)
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_959:
	cmpl %ecx,%ebx
	jnl L_408096
L_82431:
	movslq %ebx,%r15
	salq $0x4,%r15
	movl 0x60(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x50(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x60(%rbp)
	incl %ebx
	jmp loop_959
.p2align 0x4
L_408096:
L_82427:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82428
L_82429:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82430+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82430
.p2align 0x4
.long 0x110F
L_82430:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82428:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x2,0x8(%r15)
	movq %r15,0x80(%rbp)
	movl 0x60(%rbp),%r15d
	movl %r15d,0x88(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408098:
L_82433:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x110D
L_82419:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq %r15,0x80(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1382
.p2align 0x4
.long 0x110B
L_82414:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82415
L_82416:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82417+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82417
.p2align 0x4
.long 0x110C
L_82417:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82415:
	movq 0x40(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x90(%rbp)
	movl 0x0(%r15),%r14d
	movq 0x48(%rbp),%r15
	xorl 0x0(%r15),%r14d
	movl %r14d,0x88(%rbp)
	movq $0x1E49,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
.long 0x1110
x_243:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x50(%rbp),%r14
	movl 0x0(%r14),%ebx
	movq 0x8(%r14),%r13
	movq %r13,0x60(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r14,%r13
	jne L_82422
L_82438:
	cmpl $0x0,%ecx
	jl L_82433
L_82439:
	movl %ebx,0x78(%rbp)
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_960:
	cmpl %ecx,%ebx
	jnl L_408101
L_82444:
	movslq %ebx,%r15
	salq $0x4,%r15
	movl 0x78(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x58(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x78(%rbp)
	incl %ebx
	jmp loop_960
.p2align 0x4
L_408101:
L_82440:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82441
L_82442:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x88,%rbp
	leaq (L_82443+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82443
.p2align 0x4
.long 0x1111
L_82443:
	addq $0xFFFFFFFFFFFFFF78,%rbp
L_82441:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x2,0x8(%r15)
	movq %r15,0x80(%rbp)
	movl 0x78(%rbp),%r15d
	movl %r15d,0x88(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x80,%rbp
	leaq (L_82405+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.text
.p2align 0x4
.globl x_1382
.hidden x_1382
x_1382:
L_82471:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82483
L_82472:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408105
L_82473:
	movq 0x8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x10(%rbp)
	movl 0x0(%r15),%r14d
	movq $0x3949,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movl %r14d,0x0(%r15)
	addq $0x18,%r12
	movl $0x0,0x4(%r15)
	movq 0x0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x20(%rbp)
	movl $0x1,0x28(%rbp)
	addq $0x20,%rbp
	leaq (x_244+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408105:
L_82483:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82484+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82484
.p2align 0x4
.long 0x45F
L_82484:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_82473
.p2align 0x4
.long 0x2B
x_244:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r14
	movl 0x4(%r14),%ebx
	movq 0x8(%r14),%r13
	movq %r13,0x20(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r14,%r13
	jne L_408110
L_82475:
	cmpl $0x0,%ecx
	jl L_408109
L_82476:
	movl %ebx,0x28(%rbp)
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_961:
	cmpl %ecx,%ebx
	jnl L_408107
L_82481:
	movslq %ebx,%r15
	salq $0x4,%r15
	movl 0x28(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x18(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x28(%rbp)
	incl %ebx
	jmp loop_961
.p2align 0x4
L_408107:
L_82477:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82478
L_82479:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82480+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82480
.p2align 0x4
.long 0x8B9
L_82480:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82478:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x0(%rbp)
	movl 0x28(%rbp),%r15d
	movl %r15d,0x8(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x10(%rbp)
	jmp lookup_2
.p2align 0x4
L_408109:
L_82482:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408110:
L_82474:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl simplifyType_1
.hidden simplifyType_1
simplifyType_1:
L_82485:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82593
L_82486:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408130
L_82487:
	movq 0x8(%rbp),%r13
	movq 0x10(%r13),%r11
	movq %r11,0x10(%rbp)
	movq 0x8(%r13),%r11
	movq %r11,0x18(%rbp)
	movq 0x0(%r13),%r11
	movq %r11,0x20(%rbp)
	movq 0x18(%r13),%r11
	movq 0x8(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0x0(%r11),%r10
	movq %r10,0x30(%rbp)
	movq 0x0(%rbp),%r13
	movq 0x10(%r13),%r11
	movq %r11,0x38(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r13
	movq 0x0(%r13),%r15
	incq %r15
	jo L_408129
L_82489:
	movq %r15,0x0(%r13)
	movq 0x0(%r11),%r13
	cmpq $0x1,%r13
	je L_408128
L_82490:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	movl $0x0,0x40(%rbp)
	movq %r13,%r15
.p2align 0x4,,0x7
L_82492:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_82493
L_82582:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xD50,%r13
	jne L_82493
L_82583:
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x28(%rbp),%r13
	cmpq %r13,0x0(%r14)
	je L_408122
L_82493:
	movl 0x40(%rbp),%r13d
	incl %r13d
	movl %r13d,0x44(%rbp)
	jo L_408121
L_82495:
	cmpq $0x1,%r15
	je L_408111
L_82496:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movl %r13d,0x40(%rbp)
	jmp L_82492
.p2align 0x4
L_408111:
L_82497:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82498
L_82580:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_82581+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82581
.p2align 0x4
.long 0x795
L_82581:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_82498:
	movl 0x44(%rbp),%ecx
L_82499:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408119
L_82501:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_82503
L_82579:
	movl %ecx,0x0(%r15)
L_82503:
	movq 0x30(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x28DD,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r13)
	movq %r15,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq %r13,0x0(%r15)
	movq $0x53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl $0x0,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x53,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x10,%r12
	movl $0x0,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq $0x1361,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x0(%r11)
	movq %r15,0x10(%r11)
	addq $0x20,%r12
	movq $0x1,0x8(%r11)
	movq $0x1AA1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x8(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r15)
	movq %r11,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movb $0x1,0x0(%r10,%r15,1)
	movq %r11,0x0(%r14)
L_82504:
	movq 0x28(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je L_408112
L_82505:
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408112:
L_82506:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
L_82507:
	movq %r14,%r15
	andq $0x3,%r15
	jnz L_82508
L_82510:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF24,%r15
	je L_408116
	cmpq $0xF25,%r15
	je L_408113
L_82508:
	movq 0x0(%rbp),%r15
L_82509:
	movq 0x28(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x8(%r14)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408113:
L_82517:
	movq 0x8(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x0(%r14),%r13
L_82518:
	andq $0x3,%r15
	jz L_408115
L_82519:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	movl %r15d,%r14d
	movslq %r14d,%r11
	cmpq %r15,%r11
	jne L_408114
L_82522:
	movl %r14d,0x40(%rbp)
	movq $0x3945,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (x_245+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408114:
L_82521:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408115:
L_82537:
	movq 0x20(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_82538+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_17
.p2align 0x4
L_408116:
L_82511:
	movq 0x0(%r14),%r15
	movq %r15,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_82512+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp simplifyType_1
.p2align 0x4
L_408119:
L_82500:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408121:
L_82494:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408122:
L_82585:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82586
L_82590:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_82591+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82591
.p2align 0x4
.long 0x1117
L_82591:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_82586:
	movl 0x40(%rbp),%r15d
	movslq %r15d,%r14
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r14
	jo L_82500
L_82587:
	movq %r14,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r14
	cmpl %r15d,0x0(%r14)
	jl L_408123
L_82588:
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_82504
.p2align 0x4
L_408123:
L_82589:
	movq (globalObjptr+0x1078)(%rip),%r15
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movq 0x48(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_82504
.p2align 0x4
L_408128:
L_82592:
	xorl %ecx,%ecx
	jmp L_82499
.p2align 0x4
L_408129:
L_82488:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408130:
L_82593:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82594+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82594
.p2align 0x4
.long 0x45F
L_82594:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_82487
.p2align 0x4
.long 0x796
x_245:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r15
	movl 0x4(%r15),%r14d
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	movq 0x20(%rbp),%r15
	cmpq $0x1,%r15
	je L_408137
	cmpq $0x2,%r15
	je L_408132
L_82523:
	movq (c_stackP+0x0)(%rip),%rsp
	movq (globalObjptr+0xC9C8)(%rip),%rdi
	xorq %rax,%rax
	call MLton_bug
.p2align 0x4
L_408132:
L_82536:
	movl %r13d,%ecx
L_82525:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ebx
	movslq %ebx,%r13
	cmpq %r14,%r13
	jne L_82521
L_82527:
	cmpl $0x0,%ebx
	jl L_408135
L_82528:
	movl %ecx,0x38(%rbp)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_962:
	cmpl %ebx,%ecx
	jnl L_408133
L_82533:
	movslq %ecx,%r15
	salq $0x4,%r15
	movl 0x38(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x18(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x38(%rbp)
	incl %ecx
	jmp loop_962
.p2align 0x4
L_408133:
L_82529:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82530
L_82531:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82532+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82532
.p2align 0x4
.long 0x4AB
L_82532:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_82530:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movl 0x38(%rbp),%r14d
	movl %r14d,0x40(%rbp)
	movq %r15,0x38(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_82514+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408135:
L_82535:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408137:
	movl %r14d,%ecx
	jmp L_82525
.p2align 0x4
.long 0x639
L_82538:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x18(%r15),%r14
	cmpq $0x1,0x8(%r14)
	je L_408147
L_82539:
	xorl %ecx,%ecx
L_82540:
	movq 0x18(%rbp),%r13
	movq 0x10(%r13),%r11
	movb 0x4(%r11),%r14b
	testb %r14b,%r14b
	jz L_408139
L_82541:
	testl %ecx,%ecx
	jz L_408138
L_82544:
	movq 0x8(%r13),%r14
	movq 0x0(%r14),%r14
	movq %r14,%r15
	jmp L_82509
.p2align 0x4
L_408138:
L_82543:
	movq 0x18(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13),%r13
	movq %r13,%r15
	jmp L_82509
.p2align 0x4
L_408139:
L_82545:
	testl %ecx,%ecx
	jz L_82543
L_82547:
	movq 0x20(%r13),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%rdx
	movq %rdx,0x38(%rbp)
	cmpq %rdx,%r14
	movq %r15,0x30(%rbp)
	jne L_82521
L_82549:
	testq %rdx,%rdx
	jz L_408144
L_82550:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408143
L_82551:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1569,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82552+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82552
.p2align 0x4
.long 0x1113
L_82552:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq %rax,0x18(%rbp)
L_82553:
	movl $0x0,0x40(%rbp)
	movq $0x0,0x48(%rbp)
.p2align 0x4,,0x7
loop_963:
	movq 0x48(%rbp),%r14
	cmpq 0x38(%rbp),%r14
	jnl L_408141
L_82567:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq %r15,%r14
	salq $0x4,%r14
	movq 0x30(%rbp),%r13
	movl 0x0(%r13,%r14,1),%r11d
	movl %r11d,0x44(%rbp)
	salq $0x4,%r15
	movq 0x8(%r13,%r15,1),%r14
	movq 0x0(%r14),%r11
	movq 0x8(%r14),%r10
	movq 0x0(%r10),%r9
	cmpq $0x1,0x8(%r9)
	je L_408140
L_82568:
	movl 0x40(%rbp),%ecx
	movq $0x1,%r15
.p2align 0x4,,0x7
L_82569:
	movl %ecx,0x40(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x48(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x48(%rbp)
	jmp loop_963
.p2align 0x4
L_408140:
L_82570:
	movq %r11,0x58(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_82571+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp simplifyType_1
.p2align 0x4
L_408141:
L_82554:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82555
L_82565:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_82566+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82566
.p2align 0x4
.long 0x1114
L_82566:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_82555:
	movq 0x18(%rbp),%r15
	movq $0xBC3,0xFFFFFFFFFFFFFFF8(%r15)
	movq $0x4B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movl $0x0,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq $0xBC5,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x18,%r12
	movq %r14,0x0(%r13)
	movq %r15,0x8(%r13)
	movq $0x394D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	movq %r14,0x8(%r15)
	movq %r15,0x38(%rbp)
	addq $0x18,%r12
	addq $0x38,%rbp
	leaq (x_246+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408143:
L_82576:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408144:
L_82577:
	movq (globalObjptr+0x23C0)(%rip),%r15
	movq %r15,0x18(%rbp)
	jmp L_82553
.p2align 0x4
L_408147:
L_82578:
	movl $0x1,%ecx
	jmp L_82540
.p2align 0x4
.long 0x5ED
L_82512:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82513
L_82515:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82516+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82516
.p2align 0x4
.long 0x4FC
L_82516:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82513:
	movq 0x20(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movl 0x0(%r15),%r14d
	movq 0x30(%rbp),%r15
	xorl 0x0(%r15),%r14d
	movl %r14d,0x40(%rbp)
	movq $0x1E49,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_82514+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
.long 0x51A
L_82514:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_82509
.p2align 0x4
.long 0x1115
L_82571:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82572
L_82574:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82575+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82575
.p2align 0x4
.long 0x1116
L_82575:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_82572:
	movq $0x2775,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x44(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	movl 0x40(%rbp),%ecx
	incl %ecx
	jo L_82494
	jmp L_82569
.p2align 0x4
.long 0x796
x_246:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x30(%rbp)
	movq 0x20(%rbp),%r14
	movl 0x0(%r14),%ebx
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r13,%r14
	jne L_82521
L_82557:
	cmpl $0x0,%ecx
	jl L_82535
L_82558:
	movl %ebx,0x38(%rbp)
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_964:
	cmpl %ecx,%ebx
	jnl L_408151
L_82563:
	movslq %ebx,%r15
	salq $0x4,%r15
	movl 0x38(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x18(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x38(%rbp)
	incl %ebx
	jmp loop_964
.p2align 0x4
L_408151:
L_82559:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82560
L_82561:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82562+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82562
.p2align 0x4
.long 0x4AB
L_82562:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_82560:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movl 0x38(%rbp),%r14d
	movl %r14d,0x40(%rbp)
	movq %r15,0x38(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x38,%rbp
	leaq (L_82514+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.text
.p2align 0x4
.globl x_1377
.hidden x_1377
x_1377:
L_82595:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82596
L_82649:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82650+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82650
.p2align 0x4
.long 0x45F
L_82650:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82596:
	movq 0x8(%rbp),%r10
	movq 0x8(%r10),%r9
	movq 0x8(%r9),%r11
	movq 0x0(%r9),%r13
	movq 0x0(%rbp),%r10
	movq 0x10(%r10),%r15
	movq (globalObjptr+0x1068)(%rip),%r10
	movq 0x0(%r10),%r14
	incq %r14
	jo L_408164
L_82598:
	movq %r14,0x0(%r10)
	movq 0x0(%r15),%r10
	cmpq $0x1,%r10
	je L_408163
L_82599:
	movq 0x0(%r10),%r14
	movq 0x8(%r10),%r10
	xorl %ecx,%ecx
	movq %r10,%r15
.p2align 0x4,,0x7
L_82601:
	movq %r14,%r10
	andq $0x3,%r10
	jnz L_408162
L_82641:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r10
	shrq $0x1,%r10
	cmpq $0xCA2,%r10
	jne L_408161
L_82642:
	movq 0x8(%r14),%r10
	cmpq 0x0(%r14),%r11
	movq %r11,(localObjptr+0x8)(%rip)
	je L_408158
L_82602:
	incl %ecx
	jo L_408157
L_82604:
	cmpq $0x1,%r15
	je L_408155
L_82605:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq (localObjptr+0x8)(%rip),%r11
	jmp L_82601
.p2align 0x4
L_408155:
L_82606:
L_82607:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408156
L_82609:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl x_247
L_82640:
	movl %ecx,0x0(%r15)
x_247:
	movq %r13,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_82611+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
L_408156:
L_82608:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408157:
L_82603:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408158:
L_82644:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_82608
L_82645:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_408159
L_82647:
	movl %ecx,0x0(%r15)
	movq %r10,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408159:
L_82646:
	movq %r10,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408161:
	movq %r11,(localObjptr+0x8)(%rip)
	jmp L_82602
.p2align 0x4
L_408162:
	movq %r11,(localObjptr+0x8)(%rip)
	jmp L_82602
.p2align 0x4
L_408163:
L_82648:
	xorl %ecx,%ecx
	jmp L_82607
.p2align 0x4
L_408164:
L_82597:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_82611:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_82612+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x1
L_82612:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xDFE8)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%rbp
	leaq (L_82613+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x4AF
L_82613:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq (globalObjptr+0xEF78)(%rip),%r15
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_82614+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x5AF
L_82614:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	movq (globalObjptr+0xDFF8)(%rip),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_82615+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x51E
L_82615:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82616
L_82638:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82639+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82639
.p2align 0x4
.long 0x4AE
L_82639:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_82616:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x20(%rbp)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq 0x0(%rbp),%r11
	movq %r11,0x0(%r13)
	xorl %ecx,%ecx
	movq %r15,%r14
	movq %r11,%r15
.p2align 0x4,,0x7
L_82617:
	addl 0x0(%r15),%ecx
	movl %ecx,0x28(%rbp)
	jo L_82603
L_82618:
	cmpq $0x1,%r14
	je L_408166
L_82619:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_82617
.p2align 0x4
L_408166:
L_82620:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82621
L_82636:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82637+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82637
.p2align 0x4
.long 0x4E6
L_82637:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82621:
	movl 0x28(%rbp),%ecx
	testl %ecx,%ecx
	jz L_408167
L_82622:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
toString_113:
	movq $0xC3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	movq $0x1,0x8(%rbp)
	addq $0x8,%rbp
	leaq (rev_113+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3785
.p2align 0x4
L_408167:
L_82635:
	movq $0x1,%r15
	xorl %r14d,%r14d
	xchgl %r14d,%ecx
	jmp toString_113
.p2align 0x4
.long 0x1
rev_113:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq $0x1,%r15
	je L_408173
L_82623:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_82624:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408172
.p2align 0x4,,0x7
L_82625:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_408171
L_82626:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_82624
.p2align 0x4
L_408171:
L_82628:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_192+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_408172:
L_82632:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82633+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82633
.p2align 0x4
.long 0x45B
L_82633:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_82625
.p2align 0x4
L_408173:
L_82634:
	movq $0x1,%r14
	xchgq %r14,%r15
	jmp L_82628
.p2align 0x4
.long 0x1
bug_192:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82629
L_82630:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82631+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82631
.p2align 0x4
.long 0x451
L_82631:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82629:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl tabulate_28
.hidden tabulate_28
tabulate_28:
L_82651:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82652
L_82805:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82806+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82806
.p2align 0x4
.long 0x457
L_82806:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82652:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_408212
L_82653:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408211
L_82654:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1461,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_82655+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82655
.p2align 0x4
.long 0x452
L_82655:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_82656:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_965:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408210
.p2align 0x4,,0x7
L_82657:
	movq 0x18(%rbp),%r14
	cmpq 0x10(%rbp),%r14
	jnl L_408209
L_82659:
	movl %r14d,%r13d
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_408208
L_82660:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0x1CAA,%r15
	je L_408202
	cmpq $0x1CAB,%r15
	je L_408199
	cmpq $0x1CAC,%r15
	je L_408177
	cmpq $0x1CAD,%r15
	je L_408175
L_82661:
	movq 0x0(%r14),%r11
	movslq %r13d,%r15
	salq $0x4,%r15
	movq 0x8(%r11,%r15,1),%r11
	movq %r11,%r15
.p2align 0x4,,0x7
L_82662:
	movq 0x8(%r15),%r14
	movq 0x18(%rbp),%r13
	movq %r13,%r11
	salq $0x4,%r11
	movq 0x8(%rbp),%r10
	movl 0x0(%r15),%r9d
	movl %r9d,0x0(%r10,%r11,1)
	movq %r10,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r13,%r15
	salq $0x4,%r15
	movq %r14,0x8(%r10,%r15,1)
	incq %r13
	movq %r13,0x18(%rbp)
	jmp loop_965
.p2align 0x4
L_408175:
L_82770:
	movq 0x0(%r14),%r15
	movq %r15,0x20(%rbp)
	movslq %r13d,%r11
	movq %r11,%r13
	salq $0x4,%r13
	movq 0x8(%r14),%r10
	movl 0x0(%r10,%r13,1),%r9d
	movl %r9d,0x28(%rbp)
	salq $0x4,%r11
	movq 0x8(%r10,%r11,1),%r13
	movq %r13,0x30(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408176
L_82771:
	movq %r13,0x38(%rbp)
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_82772+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408176:
L_82781:
	movq %r13,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_82782+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
L_408177:
L_82695:
	movq 0x10(%r14),%r15
	movq %r15,0x20(%rbp)
	movq 0x8(%r14),%r11
	movq %r11,0x28(%rbp)
	movq 0x0(%r14),%r11
	movq %r11,0x30(%rbp)
	movslq %r13d,%r11
	movq %r11,%r13
	movq %r11,%r10
	salq $0x4,%r13
	salq $0x4,%r10
	movq 0x20(%r14),%r9
	movq 0x8(%r9,%r10,1),%r8
	salq $0x4,%r11
	movq 0x18(%r14),%r10
	movq 0x8(%r10,%r11,1),%rsp
	movq %rsp,0x38(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x40(%rbp)
	movl 0x0(%r15),%r11d
	movl %r11d,0x48(%rbp)
	movl 0x0(%r9,%r13,1),%r15d
	testl %r15d,%r15d
	jnz L_408198
L_82696:
	movq 0x0(%r8),%r15
	movq %r15,0x50(%rbp)
	movq 0x8(%r8),%r15
	cmpq $0x1,%r15
	je L_408193
L_82697:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq %r13,0x58(%rbp)
	cmpq $0x1,%r14
	je L_408191
L_82698:
	movq %r14,0x60(%rbp)
	movq $0x1,0x28(%rbp)
.p2align 0x4,,0x7
L_82699:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408190
.p2align 0x4,,0x7
L_82700:
	movq 0x38(%rbp),%r14
	cmpq $0x1,0x8(%r14)
	je L_408186
L_82701:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x58(%rbp),%r11
	movq %r11,0x0(%r14)
	movq 0x60(%rbp),%r11
	movq %r11,0x8(%r14)
	movq 0x50(%rbp),%r13
	movq 0x28(%rbp),%r15
.p2align 0x4,,0x7
L_82702:
	movl 0x48(%rbp),%r11d
	incl %r11d
	jo L_408185
L_82703:
	movq %r15,0x28(%rbp)
	movq %r13,0x30(%rbp)
	movq %r14,0x38(%rbp)
	movl %r11d,0x48(%rbp)
.p2align 0x4,,0x7
L_82704:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408184
.p2align 0x4,,0x7
L_82705:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x178D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x50(%rbp)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x0(%r14)
	movl $0x0,0x4(%r14)
	cmpq $0x1,0x40(%rbp)
	je L_408183
L_82706:
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_408182
L_82707:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x28(%rbp)
	movq %r14,0x30(%rbp)
	movq $0x1,0x38(%rbp)
L_82708:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408181
.p2align 0x4,,0x7
L_82709:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408178
L_82710:
	movq %r15,0x38(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x30(%rbp)
	jmp L_82708
.p2align 0x4
L_408178:
L_82711:
	movq 0x38(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
L_82712:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408180
.p2align 0x4,,0x7
L_82713:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408179
L_82714:
	movq %r15,0x38(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x30(%rbp)
	jmp L_82712
.p2align 0x4
L_408179:
L_82716:
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x8(%r14)
	movl 0x48(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movq 0x50(%rbp),%r15
	jmp L_82662
.p2align 0x4
L_408180:
L_82717:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82718+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82718
.p2align 0x4
.long 0x1119
L_82718:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_82713
.p2align 0x4
L_408181:
L_82719:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82720+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82720
.p2align 0x4
.long 0x5A0
L_82720:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_82709
.p2align 0x4
L_408182:
L_82721:
	movq 0x40(%rbp),%r14
	xchgq %r14,%r15
	jmp L_82716
.p2align 0x4
L_408183:
L_82722:
	movq 0x28(%rbp),%r15
	jmp L_82716
.p2align 0x4
L_408184:
L_82723:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_82724+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82724
.p2align 0x4
.long 0xF7E
L_82724:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_82705
.p2align 0x4
L_408185:
L_82667:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408186:
L_82725:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0xBBD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x58(%rbp)
	addq $0x18,%r12
	movl $0x0,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq $0x1,0x8(%r14)
	movq 0x50(%rbp),%r11
	movq 0xFFFFFFFFFFFFFFF0(%r11),%r10
	movl %r10d,%r9d
	movslq %r9d,%r8
	cmpq %r8,%r10
	jne L_82680
L_82727:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r10
	movl %r10d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r10
	jne L_408188
L_82729:
	cmpl %r8d,%r9d
	jne L_408187
L_82732:
	movl %r9d,0x70(%rbp)
	movq $0x3959,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x8(%r10)
	movq %r13,0x18(%r10)
	addq $0x30,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r10)
	movq %r14,0x10(%r10)
	movq %r11,0x20(%r10)
	movq %r10,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_82733+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408187:
L_82731:
	movq (globalObjptr+0x4E0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408188:
L_82680:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408190:
L_82750:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_82751+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82751
.p2align 0x4
.long 0x111C
L_82751:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	jmp L_82700
.p2align 0x4
L_408191:
L_82752:
	cmpq $0x1,0x28(%rbp)
	je L_408192
L_82753:
	movq 0x30(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_82754+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_408192:
L_82758:
	movq (globalObjptr+0x2288)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408193:
L_82759:
	movq 0x38(%rbp),%r15
	cmpq $0x1,0x8(%r15)
	je L_408194
L_82760:
	movq (globalObjptr+0x2290)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408194:
L_82761:
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0xBBD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x58(%rbp)
	addq $0x18,%r12
	movl 0x48(%rbp),%r13d
	movl %r13d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x1,0x8(%r15)
	movq 0x50(%rbp),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r11
	movl %r11d,%r10d
	movslq %r10d,%r9
	cmpq %r11,%r9
	jne L_82680
L_82763:
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r11
	movl %r11d,%r9d
	movslq %r9d,%r8
	cmpq %r11,%r8
	jne L_82680
L_82765:
	cmpl %r10d,%r9d
	jne L_82731
L_82767:
	movl %r10d,0x70(%rbp)
	movq $0x3959,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x18(%r11)
	addq $0x30,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r11)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r11)
	movq %r15,0x10(%r11)
	movq %r13,0x20(%r11)
	movq %r11,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_82768+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408198:
L_82769:
	movq (globalObjptr+0xBB8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408199:
L_82686:
	movslq %r13d,%r15
	movq %r15,%r13
	salq $0x4,%r13
	movq 0x0(%r14),%r11
	movl 0x0(%r11,%r13,1),%r10d
	movl %r10d,0x20(%rbp)
	salq $0x4,%r15
	movq 0x8(%r11,%r15,1),%r13
	movq 0x0(%r13),%r10
	movq 0x8(%r13),%r9
	cmpq $0x1,%r9
	je L_408201
L_82687:
	movq 0x0(%r9),%r15
	movq $0x1E77,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq %r14,0x28(%rbp)
	movq %r10,%r15
L_82688:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82680
L_82690:
	movl %r13d,0x40(%rbp)
	movq $0x3957,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	addq $0x38,%rbp
	leaq (x_248+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408201:
L_82694:
	movq $0x1,0x28(%rbp)
	movq %r10,%r15
	jmp L_82688
.p2align 0x4
L_408202:
L_82663:
	movq 0x8(%r14),%r11
	movq %r11,0x20(%rbp)
	movq 0x0(%r14),%r10
	movslq %r13d,%r15
	movq %r15,%r13
	salq $0x4,%r13
	movq 0x10(%r14),%r9
	movl 0x0(%r9,%r13,1),%r8d
	movl %r8d,0x28(%rbp)
	salq $0x4,%r15
	movq 0x8(%r9,%r15,1),%r13
	movq 0x8(%r11),%r14
	movq %r14,0x30(%rbp)
	movl 0x0(%r11),%r9d
	movl %r9d,0x2C(%rbp)
	movq 0x8(%r10),%r11
	movq 0x0(%r10),%r9
	movq %r9,0x38(%rbp)
	movq 0x0(%r13),%r9
	movq %r9,0x40(%rbp)
	movq 0x8(%r13),%r15
	cmpq $0x1,%r15
	je L_408206
L_82664:
	movq 0x0(%r15),%r9
	movq %r9,0x48(%rbp)
	cmpq $0x1,0x8(%r15)
	je L_408205
L_82665:
	movq %r13,%r15
.p2align 0x4,,0x7
L_82666:
	movl 0x2C(%rbp),%r13d
	incl %r13d
	jo L_82667
L_82668:
	movq %r14,0x30(%rbp)
	movl %r13d,0x2C(%rbp)
	movq %r15,0x38(%rbp)
.p2align 0x4,,0x7
L_82669:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408203
.p2align 0x4,,0x7
L_82670:
	movq $0x178D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x28(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movl 0x2C(%rbp),%r13d
	movl %r13d,0x0(%r14)
	jmp L_82662
.p2align 0x4
L_408203:
L_82671:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82672+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82672
.p2align 0x4
.long 0x596
L_82672:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_82670
.p2align 0x4
L_408205:
L_82673:
	movq %r11,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_82674+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_408206:
L_82678:
	movq $0xBBD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	addq $0x18,%r12
	movl 0x2C(%rbp),%r13d
	movl %r13d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r14,0x8(%r15)
	movq 0x40(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF0(%r14),%r13
	movl %r13d,%r11d
	movslq %r11d,%r9
	cmpq %r13,%r9
	jne L_82680
L_82681:
	movl %r11d,0x50(%rbp)
	movq $0x3955,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r10,0x0(%r13)
	addq $0x20,%r12
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	movq %r13,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_82682+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408208:
L_82800:
	movq (globalObjptr+0x4A0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408209:
L_82658:
	movq 0x8(%rbp),%r15
	movq $0x41,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408210:
L_82801:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82802+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82802
.p2align 0x4
.long 0x45C
L_82802:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_82657
.p2align 0x4
L_408211:
L_82803:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408212:
L_82804:
	movq (globalObjptr+0xBB0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_82656
.p2align 0x4
.long 0x111F
L_82772:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82773
L_82779:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82780+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82780
.p2align 0x4
.long 0xF7B
L_82780:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_82773:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x30(%rbp)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1,0x40(%rbp)
	movl $0x0,0x48(%rbp)
	addq $0x40,%rbp
	leaq (L_82774+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
.long 0x560
L_82782:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x70(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82783
L_82798:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82799+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82799
.p2align 0x4
.long 0x1124
L_82799:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82783:
	movq 0x50(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	jne L_408217
L_82785:
	movq 0x38(%rbp),%r13
	movb 0x0(%r13),%r15b
	testb %r15b,%r15b
	jnz L_408215
L_82786:
	movq 0x30(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_82787+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408215:
L_82797:
	movq $0x1,0x30(%rbp)
L_82789:
	movq 0x70(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82680
L_82791:
	movl %r13d,0x68(%rbp)
	movq $0x395B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x60(%rbp)
	addq $0x60,%rbp
	leaq (x_249+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408217:
	movq %r14,%r15
L_82776:
	movq $0x178D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x28(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_82662
.p2align 0x4
.long 0x111A
L_82733:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	cmpq $0x1,%r14
	je L_408224
L_82734:
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_408223
L_82735:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x28(%rbp)
	movq %r14,0x50(%rbp)
	movq $0x1,0x58(%rbp)
.p2align 0x4,,0x7
L_82736:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408222
.p2align 0x4,,0x7
L_82737:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408219
L_82738:
	movq %r15,0x58(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x50(%rbp)
	jmp L_82736
.p2align 0x4
L_408219:
L_82739:
	movq 0x58(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq 0x50(%rbp),%r14
	movq %r14,0x38(%rbp)
	movq %r15,0x50(%rbp)
.p2align 0x4,,0x7
L_82740:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408221
.p2align 0x4,,0x7
L_82741:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408220
L_82742:
	movq %r15,0x50(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x38(%rbp)
	jmp L_82740
.p2align 0x4
L_408220:
L_82743:
	movq 0x30(%rbp),%r13
	movq $0x1,%r11
	xchgq %r11,%r14
	jmp L_82702
.p2align 0x4
L_408221:
L_82744:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82745+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82745
.p2align 0x4
.long 0x5A0
L_82745:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_82741
.p2align 0x4
L_408222:
L_82746:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_82747+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82747
.p2align 0x4
.long 0x111B
L_82747:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	jmp L_82737
.p2align 0x4
L_408223:
L_82748:
	movq 0x38(%rbp),%r11
	movq 0x30(%rbp),%r13
	movq $0x1,%r14
	xchgq %r11,%r15
	jmp L_82702
.p2align 0x4
L_408224:
L_82749:
	movq 0x28(%rbp),%r15
	movq 0x30(%rbp),%r13
	movq $0x1,%r14
	jmp L_82702
.p2align 0x4
.long 0x111D
L_82754:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x4C(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82755
L_82756:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_82757+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82757
.p2align 0x4
.long 0x111B
L_82757:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_82755:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x4C(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x1E51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x48(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x10(%r14)
	movq %r13,0x60(%rbp)
	addq $0x20,%r12
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%r14)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq $0x1,0x8(%r15)
	movq %r15,0x28(%rbp)
	jmp L_82699
.p2align 0x4
.long 0x111E
L_82768:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq 0x58(%rbp),%r14
	movl 0x0(%r14),%r13d
	movl %r13d,0x48(%rbp)
	movq %r15,0x30(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0x38(%rbp)
	jmp L_82704
.p2align 0x4
.long 0x56C
x_248:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82691
L_82692:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82693+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82693
.p2align 0x4
.long 0x578
L_82693:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82691:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x178D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x20(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,%r15
	jmp L_82662
.p2align 0x4
.long 0x529
L_82674:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movl 0x58(%rbp),%r15d
	movl %r15d,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82675
L_82676:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82677+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82677
.p2align 0x4
.long 0x1118
L_82677:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_82675:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x50(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r11
	movq %r11,0x0(%r15)
	movq %r13,0x8(%r15)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x40(%rbp),%r10
	movq %r10,0x0(%r14)
	movq $0x1E51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x2C(%rbp),%r10d
	movl %r10d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x38(%rbp),%r10
	movq %r10,0x8(%r15)
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r13,0x10(%r10)
	addq $0x20,%r12
	movq %r11,0x8(%r10)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r10,0x0(%r15)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r15)
	xchgq %r14,%r15
	jmp L_82666
.p2align 0x4
.long 0x531
L_82682:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82683
L_82684:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82685+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82685
.p2align 0x4
.long 0x596
L_82685:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_82683:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	movl 0x0(%r15),%r13d
	movl %r13d,0x2C(%rbp)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r15)
	movq %r14,0x30(%rbp)
	movq $0x1,0x8(%r15)
	movq %r15,0x38(%rbp)
	jmp L_82669
.p2align 0x4
.long 0x568
L_82774:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82775
L_82777:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82778+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82778
.p2align 0x4
.long 0x591
L_82778:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82775:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_82776
.p2align 0x4
.long 0x1120
L_82787:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82788
L_82795:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_82796+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82796
.p2align 0x4
.long 0x1123
L_82796:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82788:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x30(%rbp)
	jmp L_82789
.p2align 0x4
.long 0x1121
x_249:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82792
L_82793:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82794+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82794
.p2align 0x4
.long 0x1122
L_82794:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_82792:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_82776
.text
.p2align 0x4
.globl valueType_1
.hidden valueType_1
valueType_1:
L_82807:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82808
L_82823:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82824+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82824
.p2align 0x4
.long 0x45F
L_82824:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82808:
	movq 0x8(%rbp),%r15
	movq 0x38(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_82809+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_0
.p2align 0x4
.long 0x4E5
L_82809:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82810
L_82821:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82822+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82822
.p2align 0x4
.long 0x4E7
L_82822:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_82810:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF48,%r14
	je L_408235
	cmpq $0xF49,%r14
	je L_408234
L_82811:
	movq 0x8(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq 0x0(%r14),%r15
	cmpq $0x1,%r15
	je L_408233
L_82812:
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408233:
L_82813:
	movq %r13,0x30(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_82814+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
L_408234:
L_82820:
	movq 0x0(%r15),%r14
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408235:
L_82819:
	movq 0x30(%r15),%r14
	movq 0x28(%r15),%r13
	movq 0x20(%r15),%r11
	movq 0x18(%r15),%r10
	movq 0x10(%r15),%r9
	movq 0x8(%r15),%r8
	movq 0x0(%r15),%rsp
	movq $0xD91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	movq %r11,0x10(%r15)
	movq %r10,0x18(%r15)
	movq %r9,0x20(%r15)
	movq %r8,0x28(%r15)
	movq %rsp,0x30(%r15)
	movq %r15,0x0(%rbp)
	addq $0x40,%r12
	jmp objectType_0
.p2align 0x4
.long 0x2
L_82814:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82815
L_82817:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82818+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82818
.p2align 0x4
.long 0x4B1
L_82818:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82815:
	movq 0x10(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x40(%rbp)
	movl 0x0(%r15),%r14d
	movq 0x18(%rbp),%r15
	xorl 0x0(%r15),%r14d
	movl %r14d,0x38(%rbp)
	movq $0x1E49,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x30(%rbp)
	addq $0x30,%rbp
	leaq (L_82816+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
.long 0x459
L_82816:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl objectType_0
.hidden objectType_0
objectType_0:
L_82825:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82826
L_82847:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82848+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82848
.p2align 0x4
.long 0x45F
L_82848:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82826:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x10(%r15),%r13
	movq %r13,0x18(%rbp)
	movq 0x28(%r15),%r11
	movq %r11,0x20(%rbp)
	movq 0x0(%r13),%r15
	cmpq $0x1,%r15
	je L_408238
L_82827:
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408238:
L_82828:
	movq 0x0(%r14),%r15
L_82829:
	movq %r15,%r14
	andq $0x3,%r14
	jnz L_408239
L_82846:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x30(%rbp)
	addq $0x28,%rbp
	leaq (L_82839+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp objectType_0
.p2align 0x4
L_408239:
L_82830:
	movq 0x0(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_82831+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp objectFinalComponents_0
.p2align 0x4
.long 0x48F
L_82839:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq 0x28(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x18(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x8A9
L_82831:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%rbp),%r15
	movl 0x4(%r15),%r14d
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	movq %r11,0x30(%rbp)
	movq 0x20(%rbp),%r15
	cmpq $0x1,%r15
	je L_408246
	cmpq $0x2,%r15
	je L_408245
L_82832:
	movl 0x0(%r15),%r14d
	movl %r14d,%ecx
L_82833:
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ebx
	movslq %ebx,%r13
	cmpq %r14,%r13
	jne L_408244
L_82835:
	cmpl $0x0,%ebx
	jl L_408243
L_82836:
	movl %ecx,0x38(%rbp)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
loop_966:
	cmpl %ebx,%ecx
	jnl L_408241
L_82842:
	movslq %ecx,%r15
	salq $0x4,%r15
	movl 0x38(%rbp),%r14d
	imull $0x5555,%r14d
	movq 0x28(%rbp),%r13
	movq 0x8(%r13,%r15,1),%r11
	xorl 0x0(%r11),%r14d
	movl %r14d,0x38(%rbp)
	incl %ecx
	jmp loop_966
.p2align 0x4
L_408241:
L_82837:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82838
L_82840:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82841+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82841
.p2align 0x4
.long 0x4AB
L_82841:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_82838:
	movq $0x1E4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movl 0x38(%rbp),%r14d
	movl %r14d,0x30(%rbp)
	movq %r15,0x38(%rbp)
	addq $0x28,%rbp
	leaq (L_82839+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp lookup_2
.p2align 0x4
L_408243:
L_82843:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408244:
L_82834:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408245:
L_82845:
	movl %r13d,%ecx
	jmp L_82833
.p2align 0x4
L_408246:
	movl %r14d,%ecx
	jmp L_82833
.text
.p2align 0x4
.globl objectFinalComponents_0
.hidden objectFinalComponents_0
objectFinalComponents_0:
L_82849:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_82897
L_82850:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408255
L_82851:
	movq 0x0(%rbp),%r15
	movq 0x20(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x30(%r15),%r13
	movq %r13,0x18(%rbp)
	movq 0x0(%r14),%r15
	cmpq $0x1,%r15
	je L_408247
L_82852:
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408247:
L_82853:
	movq 0x18(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r13,%r14
	jne L_408254
L_82856:
	decl %ecx
	jo L_82857
L_82858:
	movq $0x1,0x20(%rbp)
loop_967:
	cmpl $0x0,%ecx
	jl L_408248
L_82859:
	movl %ecx,%r15d
	decl %r15d
	movl %r15d,0x28(%rbp)
	movslq %ecx,%r15
	movq %r15,%r14
	salq $0x4,%r14
	movq 0x18(%rbp),%r13
	movl 0x0(%r13,%r14,1),%r11d
	movl %r11d,0x2C(%rbp)
	salq $0x4,%r15
	movq 0x8(%r13,%r15,1),%r14
	movq %r14,0x30(%rbp)
	movq %r14,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_82860+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_0
.p2align 0x4
L_408248:
L_82886:
	movq $0xBC7,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x18(%rbp)
	addq $0x10,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408252
L_82887:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_82888:
	incl %ecx
	movl %ecx,0x20(%rbp)
	jo L_408251
L_82889:
	cmpq $0x1,%r15
	je L_408249
L_82890:
	movq 0x8(%r15),%r15
	jmp L_82888
.p2align 0x4
L_408249:
L_82891:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82892
L_82894:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_82895+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82895
.p2align 0x4
.long 0x45E
L_82895:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
L_82892:
	movl 0x20(%rbp),%ecx
L_82893:
	movl %ecx,0x28(%rbp)
	movq $0x394B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x18(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (x_250+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_7
.p2align 0x4
L_408251:
L_82857:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408252:
L_82896:
	xorl %ecx,%ecx
	jmp L_82893
.p2align 0x4
L_408254:
L_82855:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408255:
L_82897:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_82898+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82898
.p2align 0x4
.long 0x45F
L_82898:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_82851
.p2align 0x4
.long 0x1125
L_82860:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82861
L_82884:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82885+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82885
.p2align 0x4
.long 0x1129
L_82885:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_82861:
	movq 0x38(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF48,%r14
	jne L_82862
L_82867:
	movq 0x30(%r15),%r14
	movq 0x28(%r15),%r13
	movq 0x20(%r15),%r11
	movq 0x18(%r15),%r10
	movq 0x10(%r15),%r9
	movq 0x8(%r15),%r8
	movq 0x0(%r15),%rsp
	movq $0xD91,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r11,0x10(%r15)
	movq %r10,0x18(%r15)
	movq %r9,0x20(%r15)
	movq %r8,0x28(%r15)
	movq %rsp,0x30(%r15)
	addq $0x40,%r12
	movq %r13,0x8(%r15)
	movq 0x0(%r13),%r14
L_82868:
	movq %r14,%r13
	andq $0x3,%r13
	jnz L_82862
L_82869:
	movq 0x0(%rbp),%r13
	movq 0x8(%r14),%r11
	movq 0x8(%r11),%r10
	cmpq %r10,0x8(%r13)
	jne L_408257
L_82871:
	movq %r15,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_82872+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp objectFinalComponents_0
.p2align 0x4
L_408257:
L_82862:
	movq 0x30(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x38,%rbp
	leaq (L_82863+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp valueType_1
.p2align 0x4
.long 0x2B
x_250:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	movq 0x10(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1126
L_82872:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82855
L_82874:
	decl %r13d
	jo L_82857
L_82875:
	movl %r13d,0x38(%rbp)
.p2align 0x4,,0x7
loop_968:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408263
.p2align 0x4,,0x7
L_82876:
	movl 0x38(%rbp),%ebx
	cmpl $0x0,%ebx
	jl L_408262
L_82877:
	movl %ebx,%r14d
	decl %r14d
	movslq %ebx,%r15
	movq %r15,%r13
	salq $0x4,%r13
	movq 0x30(%rbp),%r11
	movl 0x0(%r11,%r13,1),%ecx
	salq $0x4,%r15
	movq 0x8(%r11,%r15,1),%r13
	movl 0x2C(%rbp),%r11d
	testl %r11d,%r11d
	jz L_408261
L_82880:
	movl $0x1,%ecx
	movq %r13,%r15
	movl %r14d,%ebx
L_82879:
	movl %ebx,0x38(%rbp)
	movq $0x10AD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq $0x273F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x20(%rbp)
	jmp loop_968
.p2align 0x4
L_408261:
	movq %r13,%r15
	movl %r14d,%ebx
	jmp L_82879
.p2align 0x4
L_408262:
L_82881:
	movl 0x28(%rbp),%ecx
	jmp loop_967
.p2align 0x4
L_408263:
L_82882:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_82883+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82883
.p2align 0x4
.long 0x1128
L_82883:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_82876
.p2align 0x4
.long 0x1126
L_82863:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82864
L_82865:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82866+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82866
.p2align 0x4
.long 0x1127
L_82866:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_82864:
	movq $0x10AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x2C(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x273F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x20(%rbp)
	movl 0x28(%rbp),%ecx
	jmp loop_967
.text
.p2align 0x4
.globl transformStatements_0
.hidden transformStatements_0
transformStatements_0:
L_82899:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_82900
L_83831:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_83832+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83832
.p2align 0x4
.long 0x45F
L_83832:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_82900:
	movq 0x8(%rbp),%r15
	movq 0x28(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%rdx
	movq %rdx,0x18(%rbp)
	cmpq %r14,%rdx
	jne L_82902
L_82903:
	testq %rdx,%rdx
	jz L_408302
L_82904:
	cmpq $0x7FFFFFFF,%rdx
	ja L_82946
L_82905:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x155F,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_82906+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82906
.p2align 0x4
.long 0x112A
L_82906:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,0x8(%rbp)
L_82907:
	movq $0x0,0x20(%rbp)
.p2align 0x4,,0x7
loop_969:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408300
.p2align 0x4,,0x7
L_82908:
	movq 0x20(%rbp),%r14
	cmpq 0x18(%rbp),%r14
	jnl L_408299
L_82910:
	movl %r14d,%r13d
	movslq %r13d,%r15
	movq 0x0(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq %r13,0x28(%rbp)
	movq 0x10(%rbp),%r14
	movq 0x78(%r14),%r11
	movq %r11,0x30(%rbp)
	movq 0x70(%r14),%r11
	movq %r11,0x38(%rbp)
	movq 0x68(%r14),%r11
	movq %r11,0x40(%rbp)
	movq 0x60(%r14),%r11
	movq %r11,0x48(%rbp)
	movq 0x58(%r14),%r11
	movq %r11,0x50(%rbp)
	movq 0x50(%r14),%r11
	movq %r11,0x58(%rbp)
	movq 0x48(%r14),%r11
	movq %r11,0x60(%rbp)
	movq 0x40(%r14),%r11
	movq %r11,0x68(%rbp)
	movq 0x38(%r14),%r11
	movq %r11,0x70(%rbp)
	movq 0x28(%r14),%r11
	movq %r11,0x78(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r15
	shrq $0x1,%r15
	cmpq $0xF2E,%r15
	je L_408297
	cmpq $0xF2F,%r15
	je L_408268
L_82911:
	movq 0x10(%r13),%r14
	movq %r14,0x38(%rbp)
	movl 0x0(%r13),%r14d
	movl %r14d,0x48(%rbp)
	movq 0x8(%r13),%r14
	movq %r14,0x68(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF3C,%r15
	je L_408267
L_83267:
	movq 0x0(%r14),%r15
L_82913:
	movq %r15,0x80(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (deObject_3+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1376
.p2align 0x4
L_408267:
L_82912:
	movq 0x8(%r14),%r15
	jmp L_82913
.p2align 0x4
L_408268:
L_83269:
	movq 0x10(%r13),%r15
	movq %r15,0x80(%rbp)
	movq 0x8(%r13),%r14
	movq %r14,0x88(%rbp)
	movq 0x0(%r13),%r14
	movq %r14,0x90(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xF28,%r13
	je L_408294
	cmpq $0xF29,%r13
	je L_408292
	cmpq $0xF2A,%r13
	je L_408290
	cmpq $0xF2B,%r13
	je L_408288
	cmpq $0xF2C,%r13
	je L_408274
L_83270:
	movq 0x0(%r14),%r13
	cmpq $0x1,%r15
	jne L_408273
L_83304:
	movq $0x1,0x28(%rbp)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_82936:
	movslq %ecx,%r14
	movq %r14,0x30(%rbp)
	testq %r14,%r14
	jnz L_408271
L_82947:
	movq (globalObjptr+0xD90)(%rip),%r15
.p2align 0x4,,0x7
L_82940:
	movq 0x28(%rbp),%r13
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_970:
	cmpq 0x30(%rbp),%r14
	jnl L_408270
L_82942:
	cmpq $0x1,%r13
	je L_408269
L_82943:
	movq 0x0(%r13),%r11
	movq 0x8(%r13),%r13
	movq %r15,%r10
	shrq $0x8,%r10
	movq (gcState+0x3C8)(%rip),%r9
	movb $0x1,0x0(%r9,%r10,1)
	movq %r11,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_970
.p2align 0x4
L_408269:
L_82944:
	movq (globalObjptr+0x4B0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408270:
L_82941:
	movq $0x21,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x20(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x20(%rbp)
	jmp loop_969
.p2align 0x4
L_408271:
L_82937:
	movq 0x30(%rbp),%rdx
	cmpq $0x7FFFFFFF,%rdx
	ja L_408272
L_82938:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1443,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_82939+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82939
.p2align 0x4
.long 0x112F
L_82939:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq %rax,%r15
	jmp L_82940
.p2align 0x4
L_408272:
L_82946:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408273:
L_83271:
	movq %r13,0x90(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_83272+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408274:
L_83824:
	cmpq $0x1,%r15
	jne L_408287
L_83641:
	movq 0x90(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF28,%r14
	je L_408285
	cmpq $0xF29,%r14
	je L_408283
	cmpq $0xF2A,%r14
	je L_408281
	cmpq $0xF2B,%r14
	je L_408280
	cmpq $0xF2C,%r14
	je L_408275
L_83642:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
L_83334:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xA0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_83335+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408275:
.p2align 0x4,,0x7
L_83448:
	cmpq $0x1,0x80(%rbp)
	jne L_408279
L_83450:
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
.p2align 0x4,,0x7
L_83343:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408278
.p2align 0x4,,0x7
L_83344:
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r15)
	movq 0x80(%rbp),%r13
	movq %r13,0x10(%r15)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq $0x1,%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_82931:
	incl %ecx
	jo L_408277
L_82933:
	cmpq $0x1,%r15
	je L_408276
L_82934:
	movq 0x8(%r15),%r15
	jmp L_82931
.p2align 0x4
L_408276:
L_82935:
	movq %r14,0x28(%rbp)
	jmp L_82936
.p2align 0x4
L_408277:
L_82932:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408278:
L_83345:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83346+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83346
.p2align 0x4
.long 0x1161
L_83346:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	jmp L_83344
.p2align 0x4
L_408279:
L_83449:
	movq 0x80(%rbp),%r15
	movq 0x90(%rbp),%r14
	movq %r14,0x28(%rbp)
L_83340:
	movq %r15,0x90(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_83341+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1376
.p2align 0x4
L_408280:
L_83646:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
L_83429:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xA0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_83430+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408281:
L_83645:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
L_83419:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_408282
L_83421:
	movl %r13d,0xA0(%rbp)
	movq $0x404B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_83422+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408282:
L_82902:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408283:
L_83644:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
L_83409:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82902
L_83411:
	movl %r13d,0xA0(%rbp)
	movq $0x404B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_83412+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408285:
L_83643:
	movl 0x0(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,%r15
L_83360:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF3C,%r14
	je L_408286
L_83392:
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0xA0(%rbp)
	movq %r14,0x98(%rbp)
	addq $0x98,%rbp
	leaq (L_83393+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408286:
L_83361:
	movq 0x8(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x60(%rbp)
	movq %r14,0x98(%rbp)
	movq %r13,0xA0(%rbp)
	addq $0x98,%rbp
	leaq (L_83362+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408287:
L_83825:
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
L_83310:
	movq 0x38(%rbp),%r15
	movq 0x10(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_83311+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1376
.p2align 0x4
L_408288:
L_83821:
	cmpq $0x1,%r15
	je L_83641
L_83822:
	movq %r15,0x28(%rbp)
	jmp L_83310
.p2align 0x4
L_408290:
L_83648:
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x70(%rbp)
	cmpq $0x1,%r15
	je L_83304
L_83649:
	movq %r15,0xA0(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_83650+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1376
.p2align 0x4
L_408292:
L_83638:
	cmpq $0x1,%r15
	je L_83641
L_83639:
	movq %r15,0x28(%rbp)
	jmp L_83310
.p2align 0x4
L_408294:
L_83305:
	movl 0x0(%r14),%r13d
	movl %r13d,0x28(%rbp)
	movq 0x8(%r14),%r13
	movq %r13,0x58(%rbp)
	cmpq $0x1,%r15
	je L_83304
L_83306:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r15
	shrq $0x1,%r15
	cmpq $0xF3C,%r15
	je L_408295
L_83636:
	movq 0x0(%r13),%r15
	movq %r15,0x60(%rbp)
L_83308:
	movq 0x60(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (deObject_4+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1376
.p2align 0x4
L_408295:
L_83307:
	movq 0x8(%r13),%r15
	movq %r15,0x60(%rbp)
	jmp L_83308
.p2align 0x4
L_408297:
.p2align 0x4,,0x7
L_82929:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408298
.p2align 0x4,,0x7
L_82930:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	xorl %ecx,%ecx
	movq $0x1,%r13
	movq %r15,%r14
	movq %r13,%r15
	jmp L_82931
.p2align 0x4
L_408298:
L_82948:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_82949+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82949
.p2align 0x4
.long 0xFCE
L_82949:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_82930
.p2align 0x4
L_408299:
L_82909:
	movq 0x8(%rbp),%r15
	movq $0x1791,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp concatV_0
.p2align 0x4
L_408300:
L_83827:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x30,%rbp
	leaq (L_83828+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83828
.p2align 0x4
.long 0x6FE
L_83828:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	jmp L_82908
.p2align 0x4
L_408302:
L_83830:
	movq (globalObjptr+0x2308)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_82907
.p2align 0x4
.long 0x112B
deObject_3:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82914
L_83265:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_83266+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83266
.p2align 0x4
.long 0x1157
L_83266:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_82914:
	movq 0x40(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408317
simple_15:
	movq 0x28(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF2E,%r14
	je L_82929
	cmpq $0xF2F,%r14
	je L_408306
L_82915:
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movl 0x0(%r15),%r14d
	movl %r14d,0x40(%rbp)
	movq 0x8(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF3C,%r15
	je L_408305
L_82981:
	movq 0x0(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x60(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_82982+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408305:
L_82916:
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x58(%rbp)
	movq %r15,0x68(%rbp)
	movq %r13,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_82917+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408306:
L_82998:
	movq 0x10(%r15),%r14
	movq %r14,0x38(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x40(%rbp)
	movq 0x0(%r15),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF28,%r15
	je L_408314
	cmpq $0xF29,%r15
	je L_408312
	cmpq $0xF2A,%r15
	je L_408310
	cmpq $0xF2B,%r15
	je L_408309
	cmpq $0xF2C,%r15
	je L_408307
L_82999:
	movq 0x0(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x60(%rbp)
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_83000+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408307:
L_83103:
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_408308
L_83104:
L_83006:
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x0(%r13)
	movq %r15,0x10(%r13)
	addq $0x20,%r12
	movq 0x40(%rbp),%r15
	movq %r15,0x8(%r13)
	movq %r13,0x28(%rbp)
	jmp L_82929
.p2align 0x4
L_408308:
L_83105:
	movq $0x1,%r13
	xchgq %r13,%r15
	jmp L_83006
.p2align 0x4
L_408309:
L_83085:
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x68(%rbp)
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_83086+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408310:
L_83076:
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83078:
	movl %r13d,0x58(%rbp)
	movq $0x3FCB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_83079+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408312:
L_83067:
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82902
L_83069:
	movl %r13d,0x58(%rbp)
	movq $0x3FCB,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_83070+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408314:
L_83019:
	movl 0x0(%r14),%r15d
	movl %r15d,0x28(%rbp)
	movq 0x8(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF3C,%r14
	je L_408315
L_83051:
	movq 0x0(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x50(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x68(%rbp)
	movq %r14,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_83052+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408315:
L_83020:
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x60(%rbp)
	movq %r14,0x70(%rbp)
	movq %r13,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_83021+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408317:
L_83106:
	movq 0x40(%rbp),%r15
	movq %r15,0x80(%rbp)
	addq $0x80,%rbp
	leaq (L_83107+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x1158
L_83272:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83273
L_83301:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83302+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83302
.p2align 0x4
.long 0x115A
L_83302:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83273:
	movq 0x68(%rbp),%r11
	movq 0x8(%r11),%r10
	movq 0x8(%r10),%r9
	movq %r9,0x30(%rbp)
	movq 0x0(%r10),%r14
	movq 0x80(%rbp),%r11
	movq 0x10(%r11),%r10
	movq %r10,0x38(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_408330
L_83275:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408329
L_83276:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_83278:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408328
L_83292:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD47,%r11
	jne L_408327
L_83293:
	cmpq %r14,0x0(%r13)
	movq %r14,(localObjptr+0x8)(%rip)
	je L_408324
L_83279:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_82932
L_83280:
	cmpq $0x1,%r15
	je L_408319
L_83281:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x8)(%rip),%r14
	jmp L_83278
.p2align 0x4
L_408319:
L_83282:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83283
L_83290:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_83291+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83291
.p2align 0x4
.long 0x1159
L_83291:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_83283:
	movl 0x40(%rbp),%ecx
L_83284:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408321
L_83286:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83288
L_83289:
	movl %ecx,0x0(%r15)
L_83288:
	movq $0x1A8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1,0x28(%rbp)
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
L_408321:
L_83285:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408324:
L_83295:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83296:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83298
L_83299:
	movl %ecx,0x0(%r15)
L_83298:
	movq (globalObjptr+0x578)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408327:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83279
.p2align 0x4
L_408328:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83279
.p2align 0x4
L_408329:
L_83300:
	xorl %ecx,%ecx
	jmp L_83284
.p2align 0x4
L_408330:
L_83274:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x115E
L_83335:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83336
L_83357:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83358+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83358
.p2align 0x4
.long 0x1162
L_83358:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83336:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_219
L_83337:
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_704
L_83338:
	movq $0x1E4F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x10,%r12
	movq 0x80(%rbp),%r14
	cmpq $0x1,%r14
	je L_408332
L_83339:
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_83340
.p2align 0x4
L_408332:
L_83347:
	movq %r15,0x30(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83343
.p2align 0x4
bug_704:
bug_219:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83349+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x115F
L_83341:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x90(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_83342+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
.long 0x116A
L_83430:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83431
L_83445:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83446+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83446
.p2align 0x4
.long 0x116B
L_83446:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83431:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_227
L_83432:
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_706
L_83433:
	movq $0x1E57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x80(%rbp),%r14
	cmpq $0x1,%r14
	je L_408334
L_83434:
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_83340
.p2align 0x4
L_408334:
L_83435:
	movq %r15,0x30(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83343
.p2align 0x4
bug_706:
bug_227:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83437+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1168
L_83422:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83423
L_83426:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83427+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83427
.p2align 0x4
.long 0x1169
L_83427:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83423:
	movq $0x1E55,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	cmpq $0x1,%r14
	je L_408336
L_83424:
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_83340
.p2align 0x4
L_408336:
L_83425:
	movq %r15,0x30(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83343
.p2align 0x4
.long 0x1168
L_83412:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83413
L_83416:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83417+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83417
.p2align 0x4
.long 0x1169
L_83417:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83413:
	movq $0x1E53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	cmpq $0x1,%r14
	je L_408338
L_83414:
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_83340
.p2align 0x4
L_408338:
L_83415:
	movq %r15,0x30(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83343
.p2align 0x4
.long 0x1166
L_83393:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83394
L_83406:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83407+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83407
.p2align 0x4
.long 0x1167
L_83407:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83394:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_225
L_83395:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_708
L_83396:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
L_83369:
	movq $0x1E51,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x28(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x80(%rbp),%r15
	cmpq $0x1,%r15
	je L_408340
L_83370:
	movq %r14,0x28(%rbp)
	jmp L_83340
.p2align 0x4
L_408340:
L_83371:
	movq %r14,0x30(%rbp)
	movq 0x88(%rbp),%r14
	movq %r14,0x28(%rbp)
	jmp L_83343
.p2align 0x4
bug_708:
bug_225:
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83398+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1163
L_83362:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r14
	je bug_223
L_83363:
	movq 0x8(%r14),%r15
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r15
	je bug_710
L_83364:
	movq 0x38(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0xA0(%rbp)
	addq $0x98,%rbp
	leaq (L_83365+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_710:
bug_223:
	movq 0x50(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83384+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x115C
L_83311:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408342
L_83312:
	movq %r15,0xA0(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_83313+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408342:
L_83467:
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_83468+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x1188
L_83650:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408343
L_83651:
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83310
.p2align 0x4
L_408343:
L_83652:
	movq 0x78(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83653+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x115B
deObject_4:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408344
L_83309:
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_83310
.p2align 0x4
L_408344:
L_83486:
	movq 0x98(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83487+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x1132
L_82982:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82983
L_82995:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_82996+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82996
.p2align 0x4
.long 0x1133
L_82996:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_82983:
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_199
L_82984:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_712
L_82985:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	addq $0x10,%r12
L_82924:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_82925+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_712:
bug_199:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_82987+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x112C
L_82917:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r15,0x60(%rbp)
	cmpq $0x1,%r14
	je bug_197
L_82918:
	movq 0x8(%r14),%r15
	movq %r15,0x60(%rbp)
	cmpq $0x1,%r15
	je bug_714
L_82919:
	movq 0x28(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_82920+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_714:
bug_197:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_82973+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1134
L_83000:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83001
L_83017:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_83018+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83018
.p2align 0x4
.long 0x1135
L_83018:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_83001:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_201
L_83002:
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_716
L_83003:
	movq $0x1E4F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x10,%r12
	movq 0x38(%rbp),%r13
	cmpq $0x1,%r13
	je L_408346
L_83004:
	movq %r15,%r14
	movq %r13,%r15
	jmp L_83006
.p2align 0x4
L_408346:
L_83007:
	movq $0x1,%r11
	movq %r15,%r14
	movq %r11,%r15
	jmp L_83006
.p2align 0x4
bug_716:
bug_201:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83009+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x113D
L_83086:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83087
L_83101:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_83102+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83102
.p2align 0x4
.long 0x113E
L_83102:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_83087:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_209
L_83088:
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_718
L_83089:
	movq $0x1E57,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x38(%rbp),%r13
	cmpq $0x1,%r13
	je L_408348
L_83090:
	movq %r15,%r14
	movq %r13,%r15
	jmp L_83006
.p2align 0x4
L_408348:
L_83091:
	movq $0x1,%r11
	movq %r15,%r14
	movq %r11,%r15
	jmp L_83006
.p2align 0x4
bug_718:
bug_209:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83093+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x113B
L_83079:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83080
L_83083:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_83084+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83084
.p2align 0x4
.long 0x113C
L_83084:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_83080:
	movq $0x1E55,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_408350
L_83081:
	jmp L_83006
.p2align 0x4
L_408350:
L_83082:
	movq $0x1,%r13
	xchgq %r13,%r15
	jmp L_83006
.p2align 0x4
.long 0x113B
L_83070:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83071
L_83074:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_83075+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83075
.p2align 0x4
.long 0x113C
L_83075:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_83071:
	movq $0x1E53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x28(%rbp),%r13
	movq %r13,0x8(%r14)
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_408352
L_83072:
	jmp L_83006
.p2align 0x4
L_408352:
L_83073:
	movq $0x1,%r13
	xchgq %r13,%r15
	jmp L_83006
.p2align 0x4
.long 0x1139
L_83052:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83053
L_83065:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_83066+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83066
.p2align 0x4
.long 0x113A
L_83066:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_83053:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_207
L_83054:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_720
L_83055:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq %r14,%r15
L_83028:
	movq $0x1E51,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x28(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_408354
L_83029:
	jmp L_83006
.p2align 0x4
L_408354:
L_83030:
	movq $0x1,%r13
	xchgq %r13,%r15
	jmp L_83006
.p2align 0x4
bug_720:
bug_207:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83057+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1136
L_83021:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r14
	je bug_205
L_83022:
	movq 0x8(%r14),%r15
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r15
	je bug_722
L_83023:
	movq 0x48(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_83024+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_722:
bug_205:
	movq 0x50(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83043+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x113F
L_83107:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x88(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x90(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0xB0(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xB8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0xA8(%rbp)
	movslq 0x48(%rbp),%r13
	movq %r13,0xB0(%rbp)
	cmpq %r14,%r13
	jnb L_408357
L_83110:
	salq $0x4,%r13
	movq 0x8(%r15,%r13,1),%r14
	movq %r14,0x28(%rbp)
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r15
	shrq $0x1,%r15
	cmpq $0xF40,%r15
	je L_408356
L_83111:
	movq %r14,0xC0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xC0,%rbp
	leaq (L_83112+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408356:
L_83246:
	movq %r14,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_83247+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
L_408357:
L_83109:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_83349:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83350
L_83354:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83355+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83355
.p2align 0x4
.long 0x451
L_83355:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83350:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_220+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1160
L_83342:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq 0x28(%rbp),%r14
	movq %r14,0x30(%rbp)
	movq %r15,0x28(%rbp)
	jmp L_83343
.p2align 0x4
.long 0x1
L_83437:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83438
L_83442:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83443+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83443
.p2align 0x4
.long 0x451
L_83443:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83438:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_228+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_83398:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83399
L_83403:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83404+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83404
.p2align 0x4
.long 0x451
L_83404:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83399:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_226+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1164
L_83365:
	addq $0xFFFFFFFFFFFFFF68,%rbp
	movq 0x98(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83366
L_83381:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x98,%rbp
	leaq (L_83382+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83382
.p2align 0x4
.long 0x1165
L_83382:
	addq $0xFFFFFFFFFFFFFF68,%rbp
L_83366:
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_221
L_83367:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_724
L_83368:
	movq $0x1E79,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,%r15
	jmp L_83369
.p2align 0x4
bug_724:
bug_221:
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83373+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_83384:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83385
L_83389:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83390+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83390
.p2align 0x4
.long 0x451
L_83390:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83385:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_224+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x115D
L_83313:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83314
L_83465:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83466+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83466
.p2align 0x4
.long 0x116E
L_83466:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83314:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x50(%rbp)
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1,0xA0(%rbp)
	movl $0x0,0xA8(%rbp)
	addq $0xA0,%rbp
	leaq (L_83315+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
.long 0x116F
L_83468:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0xB0(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0xB8(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0xC0(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0xD0(%rbp),%r15
	movq %r15,0xA8(%rbp)
	movq 0xD8(%rbp),%r15
	movq %r15,0xB0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83469
L_83484:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83485+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83485
.p2align 0x4
.long 0x1174
L_83485:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83469:
	movq 0x78(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	jne L_408366
L_83471:
	movq 0x60(%rbp),%r13
	movb 0x0(%r13),%r15b
	testb %r15b,%r15b
	jnz L_408364
L_83472:
	movq 0x38(%rbp),%r15
	movq %r15,0xC0(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xC0,%rbp
	leaq (L_83473+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408364:
L_83483:
	movq $0x1,0x38(%rbp)
L_83475:
	movq 0xB0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82902
L_83477:
	movl %r13d,0xA8(%rbp)
	movq $0x395B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (x_252+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408366:
	movq %r14,%r15
L_83317:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r13
	cmpq $0x1,%r13
	je L_408384
L_83318:
	movq 0x0(%r13),%r15
	movq $0x1E77,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x0(%r13)
	addq $0x18,%r12
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%r13)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	movq %r15,0x38(%rbp)
	addq $0x18,%r12
L_83319:
	movq 0x58(%rbp),%r11
	movq 0x8(%r11),%r10
	movq 0x8(%r10),%r9
	movq %r9,0x50(%rbp)
	movq 0x0(%r10),%r14
	movq 0x28(%rbp),%r11
	movq 0x10(%r11),%r10
	movq %r10,0x60(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_83274
L_83320:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408382
L_83321:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_83323:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408381
L_83454:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD47,%r11
	jne L_408380
L_83455:
	cmpq %r14,0x0(%r13)
	movq %r14,(localObjptr+0x8)(%rip)
	je L_408377
L_83324:
	incl %ecx
	movl %ecx,0x28(%rbp)
	jo L_82932
L_83325:
	cmpq $0x1,%r15
	je L_408367
L_83326:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x8)(%rip),%r14
	jmp L_83323
.p2align 0x4
L_408367:
L_83327:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83328
L_83452:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83453+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83453
.p2align 0x4
.long 0x116C
L_83453:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83328:
	movl 0x28(%rbp),%ecx
L_83329:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83330:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83332
L_83451:
	movl %ecx,0x0(%r15)
L_83332:
	movq $0x1A8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x60(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq 0x90(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF28,%r14
	je L_408372
	cmpq $0xF29,%r14
	je L_408371
	cmpq $0xF2A,%r14
	je L_408370
	cmpq $0xF2B,%r14
	je L_408369
	cmpq $0xF2C,%r14
	je L_83448
L_83333:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	jmp L_83334
.p2align 0x4
L_408369:
L_83428:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
	jmp L_83429
.p2align 0x4
L_408370:
L_83418:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
	jmp L_83419
.p2align 0x4
L_408371:
L_83408:
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,%r15
	jmp L_83409
.p2align 0x4
L_408372:
L_83359:
	movl 0x0(%r15),%r14d
	movl %r14d,0x28(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,%r15
	jmp L_83360
.p2align 0x4
L_408377:
L_83457:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83458:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83298
L_83460:
	movl %ecx,0x0(%r15)
	jmp L_83298
.p2align 0x4
L_408380:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83324
.p2align 0x4
L_408381:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83324
.p2align 0x4
L_408382:
L_83461:
	xorl %ecx,%ecx
	jmp L_83329
.p2align 0x4
L_408384:
L_83462:
	movq %r15,0x38(%rbp)
	jmp L_83319
.p2align 0x4
.long 0x1189
L_83653:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0xB0(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0xB8(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xC0(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xA8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83654
L_83818:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83819+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83819
.p2align 0x4
.long 0x118A
L_83819:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83654:
	movq 0x70(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	movq %r11,0x38(%rbp)
	cmpq %r14,%r11
	jne L_82902
L_83656:
	movq 0xA8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r14,%r10
	jne L_82902
L_83658:
	cmpl %r11d,%r13d
	je L_408386
L_83659:
	movq (globalObjptr+0x4E0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408386:
L_83660:
	movq 0x38(%rbp),%r15
	testq %r15,%r15
	jz L_408391
L_83661:
	cmpq $0x7FFFFFFF,%r15
	ja L_82946
L_83662:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83663
L_83814:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83815+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83815
.p2align 0x4
.long 0x118A
L_83815:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83663:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x155D,%rcx
	movq 0x38(%rbp),%rdx
	movq $0x10,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83664+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83664
.p2align 0x4
.long 0x118A
L_83664:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq %rax,0x40(%rbp)
L_83665:
	movq $0x0,0x88(%rbp)
loop_973:
	movq 0x38(%rbp),%r15
	cmpq %r15,0x88(%rbp)
	jl L_408388
L_83666:
	movq 0x40(%rbp),%r15
	movq $0xBC1,0xFFFFFFFFFFFFFFF8(%r15)
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x38(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82902
L_83668:
	movq $0x3953,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	movq %r14,0x90(%rbp)
	movl %r13d,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_83669+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408388:
L_83779:
	movq 0x88(%rbp),%r15
	movl %r15d,%r14d
	movslq %r14d,%r15
	movq %r15,%r14
	movq %r15,%r13
	movq 0x70(%rbp),%r11
	movq 0x0(%r11,%r15,8),%r10
	movq %r10,0xB8(%rbp)
	salq $0x4,%r14
	movq 0xA8(%rbp),%r15
	movl 0x0(%r15,%r14,1),%r11d
	movl %r11d,0x90(%rbp)
	salq $0x4,%r13
	movq 0x8(%r15,%r13,1),%r14
	movq %r14,0x98(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (L_83780+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408391:
L_83817:
	movq (globalObjptr+0x2300)(%rip),%r14
	movq %r14,0x40(%rbp)
	jmp L_83665
.p2align 0x4
.long 0x1175
L_83487:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x98(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0xA8(%rbp),%r15
	movq %r15,0x88(%rbp)
	movq 0xB0(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0xB8(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xC0(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xA8(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (L_83488+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
.long 0x112E
L_82925:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82926
L_82959:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_82960+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82960
.p2align 0x4
.long 0x1130
L_82960:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_82926:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_193
L_82927:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_726
L_82928:
	movq $0x1E5B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movl 0x40(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x28(%rbp)
	jmp L_82929
.p2align 0x4
bug_726:
bug_193:
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_82951+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_82987:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82988
L_82992:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82993+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82993
.p2align 0x4
.long 0x451
L_82993:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82988:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_200+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x112D
L_82920:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82921
L_82970:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_82971+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82971
.p2align 0x4
.long 0x1131
L_82971:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_82921:
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_195
L_82922:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_728
L_82923:
	movq $0x1E79,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x60(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	jmp L_82924
.p2align 0x4
bug_728:
bug_195:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_82962+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_82973:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82974
L_82978:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82979+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82979
.p2align 0x4
.long 0x451
L_82979:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82974:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_198+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_83009:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83010
L_83014:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83015+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83015
.p2align 0x4
.long 0x451
L_83015:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83010:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_202+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_83093:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83094
L_83098:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83099+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83099
.p2align 0x4
.long 0x451
L_83099:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83094:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_210+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_83057:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83058
L_83062:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83063+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83063
.p2align 0x4
.long 0x451
L_83063:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83058:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_208+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1137
L_83024:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83025
L_83040:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_83041+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83041
.p2align 0x4
.long 0x1138
L_83041:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_83025:
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_203
L_83026:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_730
L_83027:
	movq $0x1E79,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,%r15
	jmp L_83028
.p2align 0x4
bug_730:
bug_203:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83032+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_83043:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83044
L_83048:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83049+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83049
.p2align 0x4
.long 0x451
L_83049:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83044:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_206+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1140
L_83112:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83113
L_83244:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83245+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83245
.p2align 0x4
.long 0x1150
L_83245:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83113:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1,0xC0(%rbp)
	movl $0x0,0xC8(%rbp)
	addq $0xC0,%rbp
	leaq (L_83114+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
.long 0x1151
L_83247:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0xD0(%rbp),%r15
	movq %r15,0x78(%rbp)
	movq 0xD8(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0xE0(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0xE8(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xF0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0xF8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83248
L_83263:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_83264+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83264
.p2align 0x4
.long 0x1156
L_83264:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_83248:
	movq 0x80(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_408415
L_83249:
	movq %r14,0x28(%rbp)
L_83116:
	movq 0x88(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	jne L_408412
L_83210:
	movq 0xA8(%rbp),%r15
	movl %r15d,%r13d
	movl %r13d,0x40(%rbp)
	movslq %r13d,%r11
	cmpq %r15,%r11
	jne L_82902
L_83212:
	cmpl $0x0,%r13d
	jl L_408410
L_83213:
	movq $0x1,0x48(%rbp)
	movl $0x0,0x44(%rbp)
	movl $0x0,0x58(%rbp)
loop_971:
	movl 0x40(%rbp),%r14d
	cmpl %r14d,0x58(%rbp)
	jl L_408409
L_83214:
	movq $0xC59,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x40(%rbp)
	addq $0x10,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408408
L_83215:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_83216:
	incl %ecx
	movl %ecx,0x48(%rbp)
	jo L_82932
L_83217:
	cmpq $0x1,%r15
	je L_408405
L_83218:
	movq 0x8(%r15),%r15
	jmp L_83216
.p2align 0x4
L_408405:
L_83219:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83220
L_83230:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83231+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83231
.p2align 0x4
.long 0x114C
L_83231:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83220:
	movl 0x48(%rbp),%ecx
L_83221:
	movl %ecx,0xC8(%rbp)
	movq $0x3743,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_83222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_8
.p2align 0x4
L_408408:
L_83232:
	xorl %ecx,%ecx
	jmp L_83221
.p2align 0x4
L_408409:
L_83233:
	movslq 0x58(%rbp),%r15
	salq $0x4,%r15
	movq 0xA0(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0xC0(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xC0,%rbp
	leaq (length_11+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalTypes_0
.p2align 0x4
L_408410:
L_83241:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408412:
	movq %r14,%r15
L_83118:
	movq 0xB0(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	jnb L_83109
L_83120:
	movl 0x0(%r15,%r14,4),%r13d
	movl %r13d,0x40(%rbp)
	movq 0x68(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF3C,%r14
	je L_408413
L_83194:
	movq 0x0(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x78(%rbp)
	movq %r14,0x70(%rbp)
	addq $0x70,%rbp
	leaq (L_83195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408413:
L_83121:
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x70(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x78(%rbp)
	movq %r14,0x88(%rbp)
	movq %r13,0x90(%rbp)
	addq $0x88,%rbp
	leaq (L_83122+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408415:
L_83250:
	movq 0x40(%rbp),%r14
	movb 0x0(%r14),%r15b
	testb %r15b,%r15b
	jnz L_408416
L_83251:
	movq 0x28(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0xD8(%rbp)
	addq $0xD0,%rbp
	leaq (L_83252+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408416:
L_83262:
	movq $0x1,0x28(%rbp)
L_83254:
	movq 0xC0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83256:
	movl %r13d,0xC8(%rbp)
	movq $0x395B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x58(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (x_251+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
.long 0x1
bug_220:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83351
L_83352:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83353+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83353
.p2align 0x4
.long 0x451
L_83353:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83351:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_228:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83439
L_83440:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83441+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83441
.p2align 0x4
.long 0x451
L_83441:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83439:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_226:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83400
L_83401:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83402+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83402
.p2align 0x4
.long 0x451
L_83402:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83400:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_83373:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83374
L_83378:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83379+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83379
.p2align 0x4
.long 0x451
L_83379:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83374:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_224:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83386
L_83387:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83388+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83388
.p2align 0x4
.long 0x451
L_83388:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83386:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x115C
L_83315:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83316
L_83463:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83464+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83464
.p2align 0x4
.long 0x116D
L_83464:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83316:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83317
.p2align 0x4
.long 0x1170
L_83473:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83474
L_83481:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83482+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83482
.p2align 0x4
.long 0x1173
L_83482:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83474:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x38(%rbp)
	jmp L_83475
.p2align 0x4
.long 0x1171
x_252:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83478
L_83479:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83480+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83480
.p2align 0x4
.long 0x1172
L_83480:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83478:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x78(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_83317
.p2align 0x4
.long 0x118B
L_83669:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83670
L_83777:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83778+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83778
.p2align 0x4
.long 0x1196
L_83778:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83670:
	movq 0x30(%rbp),%r14
	movb 0x0(%r14),%r15b
	testb %r15b,%r15b
	jnz L_408427
L_83671:
	movq 0x78(%rbp),%r15
	movq %r15,0x90(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x90,%rbp
	leaq (L_83672+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408427:
L_83752:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r11,0x28(%rbp)
	addq $0x18,%r12
	movq 0x50(%rbp),%r10
	movq %r10,0x0(%r11)
	movq $0x1,0x8(%r11)
	movq 0x68(%rbp),%r11
	movq 0x8(%r11),%r10
	movq 0x8(%r10),%r9
	movq %r9,0x30(%rbp)
	movq 0x0(%r10),%r14
	movq 0x80(%rbp),%r11
	movq 0x10(%r11),%r10
	movq %r10,0x38(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_83274
L_83753:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408438
L_83754:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_83756:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408437
L_83769:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD47,%r11
	jne L_408436
L_83770:
	cmpq %r14,0x0(%r13)
	movq %r14,(localObjptr+0x8)(%rip)
	je L_408433
L_83757:
	incl %ecx
	movl %ecx,0x40(%rbp)
	jo L_82932
L_83758:
	cmpq $0x1,%r15
	je L_408428
L_83759:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x8)(%rip),%r14
	jmp L_83756
.p2align 0x4
L_408428:
L_83760:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83761
L_83767:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_83768+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83768
.p2align 0x4
.long 0x1159
L_83768:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_83761:
	movl 0x40(%rbp),%ecx
L_83762:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83763:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83765
L_83766:
	movl %ecx,0x0(%r15)
L_83765:
	movq $0x1A8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq $0x1,0x28(%rbp)
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
L_408433:
L_83772:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83773:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83298
L_83775:
	movl %ecx,0x0(%r15)
	jmp L_83298
.p2align 0x4
L_408436:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83757
.p2align 0x4
L_408437:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83757
.p2align 0x4
L_408438:
L_83776:
	xorl %ecx,%ecx
	jmp L_83762
.p2align 0x4
.long 0x1197
L_83780:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0xA0(%rbp)
	movq 0x98(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF40,%r14
	je L_408441
L_83781:
	movq %r15,0xB8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (L_83782+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408441:
L_83795:
	movq %r15,0xB8(%rbp)
	addq $0xB8,%rbp
	leaq (L_83796+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp value_1
.p2align 0x4
.long 0x1176
L_83488:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83489
L_83634:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83635+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83635
.p2align 0x4
.long 0x1187
L_83635:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83489:
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r13
	movslq 0x28(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_83109
L_83491:
	movq %r15,%r11
	salq $0x4,%r11
	movl 0x0(%r14,%r11,1),%r10d
	salq $0x4,%r15
	movq 0x8(%r14,%r15,1),%r11
	cmpq $0x1,%r13
	je L_408446
L_83492:
	testl %r10d,%r10d
	jnz L_408443
L_83493:
	movq 0x58(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF3C,%r14
	je L_408442
L_83605:
	movq %r11,0x38(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
L_83606:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xC0(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xB8,%rbp
	leaq (L_83607+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408442:
L_83494:
	movq %r11,0x48(%rbp)
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
L_83495:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq %r14,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (L_83496+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408443:
L_83622:
	movq 0x0(%r11),%r15
	movq 0x8(%r11),%r14
	cmpq $0x1,%r14
	je L_408445
L_83623:
	movq 0x0(%r14),%r13
	movq $0x1E77,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq %r14,0x28(%rbp)
L_83624:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83626:
	movl %r13d,0xC0(%rbp)
	movq $0x3957,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0xB8(%rbp)
	addq $0x10,%r12
	addq $0xB8,%rbp
	leaq (x_253+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408445:
L_83632:
	movq $0x1,0x28(%rbp)
	jmp L_83624
.p2align 0x4
L_408446:
L_83633:
	movq %r11,0x30(%rbp)
	movq $0x1,0x28(%rbp)
L_83512:
	movq 0x68(%rbp),%r11
	movq 0x8(%r11),%r10
	movq 0x8(%r10),%r9
	movq %r9,0x38(%rbp)
	movq 0x0(%r10),%r14
	movq 0x80(%rbp),%r11
	movq 0x10(%r11),%r10
	movq %r10,0x40(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_83274
L_83513:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408458
L_83514:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_83516:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408457
L_83531:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD47,%r11
	jne L_408456
L_83532:
	cmpq 0x0(%r13),%r14
	movq %r14,(localObjptr+0x8)(%rip)
	je L_408453
L_83517:
	incl %ecx
	movl %ecx,0x48(%rbp)
	jo L_82932
L_83518:
	cmpq $0x1,%r15
	je L_408447
L_83519:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x8)(%rip),%r14
	jmp L_83516
.p2align 0x4
L_408447:
L_83520:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83521
L_83529:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_83530+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83530
.p2align 0x4
.long 0x1179
L_83530:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_83521:
	movl 0x48(%rbp),%ecx
L_83522:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83523:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83525
L_83528:
	movl %ecx,0x0(%r15)
L_83525:
	movq $0x1A8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r15)
	movq 0x40(%rbp),%r13
	movq 0x0(%r13),%r14
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r14,0x8(%r11)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r15,1)
	movq %r11,0x0(%r13)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408448
L_83526:
	movq 0x8(%r14),%r15
	xorl %ecx,%ecx
	jmp L_82931
.p2align 0x4
L_408448:
L_83527:
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
L_408453:
L_83534:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83535:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83298
L_83537:
	movl %ecx,0x0(%r15)
	jmp L_83298
.p2align 0x4
L_408456:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83517
.p2align 0x4
L_408457:
	movq %r14,(localObjptr+0x8)(%rip)
	jmp L_83517
.p2align 0x4
L_408458:
L_83538:
	xorl %ecx,%ecx
	jmp L_83522
.p2align 0x4
.long 0x1
L_82951:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82952
L_82956:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82957+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82957
.p2align 0x4
.long 0x451
L_82957:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82952:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_194+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_200:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82989
L_82990:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82991+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82991
.p2align 0x4
.long 0x451
L_82991:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82989:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_82962:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82963
L_82967:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82968+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82968
.p2align 0x4
.long 0x451
L_82968:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82963:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_196+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_198:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82975
L_82976:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82977+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82977
.p2align 0x4
.long 0x451
L_82977:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82975:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_202:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83011
L_83012:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83013+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83013
.p2align 0x4
.long 0x451
L_83013:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83011:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_210:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83095
L_83096:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83097+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83097
.p2align 0x4
.long 0x451
L_83097:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83095:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_208:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83059
L_83060:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83061+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83061
.p2align 0x4
.long 0x451
L_83061:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83059:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_83032:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83033
L_83037:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83038+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83038
.p2align 0x4
.long 0x451
L_83038:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83033:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_204+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_206:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83045
L_83046:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83047+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83047
.p2align 0x4
.long 0x451
L_83047:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83045:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1141
L_83114:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83115
L_83242:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83243+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83243
.p2align 0x4
.long 0x114F
L_83243:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83115:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x28(%rbp)
	jmp L_83116
.p2align 0x4
.long 0x114B
L_83222:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83223
L_83228:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83229+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83229
.p2align 0x4
.long 0x114C
L_83229:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83223:
	movq 0x40(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83225:
	movl %r13d,%r14d
	decl %r14d
	jo L_82932
L_83226:
	movl %r13d,0xC8(%rbp)
	movq $0x3745,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r14d,0x0(%r13)
	addq $0x18,%r12
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r13,0xC0(%rbp)
	addq $0xC0,%rbp
	leaq (L_83227+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_8
.p2align 0x4
.long 0x114D
length_11:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x78(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83234
L_83238:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83239+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83239
.p2align 0x4
.long 0x114E
L_83239:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83234:
	movq 0x78(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83236:
	movl 0x44(%rbp),%r15d
	addl %r15d,%r13d
	jo L_82932
L_83237:
	movq $0x1B59,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl %r13d,0x44(%rbp)
	movl $0x0,0x4(%r14)
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x48(%rbp)
	incl 0x58(%rbp)
	jmp loop_971
.p2align 0x4
.long 0x1149
L_83195:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x68(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83196
L_83208:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x78,%rbp
	leaq (L_83209+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83209
.p2align 0x4
.long 0x114A
L_83209:
	addq $0xFFFFFFFFFFFFFF88,%rbp
L_83196:
	movq 0x68(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_217
L_83197:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_732
L_83198:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x48(%rbp)
	addq $0x10,%r12
L_83129:
	movq 0x28(%rbp),%r15
	cmpq $0x1,0x8(%r15)
	je L_408478
L_83130:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x60(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x58,%rbp
	leaq (L_83131+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
L_408478:
L_83146:
	movq 0x38(%rbp),%r15
	movq %r15,0x70(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x78(%rbp)
	addq $0x70,%rbp
	leaq (L_83147+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_732:
bug_217:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83200+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1142
L_83122:
	addq $0xFFFFFFFFFFFFFF78,%rbp
	movq 0x88(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r15,0x68(%rbp)
	cmpq $0x1,%r14
	je bug_215
L_83123:
	movq 0x8(%r14),%r15
	movq %r15,0x68(%rbp)
	cmpq $0x1,%r15
	je bug_734
L_83124:
	movq 0x48(%rbp),%r15
	movq %r15,0x80(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0x88(%rbp)
	addq $0x80,%rbp
	leaq (L_83125+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_734:
bug_215:
	movq 0x58(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83186+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1152
L_83252:
	addq $0xFFFFFFFFFFFFFF30,%rbp
	movq 0xD0(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83253
L_83260:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD0,%rbp
	leaq (L_83261+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83261
.p2align 0x4
.long 0x1155
L_83261:
	addq $0xFFFFFFFFFFFFFF30,%rbp
L_83253:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x28(%rbp)
	jmp L_83254
.p2align 0x4
.long 0x1153
x_251:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83257
L_83258:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83259+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83259
.p2align 0x4
.long 0x1154
L_83259:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83257:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x80(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	movq %r15,0x28(%rbp)
	jmp L_83116
.p2align 0x4
.long 0x1
bug_222:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83375
L_83376:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83377+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83377
.p2align 0x4
.long 0x451
L_83377:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83375:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x118C
L_83672:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83673
L_83750:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83751+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83751
.p2align 0x4
.long 0x1195
L_83751:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83673:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r15)
	movq 0x80(%rbp),%r11
	movq %r11,0x8(%r15)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r10,0x48(%rbp)
	movq %r15,0x8(%r10)
	addq $0x18,%r12
	movq 0x50(%rbp),%r9
	movq %r9,0x0(%r10)
	movq 0x68(%rbp),%r10
	movq 0x8(%r10),%r9
	movq 0x8(%r9),%r8
	movq %r8,0x58(%rbp)
	movq 0x0(%r9),%r14
	movq 0x10(%r11),%r10
	movq %r10,0x60(%rbp)
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r15
	incq %r15
	jo L_83274
L_83674:
	movq %r15,0x0(%r11)
	movq 0x0(%r10),%r11
	cmpq $0x1,%r11
	je L_408500
L_83675:
	movq 0x0(%r11),%r13
	movq 0x8(%r11),%r11
	xorl %ecx,%ecx
	movq %r11,%r15
.p2align 0x4,,0x7
L_83677:
	movq %r13,%r11
	andq $0x3,%r11
	jnz L_408499
L_83742:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r11
	shrq $0x1,%r11
	cmpq $0xD47,%r11
	jne L_408498
L_83743:
	cmpq 0x0(%r13),%r14
	movq %r14,(localObjptr+0x10)(%rip)
	je L_408495
L_83678:
	incl %ecx
	movl %ecx,0x3C(%rbp)
	jo L_82932
L_83679:
	cmpq $0x1,%r15
	je L_408483
L_83680:
	movq 0x0(%r15),%r13
	movq 0x8(%r15),%r15
	movq (localObjptr+0x10)(%rip),%r14
	jmp L_83677
.p2align 0x4
L_408483:
L_83681:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83682
L_83740:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83741+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83741
.p2align 0x4
.long 0x118E
L_83741:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83682:
	movl 0x3C(%rbp),%ecx
L_83683:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83684:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83686
L_83739:
	movl %ecx,0x0(%r15)
L_83686:
	movq $0x1A8F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x60(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x28DF,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	movq 0x50(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%ecx
	movslq %ecx,%r13
	cmpq %r14,%r13
	jne L_82902
L_83688:
	decl %ecx
	jo L_82932
L_83689:
	movq $0x1,0x48(%rbp)
loop_974:
	cmpl $0x0,%ecx
	jl L_408484
L_83690:
	movl %ecx,%r15d
	decl %r15d
	movl %r15d,0x3C(%rbp)
	movslq %ecx,%r15
	salq $0x4,%r15
	movq 0x50(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0x98(%rbp)
	movq $0x1,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83691+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3847
.p2align 0x4
L_408484:
L_83703:
	movq $0x19D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x50(%rbp)
	addq $0x10,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408488
L_83704:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_83705:
	incl %ecx
	movl %ecx,0x3C(%rbp)
	jo L_82932
L_83706:
	cmpq $0x1,%r15
	je L_408485
L_83707:
	movq 0x8(%r15),%r15
	jmp L_83705
.p2align 0x4
L_408485:
L_83708:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83709
L_83736:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83737+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83737
.p2align 0x4
.long 0x1194
L_83737:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83709:
	movl 0x3C(%rbp),%ecx
L_83710:
	movl %ecx,0x98(%rbp)
	movq $0x4009,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83711+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408488:
L_83738:
	xorl %ecx,%ecx
	jmp L_83710
.p2align 0x4
L_408495:
L_83745:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_83285
L_83746:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_83298
L_83748:
	movl %ecx,0x0(%r15)
	jmp L_83298
.p2align 0x4
L_408498:
	movq %r14,(localObjptr+0x10)(%rip)
	jmp L_83678
.p2align 0x4
L_408499:
	movq %r14,(localObjptr+0x10)(%rip)
	jmp L_83678
.p2align 0x4
L_408500:
L_83749:
	xorl %ecx,%ecx
	jmp L_83683
.p2align 0x4
.long 0x1198
L_83782:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x98(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83783
L_83793:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83794+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83794
.p2align 0x4
.long 0x119B
L_83794:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83783:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0xB0(%rbp)
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1,0xC0(%rbp)
	movl $0x0,0xC8(%rbp)
	addq $0xC0,%rbp
	leaq (L_83784+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
.long 0x119D
L_83796:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0xB0(%rbp)
	movq 0xC0(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0xC8(%rbp),%r15
	movq %r15,0xC0(%rbp)
	movq 0xD0(%rbp),%r15
	movq %r15,0xC8(%rbp)
	movq 0xD8(%rbp),%r15
	movq %r15,0xD0(%rbp)
	movq 0xE0(%rbp),%r15
	movq %r15,0xD8(%rbp)
	movq 0xE8(%rbp),%r15
	movq %r15,0xE0(%rbp)
	movq 0xF0(%rbp),%r15
	movq %r15,0xE8(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83797
L_83812:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xF8,%rbp
	leaq (L_83813+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83813
.p2align 0x4
.long 0x11A2
L_83813:
	addq $0xFFFFFFFFFFFFFF08,%rbp
L_83797:
	movq 0xC8(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	jne L_408506
L_83799:
	movq 0xB0(%rbp),%r13
	movb 0x0(%r13),%r15b
	testb %r15b,%r15b
	jnz L_408504
L_83800:
	movq 0x98(%rbp),%r15
	movq %r15,0xF8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0x100(%rbp)
	addq $0xF8,%rbp
	leaq (L_83801+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalType_0
.p2align 0x4
L_408504:
L_83811:
	movq $0x1,0x98(%rbp)
L_83803:
	movq 0xE8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83805:
	movl %r13d,0xE0(%rbp)
	movq $0x395B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x58(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0xD8(%rbp)
	addq $0xD8,%rbp
	leaq (x_254+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408506:
	movq %r14,%r15
L_83786:
	movq %r15,0xB8(%rbp)
	movq 0xA0(%rbp),%r15
	movq %r15,0xC0(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0xC8(%rbp)
	addq $0xB8,%rbp
	leaq (L_83787+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1467
.p2align 0x4
.long 0x1183
L_83607:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83608
L_83620:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83621+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83621
.p2align 0x4
.long 0x1184
L_83621:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83608:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_233
L_83609:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_736
L_83610:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	addq $0x10,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
L_83503:
	movq 0x90(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	jne L_408515
L_83551:
	movq 0xA8(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	movl %r13d,%r11d
	movl %r11d,0x38(%rbp)
	movslq %r11d,%r10
	cmpq %r10,%r13
	jne L_82902
L_83553:
	cmpl $0x0,%r11d
	jl L_83241
L_83554:
	movq $0x1,0x48(%rbp)
	movl $0x0,0x3C(%rbp)
	movl $0x0,0x50(%rbp)
loop_972:
	movl 0x38(%rbp),%r14d
	cmpl %r14d,0x50(%rbp)
	jl L_408512
L_83555:
	movq $0xC59,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x38(%rbp)
	addq $0x10,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408511
L_83556:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_83557:
	incl %ecx
	movl %ecx,0x48(%rbp)
	jo L_82932
L_83558:
	cmpq $0x1,%r15
	je L_408508
L_83559:
	movq 0x8(%r15),%r15
	jmp L_83557
.p2align 0x4
L_408508:
L_83560:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83561
L_83574:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83575+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83575
.p2align 0x4
.long 0x117F
L_83575:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83561:
	movl 0x48(%rbp),%ecx
L_83562:
	movl %ecx,0xA8(%rbp)
	movq $0x3743,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_83563+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_8
.p2align 0x4
L_408511:
L_83576:
	xorl %ecx,%ecx
	jmp L_83562
.p2align 0x4
L_408512:
L_83577:
	movslq 0x50(%rbp),%r15
	salq $0x4,%r15
	movq 0xA8(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0xB8(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (length_12+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp finalTypes_0
.p2align 0x4
L_408515:
	movq %r14,%r15
L_83505:
	movq 0x40(%rbp),%r13
	cmpq 0xFFFFFFFFFFFFFFF0(%r15),%r13
	jnb L_83109
L_83507:
	movl 0x0(%r15,%r13,4),%r11d
	movl %r11d,0x38(%rbp)
	movq $0xBBF,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	addq $0x18,%r12
	movq 0x28(%rbp),%r11
	movq %r11,0x0(%r13)
	movq 0x78(%rbp),%r11
	movq %r11,0x8(%r13)
	movq 0x30(%rbp),%r14
	movq 0x0(%r14),%r11
	movq %r11,0x48(%rbp)
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je L_408518
L_83508:
	movq 0x0(%r15),%r11
	movq %r11,0x40(%rbp)
	cmpq $0x1,0x8(%r15)
	je L_408517
L_83509:
	movq $0x1,%r15
L_83510:
	movl 0x38(%rbp),%r13d
	incl %r13d
	jo L_82932
L_83511:
	movq %r15,0x28(%rbp)
	movq %r14,0x30(%rbp)
	jmp L_83512
.p2align 0x4
L_408517:
L_83539:
	movq 0x78(%rbp),%r15
	movq %r15,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83540+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_408518:
L_83544:
	movq $0xBBD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x28(%rbp)
	addq $0x18,%r12
	movl 0x38(%rbp),%r11d
	movl %r11d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq $0x1,0x8(%r15)
	movq 0x48(%rbp),%r11
	movq 0xFFFFFFFFFFFFFFF0(%r11),%r10
	movl %r10d,%r9d
	movslq %r9d,%r8
	cmpq %r10,%r8
	jne L_82902
L_83546:
	movl %r9d,0x98(%rbp)
	movq $0x3955,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x0(%r10)
	addq $0x20,%r12
	movq %r15,0x8(%r10)
	movq %r11,0x10(%r10)
	movq %r10,0x90(%rbp)
	addq $0x90,%rbp
	leaq (L_83547+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
bug_736:
bug_233:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83612+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1177
L_83496:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r14
	je bug_231
L_83497:
	movq 0x8(%r14),%r15
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r15
	je bug_738
L_83498:
	movq 0x28(%rbp),%r15
	movq %r15,0xB8(%rbp)
	movq 0x58(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB8,%rbp
	leaq (L_83499+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_61
.p2align 0x4
bug_738:
bug_231:
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83597+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1185
x_253:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83627
L_83630:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83631+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83631
.p2align 0x4
.long 0x1186
L_83631:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83627:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x58(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xF3C,%r13
	je L_408522
L_83629:
	movq %r15,0x38(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x28(%rbp)
	jmp L_83606
.p2align 0x4
L_408522:
L_83628:
	movq %r15,0x48(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x38(%rbp)
	jmp L_83495
.p2align 0x4
.long 0x1
bug_194:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82953
L_82954:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82955+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82955
.p2align 0x4
.long 0x451
L_82955:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82953:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_196:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_82964
L_82965:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_82966+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_82966
.p2align 0x4
.long 0x451
L_82966:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_82964:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_204:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83034
L_83035:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83036+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83036
.p2align 0x4
.long 0x451
L_83036:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83034:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x114B
L_83227:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x88(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_83118
.p2align 0x4
.long 0x112E
L_83131:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83132
L_83144:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_83145+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83145
.p2align 0x4
.long 0x1130
L_83145:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_83132:
	movq 0x30(%rbp),%r14
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_211
L_83133:
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_740
L_83134:
	movq $0x1E5B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x20,%r12
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq $0x1,0x8(%r14)
	movq $0x1,%r15
	xorl %ecx,%ecx
	jmp L_82931
.p2align 0x4
bug_740:
bug_211:
	movq 0x38(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83136+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1144
L_83147:
	addq $0xFFFFFFFFFFFFFF90,%rbp
	movq 0x70(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x58(%rbp)
	movq 0x60(%rbp),%r14
	movq %r14,0x68(%rbp)
	movq %r15,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_83148+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1467
.p2align 0x4
.long 0x1
L_83200:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83201
L_83205:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83206+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83206
.p2align 0x4
.long 0x451
L_83206:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83201:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_218+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1143
L_83125:
	addq $0xFFFFFFFFFFFFFF80,%rbp
	movq 0x80(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83126
L_83183:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x80,%rbp
	leaq (L_83184+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83184
.p2align 0x4
.long 0x1148
L_83184:
	addq $0xFFFFFFFFFFFFFF80,%rbp
L_83126:
	movq 0x58(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_213
L_83127:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_742
L_83128:
	movq $0x1E79,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x68(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x48(%rbp)
	jmp L_83129
.p2align 0x4
bug_742:
bug_213:
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83175+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_83186:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83187
L_83191:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83192+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83192
.p2align 0x4
.long 0x451
L_83192:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83187:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_216+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x118D
L_83691:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83692
L_83701:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83702+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83702
.p2align 0x4
.long 0x118F
L_83702:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83692:
	movq 0x58(%rbp),%r15
	cmpq $0x1,%r15
	je L_408533
L_83693:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r15
	movq %r15,0x58(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq %r14,0x48(%rbp)
.p2align 0x4,,0x7
L_83694:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408532
.p2align 0x4,,0x7
L_83695:
	movq $0x1CE1,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x60(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x48(%rbp),%r14
	cmpq $0x1,%r14
	je L_408531
L_83696:
	movq %r15,0x60(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x58(%rbp)
	jmp L_83694
.p2align 0x4
L_408531:
L_83697:
	movq %r15,0x48(%rbp)
	movl 0x3C(%rbp),%ecx
	jmp loop_974
.p2align 0x4
L_408532:
L_83698:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83699+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83699
.p2align 0x4
.long 0x118E
L_83699:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	jmp L_83695
.p2align 0x4
L_408533:
L_83700:
	movl 0x3C(%rbp),%ecx
	jmp loop_974
.p2align 0x4
.long 0x1190
L_83711:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x48(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83712
L_83734:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83735+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83735
.p2align 0x4
.long 0x1193
L_83735:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83712:
	movq $0x1E55,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x20,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x80(%rbp),%r15
	movq %r15,0x10(%r14)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	addq $0x18,%r12
	movq $0x1,0x8(%r15)
	movl 0x38(%rbp),%ecx
	decl %ecx
	jo L_82932
L_83713:
	movq %r15,0x28(%rbp)
.p2align 0x4,,0x7
loop_975:
	cmpl $0x0,%ecx
	jl L_408541
L_83714:
	movl %ecx,%r15d
	decl %r15d
	movl %r15d,0x30(%rbp)
	movslq %ecx,%r15
	salq $0x4,%r15
	movq 0x40(%rbp),%r14
	movq 0x0(%r14,%r15,1),%r13
	cmpq $0x1,0x28(%rbp)
	je L_408540
L_83715:
	cmpq $0x1,%r13
	je L_408539
L_83716:
	movq 0x8(%r13),%r15
	movq %r15,0x38(%rbp)
	movq 0x0(%r13),%r15
	movq %r15,0x48(%rbp)
	movq $0x1,0x50(%rbp)
L_83717:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408538
.p2align 0x4,,0x7
L_83718:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	cmpq $0x1,%r14
	je L_408535
L_83719:
	movq %r15,0x50(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x38(%rbp)
	movq %r15,0x48(%rbp)
	jmp L_83717
.p2align 0x4
L_408535:
L_83720:
	movq 0x48(%rbp),%r15
	movq %r15,0x38(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x28(%rbp)
L_83721:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408537
.p2align 0x4,,0x7
L_83722:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408536
L_83723:
	movq %r15,0x48(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x38(%rbp)
	jmp L_83721
.p2align 0x4
L_408536:
L_83724:
	movq %r15,0x28(%rbp)
	movl 0x30(%rbp),%ecx
	jmp loop_975
.p2align 0x4
L_408537:
L_83725:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_83726+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83726
.p2align 0x4
.long 0x1191
L_83726:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_83722
.p2align 0x4
L_408538:
L_83727:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_83728+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83728
.p2align 0x4
.long 0x1192
L_83728:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	jmp L_83718
.p2align 0x4
L_408539:
L_83729:
	movl 0x30(%rbp),%ecx
	jmp loop_975
.p2align 0x4
L_408540:
L_83730:
	movq %r13,0x28(%rbp)
	movl 0x30(%rbp),%ecx
	jmp loop_975
.p2align 0x4
L_408541:
L_83731:
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408542
L_83732:
	movq 0x8(%r14),%r15
	xorl %ecx,%ecx
	jmp L_82931
.p2align 0x4
L_408542:
L_83733:
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
.long 0x1199
L_83784:
	addq $0xFFFFFFFFFFFFFF40,%rbp
	movq 0xC0(%rbp),%r15
	movq %r15,0x98(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83785
L_83791:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xC0,%rbp
	leaq (L_83792+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83792
.p2align 0x4
.long 0x119C
L_83792:
	addq $0xFFFFFFFFFFFFFF40,%rbp
L_83785:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0xB0(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83786
.p2align 0x4
.long 0x119E
L_83801:
	addq $0xFFFFFFFFFFFFFF08,%rbp
	movq 0xF8(%rbp),%r15
	movq %r15,0x98(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83802
L_83809:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xF8,%rbp
	leaq (L_83810+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83810
.p2align 0x4
.long 0x11A1
L_83810:
	addq $0xFFFFFFFFFFFFFF08,%rbp
L_83802:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x98(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x98(%rbp)
	jmp L_83803
.p2align 0x4
.long 0x119F
x_254:
	addq $0xFFFFFFFFFFFFFF28,%rbp
	movq 0xD8(%rbp),%r15
	movq %r15,0xB0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83806
L_83807:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xD8,%rbp
	leaq (L_83808+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83808
.p2align 0x4
.long 0x11A0
L_83808:
	addq $0xFFFFFFFFFFFFFF28,%rbp
L_83806:
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0xB0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x98(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0xC8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq %r15,0x0(%r14)
	jmp L_83786
.p2align 0x4
.long 0x119A
L_83787:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x98(%rbp)
	movq 0xC0(%rbp),%r15
	movq %r15,0xA0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83788
L_83789:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83790+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83790
.p2align 0x4
.long 0x119B
L_83790:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83788:
	movq $0x178D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x90(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0xA0(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x88(%rbp),%r13
	movq %r13,%r10
	salq $0x4,%r10
	movq 0x98(%rbp),%r9
	movq %r9,0x0(%r14,%r10,1)
	movq %r14,%r10
	shrq $0x8,%r10
	movb $0x1,0x0(%r11,%r10,1)
	movq %r13,%r11
	salq $0x4,%r11
	movq %r15,0x8(%r14,%r11,1)
	incq %r13
	movq %r13,0x88(%rbp)
	jmp loop_973
.p2align 0x4
.long 0x117E
L_83563:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83564
L_83572:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83573+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83573
.p2align 0x4
.long 0x117F
L_83573:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83564:
	movq 0x38(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r14,%r11
	jne L_82902
L_83566:
	movl %r13d,%r14d
	decl %r14d
	jo L_82932
L_83567:
	movl %r13d,0xA8(%rbp)
	movq $0x3745,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movl %r14d,0x0(%r13)
	addq $0x18,%r12
	movl $0x0,0x4(%r13)
	movq %r15,0x8(%r13)
	movq %r13,0xA0(%rbp)
	addq $0xA0,%rbp
	leaq (L_83568+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_8
.p2align 0x4
.long 0x1180
length_12:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83578
L_83582:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83583+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83583
.p2align 0x4
.long 0x1181
L_83583:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83578:
	movq 0x58(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_82902
L_83580:
	movl 0x3C(%rbp),%r15d
	addl %r15d,%r13d
	jo L_82932
L_83581:
	movq $0x1B59,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movl %r15d,0x0(%r14)
	movl %r13d,0x3C(%rbp)
	movl $0x0,0x4(%r14)
	movq 0x48(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x48(%rbp)
	incl 0x50(%rbp)
	jmp loop_972
.p2align 0x4
.long 0x117A
L_83540:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movl 0x90(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83541
L_83542:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83543+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83543
.p2align 0x4
.long 0x117B
L_83543:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83541:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xCE38)(%rip),%r15
	movq %r15,0x18(%r13)
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x8(%r11)
	addq $0x18,%r12
	movq 0x48(%rbp),%r15
	movq %r15,0x0(%r11)
	movq $0x1E51,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movl 0x38(%rbp),%r10d
	movl %r10d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq 0x28(%rbp),%r10
	movq %r10,0x8(%r15)
	movq $0x1E5F,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r13,0x10(%r10)
	addq $0x20,%r12
	movq %r14,0x8(%r10)
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r10,0x0(%r15)
	addq $0x18,%r12
	movq $0x1,0x8(%r15)
	movq %r11,%r14
	jmp L_83510
.p2align 0x4
.long 0x117C
L_83547:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83548
L_83549:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x90,%rbp
	leaq (L_83550+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83550
.p2align 0x4
.long 0x117D
L_83550:
	addq $0xFFFFFFFFFFFFFF70,%rbp
L_83548:
	movq 0x28(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x28(%rbp)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq %r15,0x30(%rbp)
	jmp L_83512
.p2align 0x4
.long 0x1
L_83612:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83613
L_83617:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83618+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83618
.p2align 0x4
.long 0x451
L_83618:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83613:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_234+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1178
L_83499:
	addq $0xFFFFFFFFFFFFFF48,%rbp
	movq 0xB8(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83500
L_83594:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB8,%rbp
	leaq (L_83595+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83595
.p2align 0x4
.long 0x1182
L_83595:
	addq $0xFFFFFFFFFFFFFF48,%rbp
L_83500:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je bug_229
L_83501:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je bug_744
L_83502:
	movq $0x1E79,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x30(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x28(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	jmp L_83503
.p2align 0x4
bug_744:
bug_229:
	movq 0x28(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x10(%rbp)
	addq $0x8,%rbp
	leaq (L_83586+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x1
L_83597:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83598
L_83602:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83603+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83603
.p2align 0x4
.long 0x451
L_83603:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83598:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_232+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
L_83136:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83137
L_83141:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83142+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83142
.p2align 0x4
.long 0x451
L_83142:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83137:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_212+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1145
L_83148:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x60(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83149
L_83172:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_83173+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83173
.p2align 0x4
.long 0x1147
L_83173:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_83149:
	movq $0x4B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movl 0x40(%rbp),%r14d
	movl %r14d,0x0(%r15)
	movl $0x0,0x4(%r15)
	movq %r15,0x60(%rbp)
	movq $0x178F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x38(%rbp)
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq %r15,0x50(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_83150+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3848
.p2align 0x4
.long 0x1
bug_218:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83202
L_83203:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83204+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83204
.p2align 0x4
.long 0x451
L_83204:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83202:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_83175:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83176
L_83180:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83181+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83181
.p2align 0x4
.long 0x451
L_83181:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83176:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_216:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83188
L_83189:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83190+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83190
.p2align 0x4
.long 0x451
L_83190:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83188:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x117E
L_83568:
	addq $0xFFFFFFFFFFFFFF60,%rbp
	movq 0xA0(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83569
L_83570:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xA0,%rbp
	leaq (L_83571+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83571
.p2align 0x4
.long 0x117F
L_83571:
	addq $0xFFFFFFFFFFFFFF60,%rbp
L_83569:
	movq 0x90(%rbp),%r14
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq 0x38(%rbp),%r15
	movq %r15,0x0(%r14)
	jmp L_83505
.p2align 0x4
.long 0x1
bug_234:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83614
L_83615:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83616+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83616
.p2align 0x4
.long 0x451
L_83616:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83614:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
L_83586:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83587
L_83591:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83592+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83592
.p2align 0x4
.long 0x451
L_83592:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83587:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B53,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq (globalObjptr+0xEF88)(%rip),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x8(%rbp)
	addq $0x8,%rbp
	leaq (bug_230+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
.long 0x1
bug_232:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83599
L_83600:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83601+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83601
.p2align 0x4
.long 0x451
L_83601:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83599:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_212:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83138
L_83139:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83140+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83140
.p2align 0x4
.long 0x451
L_83140:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83138:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x102B
L_83150:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x30(%rbp)
	cmpq $0x1,%r14
	je L_408576
L_83151:
	movq 0x28(%rbp),%r15
	cmpq $0x1,%r15
	je L_408575
L_83152:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x28(%rbp)
	movq %r14,0x38(%rbp)
	movq $0x1,0x40(%rbp)
.p2align 0x4,,0x7
L_83153:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408574
.p2align 0x4,,0x7
L_83154:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408570
L_83155:
	movq %r15,0x40(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x38(%rbp)
	jmp L_83153
.p2align 0x4
L_408570:
L_83156:
	movq 0x40(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x38(%rbp),%r14
	movq %r14,0x30(%rbp)
	movq %r15,0x38(%rbp)
.p2align 0x4,,0x7
L_83157:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408573
.p2align 0x4,,0x7
L_83158:
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408571
L_83159:
	movq %r15,0x38(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x28(%rbp)
	movq %r15,0x30(%rbp)
	jmp L_83157
.p2align 0x4
L_408571:
L_83161:
	cmpq $0x1,%r15
	je L_408572
L_83162:
	movq %r15,%r14
	movq 0x8(%r15),%r15
	xorl %ecx,%ecx
	jmp L_82931
.p2align 0x4
L_408572:
L_83163:
	movq %r15,0x28(%rbp)
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
L_408573:
L_83164:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_83165+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83165
.p2align 0x4
.long 0x1146
L_83165:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	jmp L_83158
.p2align 0x4
L_408574:
L_83166:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_83167+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83167
.p2align 0x4
.long 0x113C
L_83167:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_83154
.p2align 0x4
L_408575:
L_83168:
	movq 0x30(%rbp),%r14
	xchgq %r14,%r15
	jmp L_83161
.p2align 0x4
L_408576:
L_83169:
	movq 0x28(%rbp),%r14
	cmpq $0x1,%r14
	je L_408577
L_83170:
	movq 0x8(%r14),%r15
	xorl %ecx,%ecx
	jmp L_82931
.p2align 0x4
L_408577:
L_83171:
	xorl %ecx,%ecx
	jmp L_82936
.p2align 0x4
.long 0x1
bug_214:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83177
L_83178:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83179+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83179
.p2align 0x4
.long 0x451
L_83179:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83177:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x1
bug_230:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83588
L_83589:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83590+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83590
.p2align 0x4
.long 0x451
L_83590:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83588:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl concatV_0
.hidden concatV_0
concatV_0:
L_83833:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_83834
L_83868:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_83869+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83869
.p2align 0x4
.long 0x451
L_83869:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_83834:
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movq %r14,0x8(%rbp)
	movl %r14d,%r15d
	movslq %r15d,%r13
	cmpq %r13,%r14
	jne L_83836
L_83837:
	testl %r15d,%r15d
	jz L_408593
L_83838:
	cmpl $0x0,%r15d
	movl %r15d,(localWord32+0x0)(%rip)
	jl L_408592
L_83839:
	xorl %ecx,%ecx
	xorl %ebx,%ebx
.p2align 0x4,,0x7
loop_976:
	cmpl (localWord32+0x0)(%rip),%ebx
	jnl L_408582
L_83862:
	movslq %ebx,%r15
	movq 0x0(%rbp),%r14
	movq 0x0(%r14,%r15,8),%r13
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r11
	movl %r11d,%r10d
	movslq %r10d,%r9
	cmpq %r9,%r11
	jne L_408581
L_83864:
	addl %ecx,%r10d
	jo L_408580
L_83865:
	incl %ebx
	movl %r10d,%ecx
	jmp loop_976
.p2align 0x4
L_408580:
L_83853:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408581:
L_83836:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408582:
L_83840:
	cmpq $0x0,0x8(%rbp)
	jna L_83842
L_83843:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movslq %ecx,%rdx
	movq %rdx,0x18(%rbp)
	testq %rdx,%rdx
	jz L_408590
L_83844:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408589
L_83845:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1443,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_83846+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83846
.p2align 0x4
.long 0x112A
L_83846:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movq %rax,%r15
L_83847:
	xorl %ecx,%ecx
	movq 0x10(%rbp),%r13
	xorl %ebx,%ebx
	xorq %r14,%r14
.p2align 0x4,,0x7
loop_977:
	cmpq 0x18(%rbp),%r14
	jnl L_408588
.p2align 0x4,,0x7
loop_978:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r11
	movl %r11d,%r10d
	movslq %r10d,%r9
	cmpq %r11,%r9
	jne L_83836
L_83851:
	cmpl %r10d,%ecx
	jl L_408585
L_83852:
	incl %ebx
	jo L_83853
L_83854:
	movslq %ebx,%r11
	cmpq 0x8(%rbp),%r11
	jnb L_408583
L_83856:
	movq 0x0(%rbp),%r10
	movq 0x0(%r10,%r11,8),%r13
	xorl %ecx,%ecx
	jmp loop_978
.p2align 0x4
L_408583:
L_83842:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408585:
L_83857:
	movslq %ecx,%r10
	cmpq %r11,%r10
	jnb L_83842
L_83859:
	movq 0x0(%r13,%r10,8),%r11
	incl %ecx
	movq %r15,%r10
	shrq $0x8,%r10
	movq (gcState+0x3C8)(%rip),%r9
	movb $0x1,0x0(%r9,%r10,1)
	movq %r11,0x0(%r15,%r14,8)
	incq %r14
	jmp loop_977
.p2align 0x4
L_408588:
L_83848:
	movq $0x21,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408589:
L_83860:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408590:
L_83861:
	movq (globalObjptr+0x1010)(%rip),%r15
	jmp L_83847
.p2align 0x4
L_408592:
L_83866:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408593:
L_83867:
	movq (globalObjptr+0xF70)(%rip),%r15
	movq $0x21,0xFFFFFFFFFFFFFFF8(%r15)
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl x_1467
.hidden x_1467
x_1467:
L_83870:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_83906
L_83871:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408606
L_83872:
	movq 0x10(%rbp),%r14
	movq 0x10(%r14),%r15
	movq 0x8(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x8(%r14),%r11
	cmpq $0x1,%r11
	je L_408601
L_83873:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r10
	cmpq $0x1,%r14
	je L_408600
L_83874:
	movq 0x0(%rbp),%r11
	cmpq $0x1,0x8(%r11)
	je L_408596
L_83875:
	movq $0x1E77,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r10,0x0(%r15)
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq $0x1,%r11
	movq %r15,%r14
	movq %r11,%r15
L_83876:
	movq %r15,0x0(%rbp)
	movq $0x12AD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r13,0x0(%r15)
	movq %r14,0x8(%r15)
	movq %r15,0x8(%rbp)
	addq $0x18,%r12
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408596:
L_83877:
	movq $0x1E7B,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x0(%r11)
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r10
	movq $0xBBD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	movl $0x0,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq $0x1,0x8(%r14)
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r9
	movl %r9d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r9
	jne L_83879
L_83880:
	movq 0xFFFFFFFFFFFFFFF0(%r10),%r9
	movl %r9d,%esp
	movslq %esp,%rsi
	cmpq %r9,%rsi
	jne L_408598
L_83882:
	cmpl %r8d,%esp
	jne L_408597
L_83885:
	movl %r8d,0x20(%rbp)
	movq $0x3959,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r15,0x0(%r9)
	movq %r11,0x8(%r9)
	movq %r10,0x18(%r9)
	movq %r13,0x20(%r9)
	addq $0x30,%r12
	movq %r14,0x10(%r9)
	movq %r9,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_83886+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408597:
L_83884:
	movq (globalObjptr+0x4E0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408598:
L_83879:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408600:
L_83892:
	movq (globalObjptr+0x2288)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408601:
L_83893:
	movq 0x0(%rbp),%r14
	cmpq $0x1,0x8(%r14)
	jne L_408605
L_83895:
	movq 0x0(%r14),%r11
	movq $0xBBD,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x8(%rbp)
	addq $0x18,%r12
	movl $0x0,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq $0x1,0x8(%r14)
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r10
	movl %r10d,%r9d
	movslq %r9d,%r8
	cmpq %r10,%r8
	jne L_83879
L_83897:
	movq 0xFFFFFFFFFFFFFFF0(%r11),%r10
	movl %r10d,%r8d
	movslq %r8d,%rsp
	cmpq %rsp,%r10
	jne L_83879
L_83899:
	cmpl %r9d,%r8d
	jne L_83884
L_83901:
	movl %r9d,0x20(%rbp)
	movq $0x3959,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x18(%r10)
	movq %r13,0x20(%r10)
	addq $0x30,%r12
	movq $0x1,0x8(%r10)
	movq %r14,0x10(%r10)
	movq %r10,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_83902+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_28
.p2align 0x4
L_408605:
L_83894:
	movq (globalObjptr+0x2290)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408606:
L_83906:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_83907+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83907
.p2align 0x4
.long 0x45B
L_83907:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_83872
.p2align 0x4
.long 0x521
L_83886:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83887
L_83890:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_83891+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83891
.p2align 0x4
.long 0x4E8
L_83891:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_83887:
	movq 0x8(%rbp),%r11
	movq 0x8(%r11),%r15
	cmpq $0x1,%r15
	je L_408608
L_83888:
	movq 0x10(%rbp),%r13
	movq $0x1,%r14
	jmp L_83876
.p2align 0x4
L_408608:
L_83889:
	movq $0x1,%r15
	movq 0x10(%rbp),%r13
	movq $0x1,%r14
	jmp L_83876
.p2align 0x4
.long 0x521
L_83902:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83903
L_83904:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_83905+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83905
.p2align 0x4
.long 0x4E8
L_83905:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
L_83903:
	movq 0x8(%rbp),%r11
	movq 0x8(%r11),%r15
	movq 0x10(%rbp),%r13
	movq $0x1,%r14
	jmp L_83876
.text
.p2align 0x4
.globl loop_3848
.hidden loop_3848
loop_3848:
L_83908:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_83924
L_83909:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408617
L_83910:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x20(%rbp)
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je L_408613
L_83911:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je L_408612
L_83912:
	movq 0x18(%rbp),%r14
	movl 0x0(%r14),%r13d
	movl %r13d,%r11d
	incl %r13d
	jo L_408611
L_83914:
	movl %r13d,0x0(%r14)
	movq $0x1E5B,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %r11d,0x0(%r14)
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movl $0x0,0x4(%r14)
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%r14)
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r13
	movq $0x1E7D,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r14,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r14,1)
	movq %r11,0x0(%r15)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408611:
L_83913:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408612:
L_83915:
	movq (globalObjptr+0x22F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408613:
L_83916:
	movq 0x20(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x28(%rbp)
	movslq %r13d,%r11
	cmpq %r14,%r11
	je L_408614
L_83917:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408614:
L_83918:
	cmpl $0x0,0x28(%rbp)
	jl L_408616
L_83919:
	movl $0x0,0x2C(%rbp)
loop_979:
	movl 0x28(%rbp),%r15d
	cmpl %r15d,0x2C(%rbp)
	jl L_408615
L_83920:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408615:
L_83921:
	movslq 0x2C(%rbp),%r15
	salq $0x4,%r15
	movq 0x20(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	movq 0x10(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x18(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x38,%rbp
	leaq (L_83922+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3848
.p2align 0x4
L_408616:
L_83923:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408617:
L_83924:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_83925+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83925
.p2align 0x4
.long 0x4AE
L_83925:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_83910
.p2align 0x4
.long 0x1017
L_83922:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	incl 0x2C(%rbp)
	jmp loop_979
.text
.p2align 0x4
.globl tabulate_8
.hidden tabulate_8
tabulate_8:
L_83926:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_83927
L_83957:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_83958+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83958
.p2align 0x4
.long 0x457
L_83958:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_83927:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_408633
L_83928:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408632
L_83929:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x8CB,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_83930+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83930
.p2align 0x4
.long 0x452
L_83930:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_83931:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_980:
	movq 0x18(%rbp),%r15
	cmpq 0x10(%rbp),%r15
	jnl L_408631
L_83933:
	movl %r15d,%r14d
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_408630
L_83934:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0x1BA1,%r13
	je L_408628
	cmpq $0x1BA2,%r13
	je L_408626
	cmpq $0x1BA3,%r13
	je L_408619
L_83935:
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movslq %r14d,%r13
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq %r11,0x28(%rbp)
	addq $0x28,%rbp
	leaq (L_83936+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_33
.p2align 0x4
L_408619:
L_83944:
	movq 0x0(%r15),%r13
	addl %r14d,%r14d
	jo L_83942
L_83945:
	movq 0xFFFFFFFFFFFFFFF0(%r13),%r15
	movslq %r14d,%r11
	cmpq %r15,%r11
	jnb L_83947
L_83948:
	movzbl 0x0(%r13,%r11,1),%r10d
	incl %r14d
	jo L_83942
L_83949:
	movslq %r14d,%r11
	cmpq %r15,%r11
	jnb L_408622
L_83951:
	movzbl 0x0(%r13,%r11,1),%ecx
	imull $0x100,%r10d
	jo L_83942
L_83952:
	addl %r10d,%ecx
	jo L_408620
.p2align 0x4,,0x7
L_83937:
	movq 0x8(%rbp),%r15
	movq 0x18(%rbp),%r14
	movl %ecx,0x0(%r15,%r14,4)
	incq %r14
	movq %r14,0x18(%rbp)
	jmp loop_980
.p2align 0x4
L_408620:
L_83942:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408622:
L_83947:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408626:
L_83941:
	movl 0x0(%r15),%r13d
	movq 0x8(%r15),%r11
	subl %r14d,%r13d
	jo L_83942
L_83943:
	movslq %r13d,%r15
	movl 0x0(%r11,%r15,4),%ecx
	jmp L_83937
.p2align 0x4
L_408628:
L_83938:
	movq 0x0(%r15),%r14
	movq 0x0(%r14),%r15
	cmpq $0x1,%r15
	je L_408629
L_83939:
	movq 0x8(%r15),%r13
	movl 0x0(%r15),%ecx
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r13,0x0(%r14)
	jmp L_83937
.p2align 0x4
L_408629:
L_83940:
	movq (globalObjptr+0x4B0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408630:
L_83954:
	movq (globalObjptr+0x4A0)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408631:
L_83932:
	movq 0x8(%rbp),%r14
	movq $0x9,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408632:
L_83955:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408633:
L_83956:
	movq (globalObjptr+0xCC0)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_83931
.p2align 0x4
.long 0x5F8
L_83936:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	movl 0x28(%rbp),%ecx
	movl %ecx,0x20(%rbp)
	jmp L_83937
.text
.p2align 0x4
.globl loop_3847
.hidden loop_3847
loop_3847:
L_83959:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_83973
L_83960:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408640
L_83961:
	movq 0x8(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je L_408636
L_83962:
	movq 0x8(%r14),%r15
	cmpq $0x1,%r15
	je L_408635
L_83963:
	movq $0x1CE1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x18,%r12
	movq 0x0(%rbp),%r15
	movq %r15,0x8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408635:
L_83964:
	movq (globalObjptr+0x22F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408636:
L_83965:
	movq 0x10(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movl %r13d,0x8(%rbp)
	movslq %r13d,%r11
	cmpq %r11,%r14
	je L_408637
L_83966:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408637:
L_83967:
	cmpl $0x0,0x8(%rbp)
	jl L_408639
L_83968:
	movq 0x0(%rbp),%r15
	movl $0x0,0xC(%rbp)
loop_981:
	movl 0x8(%rbp),%r14d
	cmpl %r14d,0xC(%rbp)
	jl L_408638
L_83969:
	movq %r15,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408638:
L_83970:
	movq %r15,0x20(%rbp)
	movslq 0xC(%rbp),%r15
	salq $0x4,%r15
	movq 0x10(%rbp),%r14
	movq 0x8(%r14,%r15,1),%r13
	movq %r13,0x28(%rbp)
	addq $0x20,%rbp
	leaq (L_83971+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3847
.p2align 0x4
L_408639:
L_83972:
	movq (globalObjptr+0x4F8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408640:
L_83973:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_83974+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83974
.p2align 0x4
.long 0x45F
L_83974:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_83961
.p2align 0x4
.long 0x2B
L_83971:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	incl 0xC(%rbp)
	jmp loop_981
.text
.p2align 0x4
.globl tabulate_27
.hidden tabulate_27
tabulate_27:
L_83975:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_83976
L_84111:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_84112+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84112
.p2align 0x4
.long 0x457
L_84112:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_83976:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_408678
L_83977:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408677
L_83978:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0xABD,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_83979+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83979
.p2align 0x4
.long 0x452
L_83979:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_83980:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_982:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408676
.p2align 0x4,,0x7
L_83981:
	movq 0x18(%rbp),%r15
	cmpq 0x10(%rbp),%r15
	jnl L_408675
L_83983:
	movl %r15d,%r14d
	movq 0x0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0x1CBB,%rax
	cmpq $0xB,%rax
	ja L_408642
	leaq jumpTable_213(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_213:
.quad L_408670,L_408667,L_408666,L_408665,L_408659,L_408658,L_408656,L_408655,L_408654,L_408653,L_408648,L_408643
.text
.p2align 0x4
L_408642:
L_83984:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13,%r15,8),%r11
	movq 0x0(%r11),%r10
	movq %r10,0x20(%rbp)
	movq 0x8(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x8(%r10),%r15
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_83985+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp schckToInt32_0
.p2align 0x4
L_408643:
L_84099:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
.p2align 0x4,,0x7
loop_985:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movl 0x20(%rbp),%r14d
	movslq %r14d,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	cmpq $0x1,%r10
	jne L_408645
L_84105:
	incl %r14d
	jo L_408644
L_84106:
	movl %r14d,0x20(%rbp)
	jmp loop_985
.p2align 0x4
L_408644:
L_84006:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408645:
L_84100:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408647
.p2align 0x4,,0x7
L_84101:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movl 0x20(%rbp),%r14d
	incl %r14d
	jo L_84006
L_84102:
	movq 0x28(%rbp),%r13
	movl %r14d,0x0(%r13)
.p2align 0x4,,0x7
L_83993:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x18(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x18(%rbp)
	jmp loop_982
.p2align 0x4
L_408647:
L_84103:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84104+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84104
.p2align 0x4
.long 0x578
L_84104:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84101
.p2align 0x4
L_408648:
L_84091:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
.p2align 0x4,,0x7
loop_984:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movl 0x20(%rbp),%r14d
	movslq %r14d,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	cmpq $0x1,%r10
	jne L_408650
L_84097:
	incl %r14d
	jo L_84006
L_84098:
	movl %r14d,0x20(%rbp)
	jmp loop_984
.p2align 0x4
L_408650:
L_84092:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408652
.p2align 0x4,,0x7
L_84093:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movl 0x20(%rbp),%r14d
	incl %r14d
	jo L_84006
L_84094:
	movq 0x28(%rbp),%r13
	movl %r14d,0x0(%r13)
	jmp L_83993
.p2align 0x4
L_408652:
L_84095:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84096+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84096
.p2align 0x4
.long 0x578
L_84096:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84093
.p2align 0x4
L_408653:
L_84090:
	movq 0x0(%rbp),%r13
	movq 0x0(%r13),%r11
	movslq %r14d,%r15
	movq 0x0(%r11,%r15,8),%r11
	movq %r11,%r15
	jmp L_83993
.p2align 0x4
L_408654:
L_84074:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x20(%rbp)
	movslq %r14d,%r11
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq 0x0(%r10),%r9
	movq %r9,0x48(%rbp)
	movq 0x8(%r10),%r9
	movq %r9,0x28(%rbp)
	movq 0xE0(%r13),%r15
	movq %r15,0x30(%rbp)
	movq 0x0(%r13),%r15
	movq 0x8(%r15),%r14
	movq 0x10(%r14),%r11
	movq %r11,0x38(%rbp)
	movq 0x0(%r14),%r11
	movq %r11,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84075+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_33
.p2align 0x4
L_408655:
L_84053:
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x30(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	salq $0x4,%r14
	movq 0x18(%r15),%r11
	movq 0x0(%r11,%r14,1),%r10
	movq %r10,0x38(%rbp)
	salq $0x4,%r13
	movq 0x8(%r11,%r13,1),%r14
	movq %r14,0x40(%rbp)
	movq $0x1,0x50(%rbp)
	movl $0x0,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84054+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_4
.p2align 0x4
L_408656:
L_84050:
	movq 0x0(%rbp),%r13
	movq 0x0(%r13),%r11
	movslq %r14d,%r15
	cmpq 0xFFFFFFFFFFFFFFF0(%r11),%r15
	jnb L_408657
L_84052:
	movq 0x0(%r11,%r15,8),%r11
	movq %r11,%r15
	jmp L_83993
.p2align 0x4
L_408657:
L_84021:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408658:
L_84049:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	jmp L_83993
.p2align 0x4
L_408659:
L_84034:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movslq %r14d,%r11
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq 0x0(%r10),%r9
	movq %r9,0x20(%rbp)
	movq 0x8(%r10),%r8
	movq %r8,0x28(%rbp)
	cmpq $0x1,%r13
	je L_84038
	cmpq $0x2,%r13
	je L_408662
L_84035:
	movq 0xFFFFFFFFFFFFFFF8(%r13),%r15
	shrq $0x1,%r15
	cmpq $0x1CC8,%r15
	je L_408661
	cmpq $0x1CC9,%r15
	je L_408660
L_84036:
	movq 0x18(%r13),%r15
	movq %r15,0x40(%rbp)
	movq 0x10(%r13),%r15
	movq %r15,0x48(%rbp)
	movq 0x8(%r13),%r15
	movq %r15,0x50(%rbp)
	movq 0x0(%r13),%r15
	movq %r15,0x58(%rbp)
	movq %r9,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_84037+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1468
.p2align 0x4
L_408660:
L_84043:
	movq 0x0(%r13),%r15
	movq %r15,0x40(%rbp)
	movq %r9,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_84044+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408661:
L_84042:
	movq 0x0(%r13),%r15
	movq %r15,0x40(%rbp)
	movq %r9,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_84037+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp route_0
.p2align 0x4
L_408662:
.p2align 0x4,,0x7
L_84038:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408663
.p2align 0x4,,0x7
L_84039:
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83993
.p2align 0x4
L_408663:
L_84040:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_84041+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84041
.p2align 0x4
.long 0x579
L_84041:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	jmp L_84039
.p2align 0x4
L_408665:
L_84017:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x20(%rbp)
	movslq %r14d,%r11
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq 0x0(%r10),%r9
	movq %r9,0x48(%rbp)
	movq 0x8(%r10),%r9
	movq %r9,0x28(%rbp)
	movq 0xE8(%r13),%r15
	movq %r15,0x30(%rbp)
	movq 0x0(%r13),%r15
	movq 0x8(%r15),%r14
	movq 0x10(%r14),%r11
	movq %r11,0x38(%rbp)
	movq 0x0(%r14),%r11
	movq %r11,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84018+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_33
.p2align 0x4
L_408666:
L_84016:
	movq 0x0(%rbp),%r13
	movq 0x0(%r13),%r11
	movslq %r14d,%r15
	movq 0x0(%r11,%r15,8),%r11
	movq %r11,%r15
	jmp L_83993
.p2align 0x4
L_408667:
L_84012:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	cmpl $0x0,%r14d
	je L_408669
	cmpl $0x1,%r14d
	je L_408668
L_84013:
	movq (globalObjptr+0x4A8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408668:
L_84015:
	movq %r11,%r15
	jmp L_83993
.p2align 0x4
L_408669:
	movq %r13,%r15
	jmp L_83993
.p2align 0x4
L_408670:
L_84003:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movl %r11d,0x20(%rbp)
.p2align 0x4,,0x7
loop_983:
	movq 0x0(%r15),%r14
	movq %r14,0x28(%rbp)
	movl 0x20(%rbp),%r14d
	movslq %r14d,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	movq %r10,0x30(%rbp)
	cmpq $0x1,%r10
	jne L_408672
L_84010:
	incl %r14d
	jo L_84006
L_84011:
	movl %r14d,0x20(%rbp)
	jmp loop_983
.p2align 0x4
L_408672:
L_84004:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408674
.p2align 0x4,,0x7
L_84005:
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r13
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x0(%r15)
	movq %r13,0x8(%r15)
	addq $0x18,%r12
	movl 0x20(%rbp),%r14d
	incl %r14d
	jo L_84006
L_84007:
	movq 0x28(%rbp),%r13
	movl %r14d,0x0(%r13)
	jmp L_83993
.p2align 0x4
L_408674:
L_84008:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84009+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84009
.p2align 0x4
.long 0x578
L_84009:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84005
.p2align 0x4
L_408675:
L_83982:
	movq 0x8(%rbp),%r14
	movq $0xAEB,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408676:
L_84107:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_84108+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84108
.p2align 0x4
.long 0x45C
L_84108:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_83981
.p2align 0x4
L_408677:
L_84109:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408678:
L_84110:
	movq (globalObjptr+0xB98)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_83980
.p2align 0x4
.long 0x55F
L_83985:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpl $0x8,%r15d
	jg L_408680
L_83986:
	movl $0x8,%ecx
L_83987:
	movslq %ecx,%r15
	shlq $0x1,%r15
	orq $0x1,%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_83988+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp fromBits_5
.p2align 0x4
L_408680:
L_83996:
	cmpl $0x10,0x40(%rbp)
	jg L_408681
L_83997:
	movl $0x10,%ecx
	jmp L_83987
.p2align 0x4
L_408681:
L_83998:
	cmpl $0x20,0x40(%rbp)
	jg L_408682
L_83999:
	movl $0x20,%ecx
	jmp L_83987
.p2align 0x4
L_408682:
L_84000:
	cmpl $0x40,0x40(%rbp)
	je L_408683
L_84001:
	movq (globalObjptr+0x1708)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408683:
L_84002:
	movl $0x40,%ecx
	jmp L_83987
.p2align 0x4
.long 0x55F
L_84075:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84076
L_84088:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84089+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84089
.p2align 0x4
.long 0x68C
L_84089:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84076:
	movslq 0x40(%rbp),%r15
	movq 0x38(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_84021
L_84078:
	movq 0x0(%r14,%r15,8),%r13
L_84079:
	movq %r13,%r15
	andq $0x3,%r15
	jnz L_408684
L_84081:
	movq 0x10(%r13),%r15
	movl 0x0(%r13),%r14d
	movl %r14d,0x38(%rbp)
	movq 0x8(%r13),%r11
	movq $0x8E5,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r11,0x10(%r13)
	addq $0x20,%r12
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r13,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84082+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp forceMeaningBlock_0
.p2align 0x4
L_408684:
L_84080:
	movq (globalObjptr+0x2230)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x528
L_84054:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x50(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x58(%rbp)
	movq 0x28(%rbp),%r14
	movq %r14,0x68(%rbp)
	movq 0x20(%rbp),%r14
	movq %r14,0x70(%rbp)
	movq 0x38(%rbp),%r14
	movq %r14,0x78(%rbp)
	movq %r15,0x80(%rbp)
	addq $0x68,%rbp
	leaq (L_84055+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3849
.p2align 0x4
.long 0x56C
L_84037:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x20(%rbp)
	jmp L_84038
.p2align 0x4
.long 0x557
L_84044:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq $0x1,%r15
	je L_84038
L_84045:
	movq %r15,0x20(%rbp)
	jmp L_84038
.p2align 0x4
.long 0x55F
L_84018:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84019
L_84032:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84033+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84033
.p2align 0x4
.long 0x68C
L_84033:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84019:
	movslq 0x40(%rbp),%r15
	movq 0x38(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_84021
L_84022:
	movq 0x0(%r14,%r15,8),%r13
L_84023:
	movq %r13,%r15
	andq $0x3,%r15
	jnz L_408688
L_84025:
	movq 0x10(%r13),%r15
	movl 0x0(%r13),%r14d
	movl %r14d,0x38(%rbp)
	movq 0x8(%r13),%r11
	movq $0x8C7,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r11,0x10(%r13)
	addq $0x20,%r12
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r13,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84026+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp forceMeaningBlock_1
.p2align 0x4
L_408688:
L_84024:
	movq (globalObjptr+0x1F00)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x574
L_83988:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r14
	movq 0x0(%r14),%r13
	movq %r13,0x40(%rbp)
	movq 0x38(%rbp),%r14
	movq 0x8(%r14),%r13
	movq %r13,0x48(%rbp)
	movq 0x0(%r14),%r13
	movq %r13,0x50(%rbp)
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_83989+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp sextdToWord32_0
.p2align 0x4
.long 0x11A5
L_84082:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84083
L_84086:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84087+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84087
.p2align 0x4
.long 0x11A6
L_84087:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84083:
	movslq 0x38(%rbp),%r15
	movq 0x30(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_84021
L_84085:
	movq 0x0(%r14,%r15,8),%r13
	movq 0x10(%r13),%r11
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83993
.p2align 0x4
.long 0x11A7
L_84055:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x70(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84056+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
.long 0x11A5
L_84026:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84027
L_84030:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84031+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84031
.p2align 0x4
.long 0x11A6
L_84031:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84027:
	movslq 0x38(%rbp),%r15
	movq 0x30(%rbp),%r14
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r15
	jnb L_84021
L_84029:
	movq 0x0(%r14,%r15,8),%r13
	movq 0x10(%r13),%r11
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r11,0x0(%r15)
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83993
.p2align 0x4
.long 0x11A3
L_83989:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x28(%rbp)
	movl %r15d,0x60(%rbp)
	movq $0x3,0x68(%rbp)
	movq 0x48(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x60,%rbp
	leaq (L_83990+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1199
.p2align 0x4
.long 0x11A8
L_84056:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movl 0x68(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84057
L_84072:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84073+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84073
.p2align 0x4
.long 0x11AC
L_84073:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84057:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x38(%rbp)
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r14d
	movl %r14d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq (globalObjptr+0xEC10)(%rip),%r14
	movq %r14,0x18(%r13)
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x50(%rbp)
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	cmpq $0x1,%r13
	je L_408698
L_84058:
	movq 0x8(%r13),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_84059:
	incl %ecx
	movl %ecx,0x28(%rbp)
	jo L_84006
L_84060:
	cmpq $0x1,%r15
	je L_408695
L_84061:
	movq 0x8(%r15),%r15
	jmp L_84059
.p2align 0x4
L_408695:
L_84062:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84063
L_84069:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84070+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84070
.p2align 0x4
.long 0x11AB
L_84070:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84063:
	movl 0x28(%rbp),%ecx
L_84064:
	movl %ecx,0x70(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84065+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_408698:
L_84071:
	xorl %ecx,%ecx
	jmp L_84064
.p2align 0x4
.long 0x11A4
L_83990:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x40(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_83991+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp bigMod_0
.p2align 0x4
.long 0x11A9
L_84065:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84066
L_84067:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84068+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84068
.p2align 0x4
.long 0x11AA
L_84068:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84066:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x48(%rbp),%r13
	movq %r13,0x18(%r15)
	movq 0x58(%rbp),%r13
	movq 0x0(%r13),%r11
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq $0xBB3,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_83993
.p2align 0x4
.long 0x560
L_83991:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_83992
L_83994:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_83995+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_83995
.p2align 0x4
.long 0x575
L_83995:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_83992:
	movq $0x2D5,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0xBB3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x20(%rbp),%r13
	movq %r13,0x0(%r14)
	movq %r14,%r15
	jmp L_83993
.text
.p2align 0x4
.globl forceMeaningBlock_1
.hidden forceMeaningBlock_1
forceMeaningBlock_1:
L_84113:
	cmpq %rbp,(gcState+0x18)(%rip)
	jb L_84166
L_84114:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408717
L_84115:
	movq 0x8(%rbp),%r15
	movq 0x88(%r15),%r14
	movq %r14,0x10(%rbp)
	movq 0x58(%r15),%r14
	movq 0x40(%r15),%r13
	movq 0x30(%r15),%r11
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r10
	movslq 0x0(%r15),%r9
	cmpq 0xFFFFFFFFFFFFFFF0(%r14),%r9
	jnb L_84117
L_84118:
	movl 0x0(%r14,%r9,4),%r15d
	testl %r15d,%r15d
	jnz L_408715
L_84119:
	movl $0x1,0x0(%r14,%r9,4)
	cmpq 0xFFFFFFFFFFFFFFF0(%r11),%r9
	jnb L_408714
L_84121:
	movq 0x0(%r11,%r9,8),%r15
	movq 0x10(%r15),%r14
	movq %r14,0x18(%rbp)
	movq 0x18(%r15),%r14
	movq %r14,0x20(%rbp)
	movq $0x955,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r13,0x0(%r11)
	addq $0x18,%r12
	movq %r14,0x8(%r11)
	cmpq $0x1,%r10
	je L_408709
	cmpq $0x2,%r10
	je L_408708
L_84122:
	movq 0xFFFFFFFFFFFFFFF8(%r10),%r14
	shrq $0x1,%r14
	cmpq $0xEDF,%r14
	je L_408706
	cmpq $0xEE0,%r14
	je L_408704
	cmpq $0xEE1,%r14
	je L_408703
L_84123:
	movq 0x8(%r10),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r10),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r10
	cmpq %r10,%r14
	jne L_408702
L_84126:
	movl %r13d,0x40(%rbp)
	movq $0x3FF9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x38(%rbp)
	addq $0x18,%r12
	addq $0x38,%rbp
	leaq (L_84127+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408702:
L_84125:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408703:
L_84162:
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x30,%rbp
	leaq (L_84158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp simplifyBlock_0
.p2align 0x4
L_408704:
L_84154:
	movq 0x10(%r10),%r15
	movq %r15,0x28(%rbp)
	movq 0x8(%r10),%r15
	movq %r15,0x30(%rbp)
	movq 0x0(%r10),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r10
	cmpq %r14,%r10
	jne L_84125
L_84156:
	movl %r13d,0x48(%rbp)
	movq $0x3919,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x40(%rbp)
	addq $0x18,%r12
	addq $0x40,%rbp
	leaq (L_84157+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_23
.p2align 0x4
L_408706:
L_84147:
	movq 0x8(%r10),%r15
	movq %r15,0x28(%rbp)
	movq 0x0(%r10),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r10
	cmpq %r14,%r10
	jne L_84125
L_84149:
	movl %r13d,0x40(%rbp)
	movq $0x4019,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r11,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x38(%rbp)
	addq $0x18,%r12
	addq $0x38,%rbp
	leaq (L_84150+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408708:
L_84164:
	movq %r15,0x30(%rbp)
	movq $0x1,0x38(%rbp)
	movq 0x8(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x30,%rbp
	leaq (L_84158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp simplifyBlock_0
.p2align 0x4
L_408709:
L_84163:
	movq $0x1,0x28(%rbp)
	movq $0x1,%r15
L_84129:
	movq $0x9A1,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r14,0x30(%rbp)
	addq $0x10,%r12
	movq %r15,0x0(%r14)
	cmpq $0x1,%r15
	je L_408713
L_84130:
	movq 0x8(%r15),%r15
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_84131:
	incl %ecx
	movl %ecx,0x38(%rbp)
	jo L_408712
L_84133:
	cmpq $0x1,%r15
	je L_408710
L_84134:
	movq 0x8(%r15),%r15
	jmp L_84131
.p2align 0x4
L_408710:
L_84135:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84136
L_84142:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84143+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84143
.p2align 0x4
.long 0x787
L_84143:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84136:
	movl 0x38(%rbp),%ecx
L_84137:
	movl %ecx,0x40(%rbp)
	movq $0x3EFD,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x38(%rbp)
	addq $0x38,%rbp
	leaq (L_84138+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_6
.p2align 0x4
L_408712:
L_84132:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408713:
L_84144:
	xorl %ecx,%ecx
	jmp L_84137
.p2align 0x4
L_408714:
L_84117:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408715:
L_84165:
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408717:
L_84166:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_84167+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84167
.p2align 0x4
.long 0x45F
L_84167:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	jmp L_84115
.p2align 0x4
.long 0x4A6
L_84127:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84128
L_84145:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84146+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84146
.p2align 0x4
.long 0x720
L_84146:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84128:
	movq $0x1D7D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_84129
.p2align 0x4
.long 0x8A9
L_84158:
	addq $0xFFFFFFFFFFFFFFD0,%rbp
	movq 0x30(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84159
L_84160:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84161+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84161
.p2align 0x4
.long 0x720
L_84161:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84159:
	movq 0x30(%rbp),%r15
	jmp L_84129
.p2align 0x4
.long 0x4EC
L_84157:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq 0x30(%rbp),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%rbp),%r14
	movq %r14,0x48(%rbp)
	movq %r15,0x30(%rbp)
	movq 0x28(%rbp),%r15
	movq %r15,0x38(%rbp)
	addq $0x30,%rbp
	leaq (L_84158+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp gotoMeaning_0
.p2align 0x4
.long 0x4A6
L_84150:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84151
L_84152:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84153+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84153
.p2align 0x4
.long 0x720
L_84153:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84151:
	movq $0x1D7F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r15,0x28(%rbp)
	movq %r14,%r15
	jmp L_84129
.p2align 0x4
.long 0x4A6
L_84138:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84139
L_84140:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84141+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84141
.p2align 0x4
.long 0x720
L_84141:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84139:
	movq $0x1B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x28,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x18(%rbp),%r14
	movq %r14,0x10(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x18(%r15)
	movq 0x10(%rbp),%r14
	movq 0x0(%r14),%r13
	movq $0x1DBB,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	movq %r15,0x0(%r11)
	movq %r13,0x8(%r11)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r13
	movb $0x1,0x0(%r13,%r15,1)
	movq %r11,0x0(%r14)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.text
.p2align 0x4
.globl unfoldi_6
.hidden unfoldi_6
unfoldi_6:
L_84168:
	cmpq %rbp,(gcState+0x18)(%rip)
	jnb L_84169
L_84761:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x18,%rbp
	leaq (L_84762+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84762
.p2align 0x4
.long 0x457
L_84762:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
L_84169:
	movslq 0x8(%rbp),%rdx
	movq %rdx,0x10(%rbp)
	testq %rdx,%rdx
	jz L_408839
L_84170:
	cmpq $0x7FFFFFFF,%rdx
	ja L_408838
L_84171:
	movq (c_stackP+0x0)(%rip),%rsp
	movq $0x1429,%rcx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_84172+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_arrayAllocate
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84172
.p2align 0x4
.long 0x452
L_84172:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq %rax,0x8(%rbp)
L_84173:
	movq $0x0,0x18(%rbp)
.p2align 0x4,,0x7
loop_986:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408837
.p2align 0x4,,0x7
L_84174:
	movq 0x18(%rbp),%r15
	cmpq 0x10(%rbp),%r15
	jnl L_408836
L_84176:
	movl %r15d,%r14d
	movq 0x0(%rbp),%r15
	cmpq $0x1,%r15
	je L_408835
	cmpq $0x2,%r15
	je L_408834
L_84177:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%rax
	shrq $0x1,%rax
	subq $0x1F75,%rax
	cmpq $0x12,%rax
	ja L_408723
	leaq jumpTable_214(%rip),%rbx
	jmp *(%rbx,%rax,8)
.data
.p2align 0x4
jumpTable_214:
.quad L_408833,L_408822,L_408818,L_408815,L_408814,L_408801,L_408788,L_408786,L_408785,L_408783,L_408780,L_408776,L_408775,L_408773,L_408761,L_408757,L_408746,L_408729,L_408727
.text
.p2align 0x4
L_408723:
L_84178:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%ecx
.p2align 0x4,,0x7
loop_987:
	movq 0x0(%r15),%r14
	movslq %ecx,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	cmpq $0x1,%r10
	jne L_408725
L_84183:
	incl %ecx
	jo L_408724
L_84184:
	jmp loop_987
.p2align 0x4
L_408724:
L_84180:
	movq $0x3,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408725:
L_84179:
	incl %ecx
	jo L_84180
L_84181:
	movl %ecx,0x0(%r14)
	movq %r10,%r15
.p2align 0x4,,0x7
L_84182:
	movq 0x8(%rbp),%r14
	movq %r14,%r13
	shrq $0x8,%r13
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r13,1)
	movq 0x18(%rbp),%r13
	movq %r15,0x0(%r14,%r13,8)
	incq %r13
	movq %r13,0x18(%rbp)
	jmp loop_986
.p2align 0x4
L_408727:
L_84752:
	movq 0x0(%rbp),%r13
	movq 0x0(%r13),%r11
	movslq %r14d,%r15
	cmpq 0xFFFFFFFFFFFFFFF0(%r11),%r15
	jnb L_408728
L_84754:
	movq 0x0(%r11,%r15,8),%r11
	movq %r11,%r15
	jmp L_84182
.p2align 0x4
L_408728:
L_84553:
	movq $0x6,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408729:
L_84581:
	movq 0x0(%rbp),%r9
	movq 0x38(%r9),%r8
	movq %r8,0x20(%rbp)
	movq 0x30(%r9),%r8
	movq %r8,0x28(%rbp)
	movq 0x28(%r9),%r8
	movq %r8,0x30(%rbp)
	movq 0x20(%r9),%r8
	movq %r8,0x38(%rbp)
	movq 0x18(%r9),%r8
	movq %r8,0x40(%rbp)
	movq 0x10(%r9),%r15
	movq 0x8(%r9),%r8
	movq 0x0(%r9),%r13
	movslq %r14d,%r11
	movq 0x40(%r9),%rsp
	movq 0x0(%rsp,%r11,8),%rsi
	movq %rsi,0x48(%rbp)
	movq 0x0(%rsi),%r9
	movq %r9,0x50(%rbp)
	movq 0x8(%rsi),%rsp
	movq %rsp,0x58(%rbp)
	cmpq $0x1,%r9
	je L_408745
L_84582:
	movq 0x10(%r9),%r14
	movq (globalObjptr+0x1068)(%rip),%r9
	movq 0x0(%r9),%r11
	incq %r11
	jo L_408744
L_84583:
	movq %r11,0x0(%r9)
	movq 0x0(%r14),%r9
	cmpq $0x1,%r9
	je L_408743
L_84584:
	movq 0x8(%r9),%r10
	movq 0x0(%r9),%r9
	xorl %ecx,%ecx
	movq %r8,%r14
	movq %r9,%r11
.p2align 0x4,,0x7
L_84586:
	movq %r11,%r9
	andq $0x3,%r9
	jnz L_408742
L_84595:
	movq 0xFFFFFFFFFFFFFFF8(%r11),%r9
	shrq $0x1,%r9
	cmpq $0xD23,%r9
	jne L_408741
L_84596:
	movq 0x8(%r11),%r9
	cmpq 0x0(%r11),%r15
	movq %r15,(localObjptr+0x8)(%rip)
	je L_408734
	movq %r14,(localObjptr+0x10)(%rip)
	movq %r13,(localObjptr+0x18)(%rip)
L_84587:
	incl %ecx
	jo L_84180
L_84588:
	cmpq $0x1,%r10
	je L_408730
L_84589:
	movq 0x0(%r10),%r11
	movq 0x8(%r10),%r10
	movq (localObjptr+0x8)(%rip),%r15
	movq (localObjptr+0x10)(%rip),%r14
	movq (localObjptr+0x18)(%rip),%r13
	jmp L_84586
.p2align 0x4
L_408730:
L_84590:
L_84591:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_408732
L_84592:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r14
	cmpl %ecx,0x0(%r14)
	jnl L_408731
L_84594:
	movl %ecx,0x0(%r14)
	movq 0x48(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408731:
L_84593:
	movq 0x48(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408732:
L_84286:
	movq (globalObjptr+0x1080)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408734:
L_84598:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r11
	addq 0x0(%r11),%r15
	jo L_84286
L_84599:
	movq %r15,0x0(%r11)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_408737
L_84746:
	movl %ecx,0x0(%r15)
L_84747:
	movq %r9,%r15
	andq $0x3,%r15
	jnz L_84602
L_84748:
	movq 0xFFFFFFFFFFFFFFF8(%r9),%r15
	shrq $0x1,%r15
	cmpq $0x13C9,%r15
	je L_408735
L_84602:
	movq 0x48(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408735:
L_84749:
	movq 0x10(%r9),%r15
	movq %r15,0x60(%rbp)
	movq 0x0(%r9),%r15
	movq %r15,0x68(%rbp)
	movq 0x8(%r9),%r15
	movq %r15,0x70(%rbp)
	movq %r13,(localObjptr+0x18)(%rip)
	movq %r14,(localObjptr+0x10)(%rip)
L_84605:
	movq (localObjptr+0x10)(%rip),%r15
	movq %r15,0x90(%rbp)
	movq (localObjptr+0x18)(%rip),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x78(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x80(%rbp)
	movq %r14,0x98(%rbp)
	addq $0x90,%rbp
	leaq (loop_989+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_72
.p2align 0x4
L_408737:
L_84601:
	movq %r9,%r11
	andq $0x3,%r11
	jnz L_84602
L_84603:
	movq 0xFFFFFFFFFFFFFFF8(%r9),%r11
	shrq $0x1,%r11
	cmpq $0x13C9,%r11
	jne L_84602
L_84604:
	movq 0x10(%r9),%r11
	movq %r11,0x60(%rbp)
	movq 0x0(%r9),%r11
	movq %r11,0x68(%rbp)
	movq 0x8(%r9),%r11
	movq %r11,0x70(%rbp)
	movq %r14,(localObjptr+0x10)(%rip)
	movq %r13,(localObjptr+0x18)(%rip)
	jmp L_84605
.p2align 0x4
L_408741:
	movq %r14,(localObjptr+0x10)(%rip)
	movq %r15,(localObjptr+0x8)(%rip)
	movq %r13,(localObjptr+0x18)(%rip)
	jmp L_84587
.p2align 0x4
L_408742:
	movq %r14,(localObjptr+0x10)(%rip)
	movq %r15,(localObjptr+0x8)(%rip)
	movq %r13,(localObjptr+0x18)(%rip)
	jmp L_84587
.p2align 0x4
L_408743:
L_84750:
	xorl %ecx,%ecx
	jmp L_84591
.p2align 0x4
L_408744:
L_84276:
	movq (globalObjptr+0x1088)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408745:
L_84751:
	movq 0x48(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408746:
L_84545:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movslq %r14d,%r11
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq %r10,0x20(%rbp)
	movq 0x0(%r10),%r15
	movq %r15,0x28(%rbp)
	movq 0x10(%r10),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xEBA,%r14
	jne L_408756
L_84547:
	movq 0x8(%r15),%r14
	movq 0x0(%r15),%r11
	movq %r14,%r15
	andq $0xFF,%r15
	cmpq $0x45,%r15
	je L_408753
	cmpq $0x46,%r15
	je L_408751
	cmpq $0x47,%r15
	je L_408748
L_84548:
	andq $0x3,%r14
	jnz L_84549
L_84550:
L_84549:
	movq 0x20(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408748:
L_84576:
	cmpq $0x1,0x28(%rbp)
	jne L_408749
L_84580:
	movq 0x20(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408749:
L_84577:
	cmpq $0x0,0xFFFFFFFFFFFFFFF0(%r11)
	jna L_84553
L_84579:
	movq 0x28(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq 0x0(%r11),%r15
	movq %r15,0x28(%rbp)
	movq %r13,%r14
x_255:
	movq %r14,0x48(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_84557+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_55
.p2align 0x4
L_408751:
L_84565:
	cmpq $0x0,0xFFFFFFFFFFFFFFF0(%r11)
	jna L_84553
L_84567:
	movq %r13,0x48(%rbp)
	movq 0x0(%r11),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_84568+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_55
.p2align 0x4
L_408753:
L_84551:
	movq 0xFFFFFFFFFFFFFFF0(%r11),%r15
	cmpq $0x0,%r15
	jna L_84553
L_84554:
	movq 0x0(%r11),%r14
	cmpq $0x1,%r15
	jna L_84553
L_84556:
	movq %r14,0x30(%rbp)
	movq 0x8(%r11),%r15
	movq %r15,0x28(%rbp)
	movq %r13,%r14
	jmp x_255
.p2align 0x4
L_408756:
L_84546:
	movq 0x20(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408757:
L_84530:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x28(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	movq %r13,%r11
	imulq $0x28,%r14
	movq 0x10(%r15),%r10
	movq 0x0(%r10,%r14,1),%r9
	movq %r9,0x30(%rbp)
	imulq $0x28,%r11
	movq 0x18(%r10,%r11,1),%r14
	movq %r14,0x38(%rbp)
	imulq $0x28,%r13
	movq 0x20(%r10,%r13,1),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r9),%r15
L_84531:
	movq %r15,%r14
	andq $0x3,%r14
	jnz L_84532
L_84536:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xEB4,%r14
	je L_408759
.p2align 0x4,,0x7
L_84532:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408758
.p2align 0x4,,0x7
L_84533:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x38(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408758:
L_84534:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84535+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84535
.p2align 0x4
.long 0x5B4
L_84535:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_84533
.p2align 0x4
L_408759:
L_84537:
	movq 0x40(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84538+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
L_408761:
L_84465:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movq %r13,0x20(%rbp)
	movslq %r14d,%r13
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r13,8),%r11
	movq 0x0(%r11),%r10
	movq 0x8(%r11),%r9
	movq %r9,0x30(%rbp)
	movq 0x10(%r11),%r9
	movq %r9,0x38(%rbp)
	cmpq $0x1,%r10
	movq %r10,0x28(%rbp)
	jne L_408772
L_84522:
	movq 0xFFFFFFFFFFFFFFF8(%r9),%r15
	shrq $0x1,%r15
	cmpq $0xEB7,%r15
	je L_408770
	cmpq $0xEB8,%r15
	je L_408769
	cmpq $0xEB9,%r15
	je L_408768
	cmpq $0xEBA,%r15
	je L_408766
	cmpq $0xEBB,%r15
	je L_408764
	cmpq $0xEBC,%r15
	je L_408762
L_84523:
	movq 0x0(%r9),%r15
	movq %r15,0x28(%rbp)
	movq $0x1,0x38(%rbp)
L_84472:
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84473+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408762:
L_84529:
	movq 0x8(%r9),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r9),%r15
	movq $0x1,0x38(%rbp)
L_84512:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_408763
L_84514:
	movl %r13d,0x50(%rbp)
	movq $0x4029,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_84515+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408763:
L_84201:
	movq (globalObjptr+0x4D8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408764:
L_84528:
	movq %r9,0x20(%rbp)
	movq $0x1,0x28(%rbp)
.p2align 0x4,,0x7
L_84477:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408765
.p2align 0x4,,0x7
L_84478:
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_84182
.p2align 0x4
L_408765:
L_84479:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84480+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84480
.p2align 0x4
.long 0x575
L_84480:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84478
.p2align 0x4
L_408766:
L_84527:
	movq 0x10(%r9),%r14
	movq %r14,0x28(%rbp)
	movq 0x0(%r9),%r15
	movq 0x8(%r9),%r9
	movq %r9,0x38(%rbp)
	movq $0x1,0x40(%rbp)
L_84503:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_84201
L_84505:
	movl %r13d,0x58(%rbp)
	movq $0x4029,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_84506+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408768:
L_84526:
	movq %r9,0x20(%rbp)
	movq $0x1,0x28(%rbp)
	jmp L_84477
.p2align 0x4
L_408769:
L_84525:
	movq 0x8(%r9),%r15
	movq %r15,0x28(%rbp)
	movl 0x0(%r9),%r15d
	movl %r15d,0x38(%rbp)
	movq $0x1,0x40(%rbp)
L_84493:
	movq 0x28(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84494+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408770:
L_84524:
	movq 0x0(%r9),%r15
	movq $0x1,0x28(%rbp)
L_84485:
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r13d
	movslq %r13d,%r11
	cmpq %r11,%r14
	jne L_84201
L_84487:
	movl %r13d,0x48(%rbp)
	movq $0x4029,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r14)
	movq %r14,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_84488+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408772:
L_84466:
	movq 0x28(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84467+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408773:
L_84464:
	movq 0x0(%rbp),%r13
	movq 0x8(%r13),%r11
	movq 0x0(%r13),%r15
	movslq %r14d,%r13
	movq 0x0(%r11,%r13,8),%r11
	movq %r11,%r14
doitStatement_0:
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	movq %r11,0x20(%rbp)
	movq 0x0(%r14),%r15
	movq %r15,0x28(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x30(%rbp)
	movq 0x10(%r14),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r11
	shrq $0x1,%r11
	cmpq $0xEBC,%r11
	jne L_408774
L_84268:
	movq %r13,0x58(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x0(%r15),%r11
	movq %r11,0x40(%rbp)
	movq %r13,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_84269+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1399
.p2align 0x4
L_408774:
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408775:
L_84399:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13,%r15,8),%r11
	movq 0x0(%r11),%r10
	movq %r10,0x20(%rbp)
	movq 0x8(%r11),%r10
	movq %r10,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x18(%r15),%r13
	movq %r13,0x58(%rbp)
	movq 0x10(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x8(%r15),%r13
	movq %r13,0x38(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x40(%rbp)
	movq %r10,0x50(%rbp)
	addq $0x50,%rbp
	leaq (L_84400+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1428
.p2align 0x4
L_408776:
L_84394:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%ecx
.p2align 0x4,,0x7
loop_988:
	movq 0x0(%r15),%r14
	movslq %ecx,%r13
	movq 0x8(%r15),%r11
	movq 0x0(%r11,%r13,8),%r10
	cmpq $0x1,%r10
	jne L_408778
L_84397:
	incl %ecx
	jo L_84180
L_84398:
	jmp loop_988
.p2align 0x4
L_408778:
L_84395:
	incl %ecx
	jo L_84180
L_84396:
	movl %ecx,0x0(%r14)
	movq %r10,%r15
	jmp L_84182
.p2align 0x4
L_408780:
L_84390:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq 0x0(%r15),%r11
	cmpl $0x0,%r14d
	je L_408782
	cmpl $0x1,%r14d
	je L_408781
L_84391:
	movq (globalObjptr+0x4A8)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408781:
L_84393:
	movq %r11,%r15
	jmp L_84182
.p2align 0x4
L_408782:
	movq %r13,%r15
	jmp L_84182
.p2align 0x4
L_408783:
L_84387:
	movq 0x0(%rbp),%r14
	movq 0x0(%r14),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_408784
L_84388:
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r14,1)
	movq %r13,0x0(%r15)
	movq %r11,%r15
	jmp L_84182
.p2align 0x4
L_408784:
L_84389:
	movq (globalObjptr+0x4B0)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408785:
L_84386:
	movq 0x0(%rbp),%r14
	movq 0x10(%r14),%r15
	movq 0x8(%r14),%r13
	movq 0x0(%r14),%r11
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r13,0x8(%r14)
	movq %r11,0x10(%r14)
	addq $0x20,%r12
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408786:
L_84384:
	movq 0x0(%rbp),%r13
	movl 0x0(%r13),%r11d
	movq 0x8(%r13),%r10
	subl %r14d,%r11d
	jo L_84180
L_84385:
	movslq %r11d,%r15
	movq 0x0(%r10,%r15,8),%r10
	movq %r10,%r15
	jmp L_84182
.p2align 0x4
L_408788:
L_84316:
	movq 0x0(%rbp),%r15
	movq 0x20(%r15),%r13
	movq 0x18(%r15),%r11
	movq %r11,0x20(%rbp)
	movl 0x0(%r15),%r11d
	movl %r11d,0x28(%rbp)
	movq 0x10(%r15),%r11
	movq %r11,0x30(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x38(%rbp)
	movslq %r14d,%r11
	movq 0x28(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq 0x0(%r10),%r9
	movq %r9,0x40(%rbp)
	movq 0x8(%r10),%r9
	movq %r9,0x48(%rbp)
	movq 0x10(%r10),%r9
	movq 0xFFFFFFFFFFFFFFF8(%r9),%r15
	shrq $0x1,%r15
	cmpq $0xEB7,%r15
	je L_408799
	cmpq $0xEB8,%r15
	je L_408798
	cmpq $0xEB9,%r15
	je L_408796
	cmpq $0xEBA,%r15
	je L_408794
	cmpq $0xEBB,%r15
	je L_408791
	cmpq $0xEBC,%r15
	je L_408789
L_84317:
	movq %r13,0x68(%rbp)
	movq 0x0(%r9),%r15
	movq %r15,0x50(%rbp)
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_84318+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_54
.p2align 0x4
L_408789:
L_84375:
	movq 0x8(%r9),%r15
	movq %r15,0x50(%rbp)
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r14
	jne L_84201
L_84377:
	movl %r11d,0x68(%rbp)
	movq $0x401F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x60(%rbp)
	addq $0x18,%r12
	addq $0x60,%rbp
	leaq (L_84378+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408791:
L_84372:
	cmpq $0x1,0x40(%rbp)
	jne L_408793
L_84374:
	movq %r9,0x28(%rbp)
	movq $0x1,0x20(%rbp)
.p2align 0x4,,0x7
L_84327:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408792
.p2align 0x4,,0x7
L_84328:
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x48(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_84182
.p2align 0x4
L_408792:
L_84329:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_84330+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84330
.p2align 0x4
.long 0xDD5
L_84330:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	jmp L_84328
.p2align 0x4
L_408793:
L_84373:
	movq %r9,0x50(%rbp)
L_84323:
	movq 0x40(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x60,%rbp
	leaq (L_84324+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_54
.p2align 0x4
L_408794:
L_84363:
	movq 0x10(%r9),%r15
	movq %r15,0x50(%rbp)
	movq 0x8(%r9),%r15
	movq %r15,0x58(%rbp)
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r14
	jne L_84201
L_84365:
	movl %r11d,0x70(%rbp)
	movq $0x401F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x68(%rbp)
	addq $0x18,%r12
	addq $0x68,%rbp
	leaq (L_84366+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408796:
L_84360:
	cmpq $0x1,0x40(%rbp)
	jne L_408797
L_84362:
	movq %r9,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
L_408797:
L_84361:
	movq %r9,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408798:
L_84350:
	movq %r13,0x68(%rbp)
	movq 0x8(%r9),%r15
	movq %r15,0x50(%rbp)
	movl 0x0(%r9),%r14d
	movl %r14d,0x2C(%rbp)
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_84351+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_54
.p2align 0x4
L_408799:
L_84341:
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r14,%r10
	jne L_84201
L_84343:
	movl %r11d,0x60(%rbp)
	movq $0x401F,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x58(%rbp)
	addq $0x18,%r12
	addq $0x58,%rbp
	leaq (L_84344+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408801:
L_84274:
	movslq %r14d,%r15
	movq 0x0(%rbp),%r11
	movq 0x0(%r11),%r10
	movq 0x0(%r10,%r15,8),%r9
	movq 0x0(%r9),%r8
	movq %r8,0x20(%rbp)
	movq 0x8(%r9),%rsp
	movq %rsp,0x28(%rbp)
	movq 0x10(%r9),%rsp
	cmpq $0x1,%r8
	je L_408813
L_84275:
	movq 0x10(%r8),%r15
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r14
	incq %r14
	jo L_84276
L_84277:
	movq %r14,0x0(%r11)
	movq 0x0(%r15),%r11
	cmpq $0x1,%r11
	je L_408811
L_84278:
	movq 0x8(%r11),%r13
	movq 0x0(%r11),%r11
	xorl %ecx,%ecx
	movq %rsp,%r15
	movq %r11,%r14
.p2align 0x4,,0x7
L_84280:
	movq %r14,%r11
	andq $0x3,%r11
	jnz L_84281
L_84294:
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r11
	shrq $0x1,%r11
	cmpq $0xCF9,%r11
	je L_408807
L_84281:
	incl %ecx
	jo L_84180
L_84282:
	cmpq $0x1,%r13
	je L_408802
L_84283:
	movq 0x0(%r13),%r14
	movq 0x8(%r13),%r13
	jmp L_84280
.p2align 0x4
L_408802:
L_84284:
L_84285:
	movslq %ecx,%r14
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r14
	jo L_84286
L_84287:
	movq %r14,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r14
	cmpl %ecx,0x0(%r14)
	jnl L_408804
L_84293:
	movl %ecx,0x0(%r14)
	movq %r15,0x30(%rbp)
.p2align 0x4,,0x7
L_84289:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408803
.p2align 0x4,,0x7
L_84290:
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_84182
.p2align 0x4
L_408803:
L_84291:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84292+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84292
.p2align 0x4
.long 0x575
L_84292:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84290
.p2align 0x4
L_408804:
L_84288:
	movq %r15,0x30(%rbp)
	jmp L_84289
.p2align 0x4
L_408807:
L_84295:
	movq 0x0(%r14),%r15
	movslq %ecx,%r14
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r14
	jo L_84286
L_84296:
	movq %r14,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r14
	cmpl %ecx,0x0(%r14)
	jnl L_408808
L_84313:
	movl %ecx,0x0(%r14)
	movq 0x8(%r15),%r14
	movq %r14,0x30(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0x38(%rbp)
L_84298:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	movq %r14,0x48(%rbp)
	movq 0x10(%r15),%r14
	movq %r14,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84299+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp equals_0
.p2align 0x4
L_408808:
L_84297:
	movq 0x8(%r15),%r13
	movq %r13,0x30(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x38(%rbp)
	jmp L_84298
.p2align 0x4
L_408811:
L_84314:
	xorl %ecx,%ecx
	movq %rsp,%r15
	jmp L_84285
.p2align 0x4
L_408813:
L_84315:
	movq %rsp,0x30(%rbp)
	jmp L_84289
.p2align 0x4
L_408814:
L_84266:
	movq 0x0(%rbp),%r13
	movq 0x8(%r13),%r11
	movq 0x0(%r13),%r15
	movslq %r14d,%r13
	movq 0x0(%r11,%r13,8),%r11
	movq %r11,%r14
	jmp doitStatement_0
.p2align 0x4
L_408815:
L_84247:
	movq 0x0(%rbp),%r15
	movq 0x10(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x8(%r15),%r11
	movq %r11,0x28(%rbp)
	movq 0x0(%r15),%r11
	movq %r11,0x30(%rbp)
	movslq %r14d,%r11
	movq %r11,%r14
	movq %r11,%r10
	imulq $0x28,%r14
	movq 0x18(%r15),%r9
	movq 0x0(%r9,%r14,1),%r8
	movq %r8,0x38(%rbp)
	imulq $0x28,%r10
	movq 0x8(%r9,%r10,1),%r14
	movq %r14,0x40(%rbp)
	imulq $0x28,%r11
	movq 0x10(%r9,%r11,1),%r14
	movq %r14,0x48(%rbp)
	movq 0x8(%r8),%r15
L_84248:
	movq %r15,%r11
	andq $0x3,%r11
	jnz L_84249
L_84257:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r11
	shrq $0x1,%r11
	cmpq $0xEB4,%r11
	jne L_408816
L_84258:
	movq %r14,0x58(%rbp)
	movq %r13,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_84259+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
L_408816:
L_84249:
	movq 0x48(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_84250+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_77
.p2align 0x4
L_408818:
L_84231:
	movq 0x0(%rbp),%r15
	movq 0x8(%r15),%r13
	movq %r13,0x20(%rbp)
	movq 0x0(%r15),%r13
	movq %r13,0x28(%rbp)
	movslq %r14d,%r13
	movq %r13,%r14
	movq %r13,%r11
	imulq $0x28,%r14
	movq 0x10(%r15),%r10
	movq 0x0(%r10,%r14,1),%r9
	movq %r9,0x30(%rbp)
	imulq $0x28,%r11
	movq 0x10(%r10,%r11,1),%r14
	movq %r14,0x38(%rbp)
	imulq $0x28,%r13
	movq 0x18(%r10,%r13,1),%r14
	movq %r14,0x40(%rbp)
	movq 0x8(%r9),%r15
L_84232:
	movq %r15,%r14
	andq $0x3,%r14
	jnz L_84233
L_84237:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xEB4,%r14
	je L_408820
.p2align 0x4,,0x7
L_84233:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408819
.p2align 0x4,,0x7
L_84234:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x38(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408819:
L_84235:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84236+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84236
.p2align 0x4
.long 0x5B4
L_84236:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	jmp L_84234
.p2align 0x4
L_408820:
L_84238:
	movq 0x40(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84239+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
L_408822:
L_84186:
	movq 0x0(%rbp),%r15
	movq 0x0(%r15),%r13
	movslq %r14d,%r11
	movq 0x8(%r15),%r14
	movq 0x0(%r14,%r11,8),%r10
	movq 0x0(%r10),%r9
	movq %r9,0x20(%rbp)
	movq 0x8(%r10),%r9
	movq %r9,0x28(%rbp)
	movq 0x10(%r10),%r9
	movq 0xFFFFFFFFFFFFFFF8(%r9),%r15
	shrq $0x1,%r15
	cmpq $0xEB7,%r15
	je L_408831
	cmpq $0xEB8,%r15
	je L_408830
	cmpq $0xEB9,%r15
	je L_408829
	cmpq $0xEBA,%r15
	je L_408827
	cmpq $0xEBB,%r15
	je L_408825
	cmpq $0xEBC,%r15
	je L_408823
L_84187:
	movq %r13,0x48(%rbp)
	movq 0x0(%r9),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x40(%rbp)
	addq $0x40,%rbp
	leaq (L_84188+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408823:
L_84224:
	movq 0x8(%r9),%r15
	movq %r15,0x30(%rbp)
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r14,%r10
	jne L_84201
L_84226:
	movl %r11d,0x48(%rbp)
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x40(%rbp)
	addq $0x18,%r12
	addq $0x40,%rbp
	leaq (L_84227+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408825:
L_84223:
	movq %r9,0x30(%rbp)
.p2align 0x4,,0x7
L_84192:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408826
.p2align 0x4,,0x7
L_84193:
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	jmp L_84182
.p2align 0x4
L_408826:
L_84194:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84195+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84195
.p2align 0x4
.long 0x575
L_84195:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	jmp L_84193
.p2align 0x4
L_408827:
L_84216:
	movq 0x10(%r9),%r15
	movq %r15,0x30(%rbp)
	movq 0x8(%r9),%r15
	movq %r15,0x38(%rbp)
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r14
	jne L_84201
L_84218:
	movl %r11d,0x50(%rbp)
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x48(%rbp)
	addq $0x18,%r12
	addq $0x48,%rbp
	leaq (L_84219+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408829:
L_84215:
	movq %r9,0x30(%rbp)
	jmp L_84192
.p2align 0x4
L_408830:
L_84207:
	movq %r13,0x50(%rbp)
	movq 0x8(%r9),%r15
	movq %r15,0x30(%rbp)
	movl 0x0(%r9),%r14d
	movl %r14d,0x38(%rbp)
	movq %r15,0x48(%rbp)
	addq $0x48,%rbp
	leaq (L_84208+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_58
.p2align 0x4
L_408831:
L_84199:
	movq 0x0(%r9),%r15
	movq 0xFFFFFFFFFFFFFFF0(%r15),%r14
	movl %r14d,%r11d
	movslq %r11d,%r10
	cmpq %r10,%r14
	jne L_84201
L_84202:
	movl %r11d,0x40(%rbp)
	movq $0x3FE3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r13,0x0(%r14)
	movq %r15,0x8(%r14)
	movq %r14,0x38(%rbp)
	addq $0x18,%r12
	addq $0x38,%rbp
	leaq (L_84203+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408833:
L_84185:
	movq 0x0(%rbp),%r13
	movq 0x0(%r13),%r11
	movslq %r14d,%r15
	salq $0x4,%r15
	movq 0x0(%r11,%r15,1),%r11
	movq %r11,%r15
	jmp L_84182
.p2align 0x4
L_408834:
L_84756:
	movq (globalObjptr+0x4A0)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408835:
L_84755:
	movq (globalObjptr+0x498)(%rip),%r14
	movq %r14,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408836:
L_84175:
	movq 0x8(%rbp),%r14
	movq $0x19,0xFFFFFFFFFFFFFFF8(%r14)
	movq %r14,0x0(%rbp)
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408837:
L_84757:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_84758+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84758
.p2align 0x4
.long 0x45C
L_84758:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
	jmp L_84174
.p2align 0x4
L_408838:
L_84759:
	movq $0x5,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
L_408839:
L_84760:
	movq (globalObjptr+0x558)(%rip),%r15
	movq %r15,0x8(%rbp)
	jmp L_84173
.p2align 0x4
.long 0x11B5
loop_989:
	addq $0xFFFFFFFFFFFFFF70,%rbp
	movq 0x90(%rbp),%r14
	movq 0x10(%r14),%r13
	movq %r13,0x90(%rbp)
	movq 0x8(%r14),%r13
	movq 0x0(%r13),%r11
	movq %r11,0x98(%rbp)
	movq %r14,0x88(%rbp)
	cmpq $0x1,%r11
	je L_84612
L_84606:
	movq 0x8(%r11),%r14
	movq %r14,0x88(%rbp)
	movq 0x0(%r11),%r15
.p2align 0x4,,0x7
L_84607:
	movq 0x8(%r15),%r14
	movq %r14,0xA0(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x68(%rbp),%r15
	cmpq %r14,%r15
	je L_408883
L_84608:
	andq $0x3,%r15
	cmpq $0x2,%r15
	je L_408880
	cmpq $0x3,%r15
	je L_408868
.p2align 0x4,,0x7
L_84609:
	movq 0x88(%rbp),%r14
	cmpq $0x1,%r14
	je L_408841
L_84610:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x88(%rbp)
	jmp L_84607
.p2align 0x4
L_408841:
L_84612:
	movq 0x68(%rbp),%r15
	andq $0x3,%r15
	cmpq $0x1,%r15
	je L_408866
	cmpq $0x2,%r15
	je L_408864
	cmpq $0x3,%r15
	je L_408862
L_84613:
	movq 0x98(%rbp),%r15
	cmpq $0x1,%r15
	je L_84620
L_84614:
	movq 0x8(%r15),%r14
	movq %r14,0x88(%rbp)
	movq 0x0(%r15),%r14
	movq $0x1,0x98(%rbp)
	movq %r14,%r15
.p2align 0x4,,0x7
L_84615:
	movq 0x8(%r15),%r14
	movq %r14,0xA0(%rbp)
	movq 0x0(%r15),%r14
	movq 0x10(%r15),%r13
	movq 0x98(%rbp),%r15
	cmpq %r14,%r15
	je L_408860
L_84616:
	andq $0x3,%r15
	cmpq $0x2,%r15
	je L_408857
	cmpq $0x3,%r15
	je L_408844
.p2align 0x4,,0x7
L_84617:
	movq 0x88(%rbp),%r14
	cmpq $0x1,%r14
	je L_408842
L_84618:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x88(%rbp)
	jmp L_84615
.p2align 0x4
L_408842:
L_84620:
	movq 0x90(%rbp),%r15
	movq 0x0(%r15),%r14
	cmpq $0x1,%r14
	je L_408843
L_84621:
	movq %r14,0x90(%rbp)
	movq 0x80(%rbp),%r15
	movq %r15,0x98(%rbp)
	addq $0x90,%rbp
	leaq (loop_989+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_72
.p2align 0x4
L_408843:
L_84622:
	movq 0x48(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408844:
L_84694:
	movq 0x98(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r11d
	movq %r14,%r15
	andq $0x3,%r15
	cmpq $0x3,%r15
	jne L_84617
L_84695:
	shrq $0x2,%r14
	movl %r14d,%r10d
	cmpl %r10d,%r11d
	jne L_84617
	movq %r13,%r15
L_84627:
	movq 0x60(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xF16,%r13
	je L_408846
L_84689:
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF17,%r14
	jne L_84617
L_84690:
	movq %r13,0xB8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xB0(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB0,%rbp
	leaq (L_84691+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1405
.p2align 0x4
L_408846:
L_84628:
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF16,%r14
	jne L_84617
L_84629:
	movq 0x0(%r15),%r14
	movq 0x10(%r13),%r11
	cmpq %r11,0x10(%r14)
	jne L_84617
.p2align 0x4,,0x7
L_84632:
	movq 0x70(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF16,%r14
	je L_408848
L_84681:
	movq 0x0(%r15),%r14
	movq 0xA0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xF17,%r13
	jne L_84617
L_84682:
	movq %r14,0xB0(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_84683+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1405
.p2align 0x4
L_408848:
L_84633:
	movq 0x0(%r15),%r14
	movq 0xA0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xF16,%r13
	jne L_84617
L_84634:
	movq 0x0(%r15),%r13
	movq 0x10(%r13),%r11
	cmpq %r11,0x10(%r14)
	jne L_84617
L_84636:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb doit_16
L_84679:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84680+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84680
.p2align 0x4
.long 0x11BD
L_84680:
	addq $0xFFFFFFFFFFFFFF98,%rbp
doit_16:
	movq 0x20(%rbp),%r15
	movl 0x0(%r15),%r14d
	incl %r14d
	jo L_84180
L_84639:
	movl %r14d,0x0(%r15)
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r14
	movq %r14,0x40(%rbp)
	cmpq $0x1,%r14
	je L_408849
L_84640:
	movq (globalObjptr+0xDF50)(%rip),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84641+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
L_408849:
L_84665:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x50(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x58(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408857:
L_84623:
	movq 0x98(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r11d
	movq %r14,%r15
	andq $0x3,%r15
	cmpq $0x2,%r15
	jne L_84617
L_84624:
	shrq $0x2,%r14
	movl %r14d,%r10d
	cmpl %r10d,%r11d
	jne L_84617
	movq %r13,%r15
	jmp L_84627
.p2align 0x4
L_408860:
	xchgq %r13,%r15
	jmp L_84627
.p2align 0x4
L_408862:
L_84706:
	movq 0x68(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r14d
	movl %r14d,%r15d
	shlq $0x2,%r15
	orq $0x2,%r15
	movq 0x98(%rbp),%r14
	cmpq $0x1,%r14
	je L_84620
L_84707:
	movq 0x8(%r14),%r13
	movq %r13,0x88(%rbp)
	movq 0x0(%r14),%r13
	movq %r15,0x98(%rbp)
	movq %r13,%r15
	jmp L_84615
.p2align 0x4
L_408864:
L_84703:
	movq 0x68(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r14d
	movl %r14d,%r15d
	shlq $0x2,%r15
	orq $0x3,%r15
	movq 0x98(%rbp),%r14
	cmpq $0x1,%r14
	je L_84620
L_84704:
	movq 0x8(%r14),%r13
	movq %r13,0x88(%rbp)
	movq 0x0(%r14),%r13
	movq %r15,0x98(%rbp)
	movq %r13,%r15
	jmp L_84615
.p2align 0x4
L_408866:
L_84700:
	movq 0x98(%rbp),%r15
	cmpq $0x1,%r15
	je L_84620
L_84701:
	movq 0x8(%r15),%r14
	movq %r14,0x88(%rbp)
	movq 0x0(%r15),%r14
	movq $0x0,0x98(%rbp)
	movq %r14,%r15
	jmp L_84615
.p2align 0x4
L_408868:
L_84740:
	movq 0x68(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r11d
	movq %r14,%r15
	andq $0x3,%r15
	cmpq $0x3,%r15
	jne L_84609
L_84741:
	shrq $0x2,%r14
	movl %r14d,%r10d
	cmpl %r10d,%r11d
	jne L_84609
	movq %r13,%r15
L_84713:
	movq 0x70(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xF16,%r13
	je L_408870
L_84735:
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF17,%r14
	jne L_84609
L_84736:
	movq %r13,0xB8(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xB0(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xC0(%rbp)
	addq $0xB0,%rbp
	leaq (L_84737+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1405
.p2align 0x4
L_408870:
L_84714:
	movq 0x0(%r14),%r13
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF16,%r14
	jne L_84609
L_84715:
	movq 0x0(%r15),%r14
	movq 0x10(%r14),%r11
	cmpq %r11,0x10(%r13)
	jne L_84609
.p2align 0x4,,0x7
L_84718:
	movq 0x60(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r14
	shrq $0x1,%r14
	cmpq $0xF16,%r14
	je L_408872
L_84727:
	movq 0x0(%r15),%r14
	movq 0xA0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xF17,%r13
	jne L_84609
L_84728:
	movq %r14,0xB0(%rbp)
	movq 0x0(%r15),%r14
	movq %r14,0xA8(%rbp)
	movq 0x78(%rbp),%r15
	movq %r15,0xB8(%rbp)
	addq $0xA8,%rbp
	leaq (L_84729+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1405
.p2align 0x4
L_408872:
L_84719:
	movq 0x0(%r15),%r14
	movq 0xA0(%rbp),%r15
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r13
	shrq $0x1,%r13
	cmpq $0xF16,%r13
	jne L_84609
L_84720:
	movq 0x0(%r15),%r13
	movq 0x10(%r14),%r11
	cmpq %r11,0x10(%r13)
	jne L_84609
L_84722:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84724
L_84725:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84726+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84726
.p2align 0x4
.long 0x11C1
L_84726:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84724:
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	jmp doit_16
.p2align 0x4
L_408880:
L_84709:
	movq 0x68(%rbp),%r15
	shrq $0x2,%r15
	movl %r15d,%r11d
	movq %r14,%r15
	andq $0x3,%r15
	cmpq $0x2,%r15
	jne L_84609
L_84710:
	shrq $0x2,%r14
	movl %r14d,%r10d
	cmpl %r11d,%r10d
	jne L_84609
	movq %r13,%r15
	jmp L_84713
.p2align 0x4
L_408883:
	xchgq %r13,%r15
	jmp L_84713
.p2align 0x4
.long 0x576
L_84557:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84558
L_84563:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84564+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84564
.p2align 0x4
.long 0xF85
L_84564:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84558:
	movq 0x38(%rbp),%r14
	movq 0x10(%r14),%r13
	cmpb $0x1,0x4(%r13)
	je L_408885
L_84559:
	movq 0x20(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408885:
L_84560:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je L_408886
L_84561:
	movq 0x0(%r14),%r15
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r13)
	movq %r13,%r15
	jmp L_84182
.p2align 0x4
L_408886:
L_84243:
	movq $0x9,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x576
L_84568:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84569
L_84574:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84575+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84575
.p2align 0x4
.long 0xF85
L_84575:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84569:
	movq 0x38(%rbp),%r14
	movq 0x10(%r14),%r13
	cmpb $0x1,0x4(%r13)
	je L_408888
L_84570:
	movq 0x20(%rbp),%r15
	jmp L_84182
.p2align 0x4
L_408888:
L_84571:
	movq 0x38(%rbp),%r15
	movq 0x8(%r15),%r14
	cmpq $0x1,%r14
	je L_84243
L_84572:
	movq 0x0(%r14),%r15
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r13)
	movq %r13,%r15
	jmp L_84182
.p2align 0x4
.long 0x528
L_84538:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_84539+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
.long 0x5BF
L_84473:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84474
L_84482:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84483+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84483
.p2align 0x4
.long 0xF85
L_84483:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84474:
	movq 0x20(%rbp),%r15
	cmpq $0x1,%r15
	je L_408891
L_84475:
L_84476:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x20(%rbp)
	addq $0x10,%r12
	movq 0x38(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84477
.p2align 0x4
L_408891:
L_84481:
	movq 0x28(%rbp),%r14
	xchgq %r14,%r15
	jmp L_84476
.p2align 0x4
.long 0x5BF
L_84515:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84516
L_84517:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84518+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84518
.p2align 0x4
.long 0xF85
L_84518:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84516:
	movq $0x1D79,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x20(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84477
.p2align 0x4
.long 0x571
L_84506:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84507
L_84508:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84509+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84509
.p2align 0x4
.long 0xF84
L_84509:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84507:
	movq $0x1D75,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x28(%rbp),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x20(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84477
.p2align 0x4
.long 0x5C4
L_84494:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84495
L_84499:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84500+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84500
.p2align 0x4
.long 0xF86
L_84500:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84495:
	movq 0x20(%rbp),%r15
	cmpq $0x1,%r15
	je L_408895
L_84496:
L_84497:
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,0x20(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84477
.p2align 0x4
L_408895:
L_84498:
	movq 0x28(%rbp),%r14
	xchgq %r14,%r15
	jmp L_84497
.p2align 0x4
.long 0x56E
L_84488:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84489
L_84490:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84491+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84491
.p2align 0x4
.long 0x575
L_84491:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84489:
	movq $0x1D6F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x20(%rbp)
	jmp L_84477
.p2align 0x4
.long 0x55F
L_84467:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84468
L_84520:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84521+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84521
.p2align 0x4
.long 0xF84
L_84521:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84468:
	movq 0x40(%rbp),%r15
	cmpq $0x1,%r15
	je L_408904
L_84469:
L_84470:
	movq 0x38(%rbp),%r14
	movq 0xFFFFFFFFFFFFFFF8(%r14),%r13
	shrq $0x1,%r13
	cmpq $0xEB7,%r13
	je L_408903
	cmpq $0xEB8,%r13
	je L_408902
	cmpq $0xEB9,%r13
	je L_408901
	cmpq $0xEBA,%r13
	je L_408900
	cmpq $0xEBB,%r13
	je L_408899
	cmpq $0xEBC,%r13
	je L_408898
L_84471:
	movq 0x0(%r14),%r13
	movq %r13,0x28(%rbp)
	movq %r15,0x38(%rbp)
	jmp L_84472
.p2align 0x4
L_408898:
L_84511:
	movq 0x8(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r13
	movq %r15,0x38(%rbp)
	movq %r13,%r15
	jmp L_84512
.p2align 0x4
L_408899:
L_84510:
	movq %r15,0x28(%rbp)
	movq %r14,0x20(%rbp)
	jmp L_84477
.p2align 0x4
L_408900:
L_84502:
	movq %r15,0x40(%rbp)
	movq 0x10(%r14),%r13
	movq %r13,0x28(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x38(%rbp)
	jmp L_84503
.p2align 0x4
L_408901:
L_84501:
	movq %r15,0x28(%rbp)
	movq %r14,0x20(%rbp)
	jmp L_84477
.p2align 0x4
L_408902:
L_84492:
	movq %r15,0x40(%rbp)
	movq 0x8(%r14),%r15
	movq %r15,0x28(%rbp)
	movl 0x0(%r14),%r15d
	movl %r15d,0x38(%rbp)
	jmp L_84493
.p2align 0x4
L_408903:
L_84484:
	movq %r15,0x28(%rbp)
	movq 0x0(%r14),%r15
	jmp L_84485
.p2align 0x4
L_408904:
L_84519:
	movq 0x28(%rbp),%r14
	xchgq %r14,%r15
	jmp L_84470
.p2align 0x4
.long 0x528
L_84269:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x48,%rbp
	leaq (L_84270+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp flattens_0
.p2align 0x4
.long 0x528
L_84400:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq %r15,0x50(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84401+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_20
.p2align 0x4
.long 0x5B7
L_84318:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84319
L_84339:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84340+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84340
.p2align 0x4
.long 0x11B1
L_84340:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84319:
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x0(%r13),%r15
	cmpq $0x1,%r15
	je L_408907
L_84320:
	movq 0x0(%r15),%r14
	movq %r14,%r15
L_84321:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	cmpq $0x1,0x40(%rbp)
	je L_408906
L_84322:
	movq %r14,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408906:
L_84337:
	movq %r14,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
L_408907:
L_84338:
	movq 0x50(%rbp),%r15
	jmp L_84321
.p2align 0x4
.long 0x5B7
L_84378:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84379
L_84382:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84383+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84383
.p2align 0x4
.long 0x11B1
L_84383:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84379:
	movq $0x1D79,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x58(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x8(%r15)
	cmpq $0x1,0x40(%rbp)
	je L_408909
L_84380:
	movq %r15,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408909:
L_84381:
	movq %r15,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
.long 0x5B6
L_84324:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq 0x20(%r15),%r14
	movq 0x8(%r14),%r13
	movl 0x0(%r13),%r11d
	movq %r15,0x20(%rbp)
	cmpl $0x2,0x28(%rbp)
	jl L_408912
L_84325:
	cmpl $0x2,%r11d
	je L_408911
L_84326:
	movq 0x40(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84327
.p2align 0x4
L_408911:
L_84331:
	movq 0x40(%rbp),%r15
	movq 0x18(%r15),%r14
	movq %r14,0x28(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x60,%rbp
	leaq (L_84332+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp x_1184
.p2align 0x4
L_408912:
L_84336:
	movq (globalObjptr+0x1F30)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x11B3
L_84366:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x60(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84367
L_84370:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x70,%rbp
	leaq (L_84371+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84371
.p2align 0x4
.long 0x11B4
L_84371:
	addq $0xFFFFFFFFFFFFFF90,%rbp
L_84367:
	movq $0x1D75,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x60(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x58(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x50(%rbp),%r14
	movq %r14,0x10(%r15)
	cmpq $0x1,0x40(%rbp)
	je L_408913
L_84368:
	movq %r15,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408913:
L_84369:
	movq %r15,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
.long 0x5B7
L_84351:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x58(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84352
L_84358:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84359+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84359
.p2align 0x4
.long 0x11B1
L_84359:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84352:
	movq 0x58(%rbp),%r14
	movq 0x0(%r14),%r13
	movq 0x0(%r13),%r15
	cmpq $0x1,%r15
	je L_408916
L_84353:
	movq 0x0(%r15),%r14
	movq %r14,%r15
L_84354:
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x2C(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	cmpq $0x1,0x40(%rbp)
	je L_408915
L_84355:
	movq %r14,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408915:
L_84356:
	movq %r14,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
L_408916:
L_84357:
	movq 0x50(%rbp),%r15
	jmp L_84354
.p2align 0x4
.long 0x529
L_84344:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84345
L_84348:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_84349+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84349
.p2align 0x4
.long 0x11B2
L_84349:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_84345:
	movq $0x1D6F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x50(%rbp),%r14
	movq %r14,0x0(%r15)
	cmpq $0x1,0x40(%rbp)
	je L_408918
L_84346:
	movq %r15,0x50(%rbp)
	jmp L_84323
.p2align 0x4
L_408918:
L_84347:
	movq %r15,0x28(%rbp)
	movq $0x1,0x20(%rbp)
	jmp L_84327
.p2align 0x4
.long 0x55F
L_84299:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movl 0x48(%rbp),%r15d
	movl %r15d,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84300
L_84311:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84312+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84312
.p2align 0x4
.long 0x68C
L_84312:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84300:
	movl 0x40(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_408920
L_84301:
	movq $0x400B,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x48(%rbp)
	movl $0x1,0x50(%rbp)
	addq $0x48,%rbp
	leaq (L_84302+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp unfoldi_3
.p2align 0x4
L_408920:
L_84310:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x30(%rbp)
	jmp L_84289
.p2align 0x4
.long 0x597
L_84259:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x50(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x60(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x68(%rbp)
	addq $0x60,%rbp
	leaq (L_84260+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
.long 0x5F9
L_84250:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84251
L_84255:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_84256+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84256
.p2align 0x4
.long 0x738
L_84256:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_84251:
	movq 0x20(%rbp),%r14
	movq 0x0(%r14),%r15
L_84252:
	movq %r15,%r13
	andq $0x3,%r13
	jnz L_408922
L_84254:
	movq 0x0(%r15),%r13
	movq 0x0(%r13),%r15
	movq %r13,%r11
	shrq $0x8,%r11
	movq (gcState+0x3C8)(%rip),%r10
	movb $0x1,0x0(%r10,%r11,1)
	movq 0x40(%rbp),%r11
	movq %r11,0x0(%r13)
	movq 0x28(%rbp),%r13
	movq 0x0(%r13),%r9
	movq $0x49A3,0x0(%r12)
	movq %r12,%r8
	addq $0x8,%r8
	addq $0x18,%r12
	movq %r15,0x0(%r8)
	movq %r14,0x8(%r8)
	movq $0x1B55,0x0(%r12)
	movq %r12,%rsp
	addq $0x8,%rsp
	movq %r8,0x0(%rsp)
	movq %r9,0x8(%rsp)
	addq $0x18,%r12
	movq %r13,%r9
	shrq $0x8,%r9
	movb $0x1,0x0(%r10,%r9,1)
	movq %rsp,0x0(%r13)
	movq $0x1093,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r15,0x0(%r9)
	addq $0x10,%r12
	movq 0x0(%r14),%r15
	movq $0x27B7,0x0(%r12)
	movq %r12,%r8
	addq $0x8,%r8
	movq %r9,0x0(%r8)
	movq %r15,0x8(%r8)
	addq $0x18,%r12
	movq %r14,%r15
	shrq $0x8,%r15
	movb $0x1,0x0(%r10,%r15,1)
	movq %r8,0x0(%r14)
	movq 0x0(%r13),%r15
	movq $0x4A57,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	addq $0x10,%r12
	movq %r14,0x0(%r9)
	movq $0x1B55,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r9,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movb $0x1,0x0(%r10,%r15,1)
	movq %r14,0x0(%r13)
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq %r11,0x0(%r14)
	movq 0x38(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
L_408922:
L_84253:
	movq (globalObjptr+0x560)(%rip),%r15
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x528
L_84239:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x48(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x58(%rbp)
	movq 0x20(%rbp),%r15
	movq %r15,0x60(%rbp)
	addq $0x58,%rbp
	leaq (L_84240+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp get_59
.p2align 0x4
.long 0x576
L_84188:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84189
L_84197:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84198+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84198
.p2align 0x4
.long 0xF85
L_84198:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84189:
	movq 0x38(%rbp),%r15
	cmpq $0x1,%r15
	je L_408924
L_84190:
L_84191:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	movq %r14,0x30(%rbp)
	addq $0x10,%r12
	jmp L_84192
.p2align 0x4
L_408924:
L_84196:
	movq 0x30(%rbp),%r14
	xchgq %r14,%r15
	jmp L_84191
.p2align 0x4
.long 0x576
L_84227:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
	movq 0x40(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84228
L_84229:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84230+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84230
.p2align 0x4
.long 0xF85
L_84230:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84228:
	movq $0x1D79,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x8(%r15)
	movq %r15,0x30(%rbp)
	jmp L_84192
.p2align 0x4
.long 0x55F
L_84219:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84220
L_84221:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84222+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84222
.p2align 0x4
.long 0xF84
L_84222:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84220:
	movq $0x1D75,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x30(%rbp),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x30(%rbp)
	jmp L_84192
.p2align 0x4
.long 0x11AD
L_84208:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x40(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84209
L_84213:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84214+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84214
.p2align 0x4
.long 0xF86
L_84214:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84209:
	movq 0x40(%rbp),%r15
	cmpq $0x1,%r15
	je L_408928
L_84210:
L_84211:
	movq $0x1D71,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl 0x38(%rbp),%r15d
	movl %r15d,0x0(%r14)
	movl $0x0,0x4(%r14)
	movq %r14,0x30(%rbp)
	jmp L_84192
.p2align 0x4
L_408928:
L_84212:
	movq 0x30(%rbp),%r14
	xchgq %r14,%r15
	jmp L_84211
.p2align 0x4
.long 0x557
L_84203:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
	movq 0x38(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84204
L_84205:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x40,%rbp
	leaq (L_84206+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84206
.p2align 0x4
.long 0x575
L_84206:
	addq $0xFFFFFFFFFFFFFFC0,%rbp
L_84204:
	movq $0x1D6F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x30(%rbp)
	jmp L_84192
.p2align 0x4
.long 0x11C0
L_84691:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movl 0xB0(%rbp),%r15d
	movl %r15d,0xA8(%rbp)
	testl %r15d,%r15d
	jnz L_84632
	jmp L_84617
.p2align 0x4
.long 0x11BE
L_84683:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0xA0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84684
L_84687:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_84688+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84688
.p2align 0x4
.long 0x11BF
L_84688:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_84684:
	movl 0xA0(%rbp),%r15d
	testl %r15d,%r15d
	jnz doit_16
	jmp L_84617
.p2align 0x4
.long 0x11B6
L_84641:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq 0x50(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_84642+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x11C4
L_84737:
	addq $0xFFFFFFFFFFFFFF50,%rbp
	movl 0xB0(%rbp),%r15d
	movl %r15d,0xA8(%rbp)
	testl %r15d,%r15d
	jnz L_84718
	jmp L_84609
.p2align 0x4
.long 0x11C2
L_84729:
	addq $0xFFFFFFFFFFFFFF58,%rbp
	movl 0xA8(%rbp),%r15d
	movl %r15d,0xA0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84730
L_84733:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0xB0,%rbp
	leaq (L_84734+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84734
.p2align 0x4
.long 0x11C3
L_84734:
	addq $0xFFFFFFFFFFFFFF50,%rbp
L_84730:
	movl 0xA0(%rbp),%r15d
	testl %r15d,%r15d
	jnz L_84724
	jmp L_84609
.p2align 0x4
.long 0xC9F
L_84539:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84540
L_84543:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_84544+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84544
.p2align 0x4
.long 0x5A2
L_84544:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_84540:
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r14),%r13
L_84541:
	movq %r13,%r15
	andq $0x3,%r15
	jnz L_84243
L_84542:
	movq 0x0(%r13),%r15
	movq 0x20(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13),%r11
	movq $0x1DE3,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r13
	movq $0x49A1,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	addq $0x10,%r12
	movq %r14,0x0(%r10)
	movq $0x1B55,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r10,0x0(%r14)
	movq %r13,0x8(%r14)
	addq $0x18,%r12
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	jmp L_84532
.p2align 0x4
.long 0x5BF
L_84270:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84271
L_84272:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84273+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84273
.p2align 0x4
.long 0xF85
L_84273:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84271:
	movq $0x1D79,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x8(%r15)
	movq $0x9D9,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x10(%r14)
	addq $0x20,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq 0x30(%rbp),%r13
	movq %r13,0x8(%r14)
	movq %r14,%r15
	jmp L_84182
.p2align 0x4
.long 0x541
L_84401:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84402
L_84462:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84463+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84463
.p2align 0x4
.long 0xF84
L_84463:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84402:
	movq 0x30(%rbp),%r11
	cmpq $0x1,%r11
	je L_408953
	cmpq $0x2,%r11
	je L_408952
L_84403:
	movq 0x8(%r11),%r15
	movq 0x38(%rbp),%r11
	cmpq 0x8(%r11),%r15
	je L_408951
L_84404:
	movq 0x40(%rbp),%r11
	movq 0x8(%r11),%r13
	movq (globalObjptr+0x1068)(%rip),%r11
	movq 0x0(%r11),%r14
	incq %r14
	jo L_84276
L_84405:
	movq %r14,0x0(%r11)
	movq 0x0(%r15),%r11
	cmpq $0x1,%r11
	je L_408949
L_84406:
	movq 0x8(%r11),%r14
	movq 0x0(%r11),%r11
	movl $0x0,0x30(%rbp)
	movq %r11,%r15
.p2align 0x4,,0x7
L_84408:
	movq %r15,%r11
	andq $0x3,%r11
	jnz L_408948
L_84447:
	movq 0xFFFFFFFFFFFFFFF8(%r15),%r11
	shrq $0x1,%r11
	cmpq $0xCF4,%r11
	jne L_408947
L_84448:
	movq 0x8(%r15),%r11
	movq %r11,0x38(%rbp)
	cmpq %r13,0x0(%r15)
	movq %r13,(localObjptr+0x8)(%rip)
	je L_408943
L_84409:
	movl 0x30(%rbp),%r11d
	incl %r11d
	jo L_84180
L_84410:
	cmpq $0x1,%r14
	je L_408939
L_84411:
	movl %r11d,0x30(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq (localObjptr+0x8)(%rip),%r13
	jmp L_84408
.p2align 0x4
L_408939:
	movl %r11d,%ecx
L_84413:
	movslq %ecx,%r15
	movq (globalObjptr+0x1070)(%rip),%r14
	addq 0x0(%r14),%r15
	jo L_84286
L_84414:
	movq %r15,0x0(%r14)
	movq (globalObjptr+0x1078)(%rip),%r15
	cmpl %ecx,0x0(%r15)
	jnl L_84416
L_84446:
	movl %ecx,0x0(%r15)
L_84416:
	movq (globalObjptr+0xDFE0)(%rip),%r15
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_84417+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
L_408943:
L_84450:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84451
L_84456:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84457+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84457
.p2align 0x4
.long 0x78A
L_84457:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84451:
	movl 0x30(%rbp),%r14d
	movslq %r14d,%r15
	movq (globalObjptr+0x1070)(%rip),%r13
	addq 0x0(%r13),%r15
	jo L_84286
L_84452:
	movq %r15,0x0(%r13)
	movq (globalObjptr+0x1078)(%rip),%r13
	cmpl %r14d,0x0(%r13)
	jl L_408944
L_84453:
	movq 0x38(%rbp),%r15
L_84454:
	movq $0x1D6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x0(%r14)
	addq $0x10,%r12
	movq $0x9D9,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x10(%r15)
	addq $0x20,%r12
	movq 0x28(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x20(%rbp),%r14
	movq %r14,0x8(%r15)
	jmp L_84182
.p2align 0x4
L_408944:
L_84455:
	movq (globalObjptr+0x1078)(%rip),%r14
	movl 0x30(%rbp),%r13d
	movl %r13d,0x0(%r14)
	movq 0x38(%rbp),%r15
	jmp L_84454
.p2align 0x4
L_408947:
	movq %r13,(localObjptr+0x8)(%rip)
	jmp L_84409
.p2align 0x4
L_408948:
	movq %r13,(localObjptr+0x8)(%rip)
	jmp L_84409
.p2align 0x4
L_408949:
L_84458:
	xorl %ecx,%ecx
	jmp L_84413
.p2align 0x4
L_408951:
L_84459:
	movq 0x28(%rbp),%r15
	jmp L_84454
.p2align 0x4
L_408952:
L_84461:
	movq 0x28(%rbp),%r15
	jmp L_84454
.p2align 0x4
L_408953:
L_84460:
	movq 0x28(%rbp),%r15
	jmp L_84454
.p2align 0x4
.long 0x11AF
L_84332:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movl 0x60(%rbp),%r15d
	movl %r15d,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84333
L_84334:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_84335+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84335
.p2align 0x4
.long 0x11B0
L_84335:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_84333:
	movq $0x15,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq $0x1,0x0(%r15)
	movq $0x13,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq $0x1,0x0(%r14)
	movq $0x17,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r15,0x8(%r13)
	movq %r14,0x10(%r13)
	addq $0x28,%r12
	movl 0x30(%rbp),%r15d
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq 0x28(%rbp),%r15
	movq %r15,0x18(%r13)
	movq 0x38(%rbp),%r15
	movq 0x0(%r15),%r14
	movq $0x49A7,0x0(%r12)
	movq %r12,%r11
	addq $0x8,%r11
	addq $0x10,%r12
	movq 0x20(%rbp),%r10
	movq %r10,0x0(%r11)
	movq $0x1B55,0x0(%r12)
	movq %r12,%r9
	addq $0x8,%r9
	movq %r11,0x0(%r9)
	movq %r14,0x8(%r9)
	addq $0x18,%r12
	movq %r15,%r14
	shrq $0x8,%r14
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r14,1)
	movq %r9,0x0(%r15)
	movq 0x0(%r10),%r15
	movq 0x0(%r15),%r14
	movq $0x1CE1,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r13,0x0(%r10)
	movq %r14,0x8(%r10)
	movq %r13,0x20(%rbp)
	addq $0x18,%r12
	movq %r15,%r14
	shrq $0x8,%r14
	movb $0x1,0x0(%r11,%r14,1)
	movq %r10,0x0(%r15)
	movq 0x50(%rbp),%r15
	movq %r15,0x28(%rbp)
	jmp L_84327
.p2align 0x4
.long 0x574
L_84302:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
	movq 0x48(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84303
L_84308:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x48,%rbp
	leaq (L_84309+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84309
.p2align 0x4
.long 0xF85
L_84309:
	addq $0xFFFFFFFFFFFFFFB8,%rbp
L_84303:
	movq $0x1E11,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r15,0x40(%rbp)
	addq $0x10,%r12
	movq 0x38(%rbp),%r14
	movq %r14,0x0(%r15)
	movq $0x1,0x50(%rbp)
	movl $0x0,0x58(%rbp)
	addq $0x50,%rbp
	leaq (L_84304+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp tabulate_5
.p2align 0x4
.long 0xC95
L_84260:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
	movq 0x60(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84261
L_84264:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x60,%rbp
	leaq (L_84265+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84265
.p2align 0x4
.long 0x11AE
L_84265:
	addq $0xFFFFFFFFFFFFFFA0,%rbp
L_84261:
	movq 0x50(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r14),%r13
L_84262:
	movq %r13,%r15
	andq $0x3,%r15
	jnz L_84243
L_84263:
	movq 0x0(%r13),%r15
	movq 0x20(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13),%r11
	movq $0x1DE3,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r13
	movq $0x4A55,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	addq $0x10,%r12
	movq %r14,0x0(%r10)
	movq $0x1B55,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r10,0x0(%r14)
	movq %r13,0x8(%r14)
	addq $0x18,%r12
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	jmp L_84249
.p2align 0x4
.long 0xC9F
L_84240:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
	movq 0x58(%rbp),%r15
	movq %r15,0x20(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84241
L_84245:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x58,%rbp
	leaq (L_84246+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84246
.p2align 0x4
.long 0x5A2
L_84246:
	addq $0xFFFFFFFFFFFFFFA8,%rbp
L_84241:
	movq 0x48(%rbp),%r15
	movq 0x8(%r15),%r14
	movq 0x0(%r14),%r13
L_84242:
	movq %r13,%r15
	andq $0x3,%r15
	jnz L_84243
L_84244:
	movq 0x0(%r13),%r15
	movq 0x20(%rbp),%r14
	movq 0x8(%r14),%r13
	movq 0x0(%r13),%r11
	movq $0x1DE3,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	movq %r15,0x0(%r10)
	movq %r11,0x8(%r10)
	addq $0x18,%r12
	movq %r13,%r15
	shrq $0x8,%r15
	movq (gcState+0x3C8)(%rip),%r11
	movb $0x1,0x0(%r11,%r15,1)
	movq %r10,0x0(%r13)
	movq 0x28(%rbp),%r15
	movq 0x0(%r15),%r13
	movq $0x4A59,0x0(%r12)
	movq %r12,%r10
	addq $0x8,%r10
	addq $0x10,%r12
	movq %r14,0x0(%r10)
	movq $0x1B55,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r10,0x0(%r14)
	movq %r13,0x8(%r14)
	addq $0x18,%r12
	movq %r15,%r13
	shrq $0x8,%r13
	movb $0x1,0x0(%r11,%r13,1)
	movq %r14,0x0(%r15)
	jmp L_84233
.p2align 0x4
.long 0x11B7
L_84642:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84643+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x1
L_84417:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	movq (globalObjptr+0xDFE8)(%rip),%r15
	movq %r15,0x10(%rbp)
	addq $0x10,%rbp
	leaq (L_84418+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x570
L_84304:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
	movq 0x50(%rbp),%r15
	movq %r15,0x38(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84305
L_84306:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x50,%rbp
	leaq (L_84307+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84307
.p2align 0x4
.long 0xF84
L_84307:
	addq $0xFFFFFFFFFFFFFFB0,%rbp
L_84305:
	movq $0x1D75,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x20,%r12
	movq 0x30(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x40(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x38(%rbp),%r14
	movq %r14,0x10(%r15)
	movq %r15,0x30(%rbp)
	jmp L_84289
.p2align 0x4
.long 0x11B7
L_84643:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x28(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84644
L_84676:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84677+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84677
.p2align 0x4
.long 0x111B
L_84677:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84644:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x18,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1,0x8(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r13)
	movq %r14,0x8(%r13)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_84645:
	addl 0x0(%r15),%ecx
	movl %ecx,0x20(%rbp)
	jo L_84180
L_84646:
	cmpq $0x1,%r14
	je L_408962
L_84647:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_84645
.p2align 0x4
L_408962:
L_84648:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84649
L_84674:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84675+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84675
.p2align 0x4
.long 0x5BB
L_84675:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84649:
	movl 0x20(%rbp),%r15d
	testl %r15d,%r15d
	jz L_408963
L_84650:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	addq $0x10,%r12
	movq 0x48(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0xC3,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movl %r15d,0x0(%r13)
	movl $0x0,0x4(%r13)
	movq %r13,0x20(%rbp)
L_84651:
	movq (globalObjptr+0xF0D8)(%rip),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84652+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
L_408963:
L_84673:
	movq (globalObjptr+0x9D0)(%rip),%r14
	movq %r14,0x20(%rbp)
	jmp L_84651
.p2align 0x4
.long 0x4AF
L_84418:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
	movq 0x10(%rbp),%r15
	movq %r15,0x8(%rbp)
	movq (globalObjptr+0xDFF0)(%rip),%r15
	movq %r15,0x18(%rbp)
	addq $0x18,%rbp
	leaq (L_84419+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x11B7
L_84652:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x28(%rbp)
	movq 0x38(%rbp),%r15
	movq %r15,0x68(%rbp)
	movq 0x30(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_84653+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp toString_538
.p2align 0x4
.long 0x5AF
L_84419:
	addq $0xFFFFFFFFFFFFFFE8,%rbp
	movq 0x18(%rbp),%r15
	movq %r15,0x10(%rbp)
	movq (globalObjptr+0xDFF8)(%rip),%r15
	movq %r15,0x20(%rbp)
	addq $0x20,%rbp
	leaq (L_84420+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x11B8
L_84653:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x30(%rbp)
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84654+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp str_3
.p2align 0x4
.long 0x51E
L_84420:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	movq 0x20(%rbp),%r15
	movq %r15,0x18(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84421
L_84444:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x28,%rbp
	leaq (L_84445+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84445
.p2align 0x4
.long 0x4AE
L_84445:
	addq $0xFFFFFFFFFFFFFFD8,%rbp
L_84421:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x18(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x10(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	movq %r14,0x8(%r15)
	addq $0x18,%r12
	movq 0x8(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x20(%rbp)
	movq %r15,0x8(%r13)
	addq $0x18,%r12
	movq 0x0(%rbp),%r11
	movq %r11,0x0(%r13)
	xorl %ecx,%ecx
	movq %r15,%r14
	movq %r11,%r15
.p2align 0x4,,0x7
L_84422:
	addl 0x0(%r15),%ecx
	movl %ecx,0x28(%rbp)
	jo L_84180
L_84423:
	cmpq $0x1,%r14
	je L_408967
L_84424:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_84422
.p2align 0x4
L_408967:
L_84425:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84426
L_84442:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x38,%rbp
	leaq (L_84443+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84443
.p2align 0x4
.long 0x4E6
L_84443:
	addq $0xFFFFFFFFFFFFFFC8,%rbp
L_84426:
	movl 0x28(%rbp),%ecx
	testl %ecx,%ecx
	jz L_408968
L_84427:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x20(%rbp),%r14
	movq %r14,0x0(%r15)
toString_114:
	movq $0xC3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,0x10(%rbp)
	movq $0x1,0x8(%rbp)
	addq $0x8,%rbp
	leaq (rev_114+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3785
.p2align 0x4
L_408968:
L_84441:
	movq $0x1,%r15
	xorl %r14d,%r14d
	xchgl %r14d,%ecx
	jmp toString_114
.p2align 0x4
.long 0x11B8
L_84654:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x30(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84655
L_84671:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84672+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84672
.p2align 0x4
.long 0x111B
L_84672:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84655:
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x30(%rbp),%r13
	movq %r13,0x0(%r15)
	movq $0x1,0x8(%r15)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movq 0x28(%rbp),%r13
	movq %r13,0x0(%r14)
	movq $0x1B6D,0x0(%r12)
	movq %r12,%r13
	addq $0x8,%r13
	movq %r13,0x48(%rbp)
	movq %r14,0x8(%r13)
	addq $0x18,%r12
	movq 0x20(%rbp),%r15
	movq %r15,0x0(%r13)
	xorl %ecx,%ecx
.p2align 0x4,,0x7
L_84656:
	addl 0x0(%r15),%ecx
	movl %ecx,0x20(%rbp)
	jo L_84180
L_84657:
	cmpq $0x1,%r14
	je L_408972
L_84658:
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	jmp L_84656
.p2align 0x4
L_408972:
L_84659:
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84660
L_84669:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84670+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84670
.p2align 0x4
.long 0x11BC
L_84670:
	addq $0xFFFFFFFFFFFFFF98,%rbp
L_84660:
	movl 0x20(%rbp),%ecx
	testl %ecx,%ecx
	jz L_408973
L_84661:
	movq $0x1B69,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x48(%rbp),%r14
	movq %r14,0x0(%r15)
x_256:
	movq $0xC3,0x0(%r12)
	movq %r12,%r14
	addq $0x8,%r14
	movl %ecx,0x0(%r14)
	movq %r15,0x8(%r14)
	addq $0x18,%r12
	movl $0x0,0x4(%r14)
	movq %r14,0x70(%rbp)
	movq $0x3E37,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x40(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,0x78(%rbp)
	movq (globalObjptr+0x9D8)(%rip),%r15
	movq %r15,0x68(%rbp)
	addq $0x68,%rbp
	leaq (L_84662+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp loop_3780
.p2align 0x4
L_408973:
L_84668:
	movq $0x1,%r15
	xorl %r14d,%r14d
	xchgl %r14d,%ecx
	jmp x_256
.p2align 0x4
.long 0x1
rev_114:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq $0x1,%r15
	je L_408979
L_84428:
	movq 0x0(%r15),%r14
	movq 0x8(%r15),%r15
	movq %r15,0x0(%rbp)
	movq %r14,0x8(%rbp)
	movq $0x1,0x10(%rbp)
.p2align 0x4,,0x7
L_84429:
	cmpq %r12,(gcState+0x8)(%rip)
	jb L_408978
.p2align 0x4,,0x7
L_84430:
	movq $0x1B53,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x18,%r12
	movq 0x8(%rbp),%r14
	movq %r14,0x0(%r15)
	movq 0x10(%rbp),%r14
	movq %r14,0x8(%r15)
	movq 0x0(%rbp),%r14
	cmpq $0x1,%r14
	je L_408977
L_84431:
	movq %r15,0x10(%rbp)
	movq 0x0(%r14),%r15
	movq 0x8(%r14),%r14
	movq %r14,0x0(%rbp)
	movq %r15,0x8(%rbp)
	jmp L_84429
.p2align 0x4
L_408977:
L_84433:
	movq %r15,0x8(%rbp)
	addq $0x8,%rbp
	leaq (L_84434+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp concat_0
.p2align 0x4
L_408978:
L_84438:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x20,%rbp
	leaq (L_84439+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84439
.p2align 0x4
.long 0x45B
L_84439:
	addq $0xFFFFFFFFFFFFFFE0,%rbp
	jmp L_84430
.p2align 0x4
L_408979:
L_84440:
	movq $0x1,%r14
	xchgq %r14,%r15
	jmp L_84433
.p2align 0x4
.long 0x11B9
L_84662:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	movq 0x68(%rbp),%r15
	movq %r15,0x20(%rbp)
	movq (globalObjptr+0xA088)(%rip),%r15
	movq %r15,0x68(%rbp)
	movq 0x40(%rbp),%r15
	movq %r15,0x70(%rbp)
	addq $0x68,%rbp
	leaq (L_84663+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	jmp output_0
.p2align 0x4
.long 0x1
L_84434:
	addq $0xFFFFFFFFFFFFFFF8,%rbp
	movq 0x8(%rbp),%r15
	movq %r15,0x0(%rbp)
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84435
L_84436:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x10,%rbp
	leaq (L_84437+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84437
.p2align 0x4
.long 0x451
L_84437:
	addq $0xFFFFFFFFFFFFFFF0,%rbp
L_84435:
	movq $0x192F,0x0(%r12)
	movq %r12,%r15
	addq $0x8,%r15
	addq $0x10,%r12
	movq 0x0(%rbp),%r14
	movq %r14,0x0(%r15)
	movq %r15,(globalObjptrNonRoot+0x0)(%rip)
	movq (gcState+0x560)(%rip),%rbp
	addq (gcState+0x20)(%rip),%rbp
	jmp *0xFFFFFFFFFFFFFFF8(%rbp)
.p2align 0x4
.long 0x11BA
L_84663:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	cmpq %r12,(gcState+0x8)(%rip)
	jnb L_84665
L_84666:
	movq (c_stackP+0x0)(%rip),%rsp
	movl $0x0,%r15d
	movl %r15d,%edx
	xorq %rsi,%rsi
	leaq gcState(%rip),%r15
	movq %r15,%rdi
	xorq %rax,%rax
	addq $0x68,%rbp
	leaq (L_84667+0x0)(%rip),%r15
	movq %r15,0xFFFFFFFFFFFFFFF8(%rbp)
	movq %rbp,(gcState+0x10)(%rip)
	movq %r12,(gcState+0x0)(%rip)
	call GC_collect
	movq (gcState+0x0)(%rip),%r12
	movq (gcState+0x10)(%rip),%rbp
	jmp L_84667
.p2align 0x4
.long 0x11BB
L_84667:
	addq $0xFFFFFFFFFFFFFF98,%rbp
	jmp L_84665
